import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (short) 1, (int) (byte) 10, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 10L, (double) 'a', (double) 'a');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) (short) -1, 0L, (long) '#');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(35, (int) (byte) 10, 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long[] longArray7 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray8 = new long[] {};
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(longArray7, longArray8);
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long long11 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long long13 = org.apache.commons.lang.math.NumberUtils.min(longArray7);
        long[] longArray17 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray18 = new long[] {};
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(longArray17, longArray18);
        long long20 = org.apache.commons.lang.math.NumberUtils.max(longArray17);
        long long21 = org.apache.commons.lang.math.NumberUtils.max(longArray17);
        long long22 = org.apache.commons.lang.math.NumberUtils.min(longArray17);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(longArray7, longArray17);
        long[] longArray27 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray28 = new long[] {};
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray28);
        long long30 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray17, longArray27);
        long[] longArray35 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray36 = new long[] {};
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray35, longArray36);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray35);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray27);
        long long40 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long long41 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        float float3 = org.apache.commons.lang.math.NumberUtils.max(0.0f, (float) (byte) 100, (float) (short) 100);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) (-1.0f), (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double double35 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double[] doubleArray38 = new double[] { 100L, 1.0f };
        double[] doubleArray42 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray42);
        double double44 = org.apache.commons.lang.math.NumberUtils.max(doubleArray38);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray38);
        double[] doubleArray48 = new double[] { 100L, 1.0f };
        double[] doubleArray52 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray48, doubleArray52);
        double[] doubleArray56 = new double[] { 100L, 1.0f };
        double[] doubleArray60 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray56, doubleArray60);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray52, doubleArray56);
        double double63 = org.apache.commons.lang.math.NumberUtils.max(doubleArray56);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray56);
        double double65 = org.apache.commons.lang.math.NumberUtils.max(doubleArray56);
        double double66 = org.apache.commons.lang.math.NumberUtils.min(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, ' ', 100.0f };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float12 = org.apache.commons.lang.math.NumberUtils.min(floatArray10);
        float float13 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        float[] floatArray17 = new float[] { 0, 1.0f, 100 };
        float[] floatArray19 = new float[] { (-1L) };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray17, floatArray19);
        float[] floatArray24 = new float[] { 0, ' ', 100.0f };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray24);
        float[] floatArray26 = new float[] {};
        float[] floatArray30 = new float[] { 0, 1.0f, 100 };
        float[] floatArray32 = new float[] { (-1L) };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray32);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray30);
        float[] floatArray38 = new float[] { 0, 1.0f, 100 };
        float[] floatArray40 = new float[] { (-1L) };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(floatArray38, floatArray40);
        float[] floatArray45 = new float[] { 0, ' ', 100.0f };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray40, floatArray45);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray40);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(floatArray24, floatArray40);
        float float49 = org.apache.commons.lang.math.NumberUtils.max(floatArray40);
        float float50 = org.apache.commons.lang.math.NumberUtils.max(floatArray40);
        float float51 = org.apache.commons.lang.math.NumberUtils.min(floatArray40);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray40);
        float float53 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 100.0f + "'", float13 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-1.0f) + "'", float49 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-1.0f) + "'", float50 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-1.0f) + "'", float51 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 100.0f + "'", float53 == 100.0f);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray17);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray17);
        int int26 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int int27 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int[] intArray32 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray37 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(intArray32, intArray37);
        int int39 = org.apache.commons.lang.math.NumberUtils.max(intArray37);
        int int40 = org.apache.commons.lang.math.NumberUtils.max(intArray37);
        int[] intArray45 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(intArray45, intArray50);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(intArray37, intArray45);
        int int53 = org.apache.commons.lang.math.NumberUtils.min(intArray45);
        int int54 = org.apache.commons.lang.math.NumberUtils.max(intArray45);
        int int55 = org.apache.commons.lang.math.NumberUtils.max(intArray45);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray45);
        int[] intArray57 = null;
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray57);
        java.lang.Class<?> wildcardClass59 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (byte) 1, (int) (short) 1, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long long6 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long7 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long8 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long9 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long[] longArray13 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray14 = new long[] {};
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray14);
        long long16 = org.apache.commons.lang.math.NumberUtils.max(longArray13);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray13);
        long long18 = org.apache.commons.lang.math.NumberUtils.min(longArray13);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray13);
        long[] longArray24 = new long[] { 0L, 35, 32L, '#' };
        long[] longArray28 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray29 = new long[] {};
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray29);
        long long31 = org.apache.commons.lang.math.NumberUtils.max(longArray28);
        long long32 = org.apache.commons.lang.math.NumberUtils.max(longArray28);
        long long33 = org.apache.commons.lang.math.NumberUtils.max(longArray28);
        long long34 = org.apache.commons.lang.math.NumberUtils.min(longArray28);
        long[] longArray38 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray39 = new long[] {};
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(longArray38, longArray39);
        long long41 = org.apache.commons.lang.math.NumberUtils.max(longArray38);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray38);
        long long43 = org.apache.commons.lang.math.NumberUtils.min(longArray38);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray38);
        long[] longArray48 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray49 = new long[] {};
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(longArray48, longArray49);
        long long51 = org.apache.commons.lang.math.NumberUtils.max(longArray48);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(longArray38, longArray48);
        long[] longArray56 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray57 = new long[] {};
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(longArray56, longArray57);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(longArray48, longArray56);
        long long60 = org.apache.commons.lang.math.NumberUtils.min(longArray48);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(longArray24, longArray48);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray48);
        long long63 = org.apache.commons.lang.math.NumberUtils.max(longArray48);
        long[] longArray67 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray68 = new long[] {};
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(longArray67, longArray68);
        long long70 = org.apache.commons.lang.math.NumberUtils.max(longArray67);
        long long71 = org.apache.commons.lang.math.NumberUtils.max(longArray67);
        long long72 = org.apache.commons.lang.math.NumberUtils.max(longArray67);
        long[] longArray73 = new long[] {};
        long[] longArray75 = new long[] { (byte) -1 };
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(longArray73, longArray75);
        long long77 = org.apache.commons.lang.math.NumberUtils.max(longArray75);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(longArray67, longArray75);
        long long79 = org.apache.commons.lang.math.NumberUtils.min(longArray75);
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(longArray48, longArray75);
        long long81 = org.apache.commons.lang.math.NumberUtils.max(longArray75);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[0, 35, 32, 35]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 52L + "'", long51 == 52L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 52L + "'", long70 == 52L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 0, (float) 52L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 100, (byte) 10, (byte) 1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 1, (short) 100, (short) (byte) -1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short[] shortArray10 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short11 = org.apache.commons.lang.math.NumberUtils.max(shortArray10);
        short[] shortArray15 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray15);
        short short17 = org.apache.commons.lang.math.NumberUtils.min(shortArray10);
        short[] shortArray20 = new short[] { (short) -1, (short) -1 };
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray20);
        short short23 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short24 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray20);
        short short26 = org.apache.commons.lang.math.NumberUtils.min(shortArray4);
        short[] shortArray30 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short31 = org.apache.commons.lang.math.NumberUtils.max(shortArray30);
        short[] shortArray35 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(shortArray30, shortArray35);
        short[] shortArray39 = new short[] { (short) -1, (short) -1 };
        short short40 = org.apache.commons.lang.math.NumberUtils.min(shortArray39);
        short[] shortArray44 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short45 = org.apache.commons.lang.math.NumberUtils.max(shortArray44);
        short[] shortArray49 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(shortArray44, shortArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(shortArray39, shortArray44);
        short[] shortArray53 = new short[] { (short) 100 };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(shortArray39, shortArray53);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(shortArray30, shortArray53);
        short short56 = org.apache.commons.lang.math.NumberUtils.max(shortArray30);
        short short57 = org.apache.commons.lang.math.NumberUtils.min(shortArray30);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray30);
        short[] shortArray59 = null;
        short[] shortArray63 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short64 = org.apache.commons.lang.math.NumberUtils.max(shortArray63);
        short[] shortArray68 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(shortArray63, shortArray68);
        short[] shortArray72 = new short[] { (short) -1, (short) -1 };
        short short73 = org.apache.commons.lang.math.NumberUtils.min(shortArray72);
        short[] shortArray77 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short78 = org.apache.commons.lang.math.NumberUtils.max(shortArray77);
        short[] shortArray82 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean83 = org.apache.commons.lang.math.NumberUtils.equals(shortArray77, shortArray82);
        boolean boolean84 = org.apache.commons.lang.math.NumberUtils.equals(shortArray72, shortArray77);
        short[] shortArray86 = new short[] { (short) 100 };
        boolean boolean87 = org.apache.commons.lang.math.NumberUtils.equals(shortArray72, shortArray86);
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(shortArray63, shortArray86);
        short short89 = org.apache.commons.lang.math.NumberUtils.max(shortArray63);
        short short90 = org.apache.commons.lang.math.NumberUtils.min(shortArray63);
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(shortArray59, shortArray63);
        short short92 = org.apache.commons.lang.math.NumberUtils.max(shortArray63);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(shortArray30, shortArray63);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 10 + "'", short11 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 1 + "'", short17 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) -1 + "'", short21 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) -1 + "'", short23 == (short) -1);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) -1 + "'", short24 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) -1 + "'", short26 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 10 + "'", short31 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -1 + "'", short40 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 10 + "'", short45 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 10 + "'", short56 == (short) 10);
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) 1 + "'", short57 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) 10 + "'", short64 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) -1 + "'", short73 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 10 + "'", short78 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[100]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + short89 + "' != '" + (short) 10 + "'", short89 == (short) 10);
        org.junit.Assert.assertTrue("'" + short90 + "' != '" + (short) 1 + "'", short90 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + short92 + "' != '" + (short) 10 + "'", short92 == (short) 10);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray16 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray16);
        int[] intArray24 = null;
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray24);
        int int26 = org.apache.commons.lang.math.NumberUtils.min(intArray16);
        int int27 = org.apache.commons.lang.math.NumberUtils.max(intArray16);
        java.lang.Class<?> wildcardClass28 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray17);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray17);
        int int26 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int int27 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int int28 = org.apache.commons.lang.math.NumberUtils.min(intArray17);
        int int29 = org.apache.commons.lang.math.NumberUtils.min(intArray17);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(52, 0, 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        float float3 = org.apache.commons.lang.math.NumberUtils.max(35.0f, (float) '#', (float) 52);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 52.0f + "'", float3 == 52.0f);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        long[] longArray0 = null;
        long[] longArray4 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray5 = new long[] {};
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray5);
        long long7 = org.apache.commons.lang.math.NumberUtils.max(longArray4);
        long long8 = org.apache.commons.lang.math.NumberUtils.max(longArray4);
        long long9 = org.apache.commons.lang.math.NumberUtils.min(longArray4);
        long long10 = org.apache.commons.lang.math.NumberUtils.min(longArray4);
        long long11 = org.apache.commons.lang.math.NumberUtils.min(longArray4);
        long[] longArray15 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray16 = new long[] {};
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray16);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long19 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long20 = org.apache.commons.lang.math.NumberUtils.min(longArray15);
        long long21 = org.apache.commons.lang.math.NumberUtils.min(longArray15);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray15);
        long long23 = org.apache.commons.lang.math.NumberUtils.min(longArray15);
        long[] longArray27 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray28 = new long[] {};
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray28);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray28);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray28);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        long long3 = org.apache.commons.lang.math.NumberUtils.max(32L, (long) 0, 97L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        int int3 = org.apache.commons.lang.math.NumberUtils.min(10, 35, 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        int int3 = org.apache.commons.lang.math.NumberUtils.min(100, (int) 'a', (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 100L, (float) 1, (float) (short) -1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 97L, (double) (short) 10, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int[] intArray15 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray20 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(intArray15, intArray20);
        int int22 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        int int23 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        int[] intArray28 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(intArray28, intArray33);
        int int35 = org.apache.commons.lang.math.NumberUtils.max(intArray33);
        int int36 = org.apache.commons.lang.math.NumberUtils.min(intArray33);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(intArray20, intArray33);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray20);
        int int39 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        int int40 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        int int41 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        int int42 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long[] longArray6 = null;
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray6);
        long[] longArray8 = new long[] {};
        long[] longArray10 = new long[] { (byte) -1 };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray10);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray10);
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray10);
        long long14 = org.apache.commons.lang.math.NumberUtils.max(longArray10);
        long[] longArray15 = new long[] {};
        long[] longArray17 = new long[] { (byte) -1 };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray17);
        long long19 = org.apache.commons.lang.math.NumberUtils.max(longArray17);
        long[] longArray22 = new long[] { 52L, (short) 1 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(longArray17, longArray22);
        long long24 = org.apache.commons.lang.math.NumberUtils.min(longArray17);
        long long25 = org.apache.commons.lang.math.NumberUtils.max(longArray17);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(longArray10, longArray17);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray14);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray14);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray14);
        byte byte18 = org.apache.commons.lang.math.NumberUtils.min(byteArray14);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte24 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        byte byte26 = org.apache.commons.lang.math.NumberUtils.min(byteArray23);
        byte byte27 = org.apache.commons.lang.math.NumberUtils.min(byteArray23);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray14, byteArray23);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray23);
        byte byte30 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 10 + "'", byte8 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 10 + "'", byte9 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 10 + "'", byte16 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) -1 + "'", byte18 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 10 + "'", byte24 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 10 + "'", byte25 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) -1 + "'", byte26 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) -1 + "'", byte27 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) -1 + "'", byte30 == (byte) -1);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { (short) 0, (byte) 0, (byte) 100 };
        float float11 = org.apache.commons.lang.math.NumberUtils.min(floatArray10);
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray10);
        float[] floatArray16 = new float[] { 0, 1.0f, 100 };
        float[] floatArray18 = new float[] { (-1L) };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray18);
        float[] floatArray23 = new float[] { 0, 1.0f, 100 };
        float[] floatArray25 = new float[] { (-1L) };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(floatArray23, floatArray25);
        float float27 = org.apache.commons.lang.math.NumberUtils.max(floatArray23);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray23);
        float float29 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        float[] floatArray30 = new float[] {};
        float[] floatArray34 = new float[] { 0, 1.0f, 100 };
        float[] floatArray36 = new float[] { (-1L) };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray34, floatArray36);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray34);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray34);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray16);
        float float41 = org.apache.commons.lang.math.NumberUtils.max(floatArray3);
        float[] floatArray42 = new float[] {};
        float[] floatArray46 = new float[] { 0, 1.0f, 100 };
        float[] floatArray48 = new float[] { (-1L) };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(floatArray46, floatArray48);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(floatArray42, floatArray46);
        float float51 = org.apache.commons.lang.math.NumberUtils.max(floatArray46);
        float[] floatArray55 = new float[] { 0, 1.0f, 100 };
        float[] floatArray57 = new float[] { (-1L) };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray55, floatArray57);
        float float59 = org.apache.commons.lang.math.NumberUtils.min(floatArray57);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray46, floatArray57);
        float[] floatArray61 = new float[] {};
        float[] floatArray65 = new float[] { 0, 1.0f, 100 };
        float[] floatArray67 = new float[] { (-1L) };
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(floatArray65, floatArray67);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray61, floatArray65);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(floatArray57, floatArray65);
        float[] floatArray74 = new float[] { 0, 1.0f, 100 };
        float[] floatArray76 = new float[] { (-1L) };
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(floatArray74, floatArray76);
        float[] floatArray81 = new float[] { 0, ' ', 100.0f };
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(floatArray76, floatArray81);
        float float83 = org.apache.commons.lang.math.NumberUtils.min(floatArray81);
        boolean boolean84 = org.apache.commons.lang.math.NumberUtils.equals(floatArray65, floatArray81);
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray81);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 100.0f + "'", float27 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 100.0f + "'", float29 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 100.0f + "'", float41 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 100.0f + "'", float51 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-1.0f) + "'", float59 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray17);
        int[] intArray30 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int31 = org.apache.commons.lang.math.NumberUtils.max(intArray30);
        int int32 = org.apache.commons.lang.math.NumberUtils.max(intArray30);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray30);
        int int34 = org.apache.commons.lang.math.NumberUtils.max(intArray30);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray30);
        int[] intArray42 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int43 = org.apache.commons.lang.math.NumberUtils.min(intArray42);
        int int44 = org.apache.commons.lang.math.NumberUtils.min(intArray42);
        int[] intArray51 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int52 = org.apache.commons.lang.math.NumberUtils.min(intArray51);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(intArray42, intArray51);
        int[] intArray59 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int60 = org.apache.commons.lang.math.NumberUtils.max(intArray59);
        int int61 = org.apache.commons.lang.math.NumberUtils.max(intArray59);
        int int62 = org.apache.commons.lang.math.NumberUtils.max(intArray59);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(intArray51, intArray59);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray59);
        int int65 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, 1.0f, 100 };
        float[] floatArray12 = new float[] { (-1L) };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray12);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float16 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float float17 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float[] floatArray21 = new float[] { 0, 1.0f, 100 };
        float[] floatArray23 = new float[] { (-1L) };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray23);
        float[] floatArray28 = new float[] { 0, 1.0f, 100 };
        float[] floatArray30 = new float[] { (-1L) };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray30);
        float float32 = org.apache.commons.lang.math.NumberUtils.max(floatArray28);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray23, floatArray28);
        float float34 = org.apache.commons.lang.math.NumberUtils.min(floatArray23);
        float float35 = org.apache.commons.lang.math.NumberUtils.max(floatArray23);
        float float36 = org.apache.commons.lang.math.NumberUtils.min(floatArray23);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray23);
        float float38 = org.apache.commons.lang.math.NumberUtils.min(floatArray23);
        float float39 = org.apache.commons.lang.math.NumberUtils.min(floatArray23);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-1.0f) + "'", float16 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-1.0f) + "'", float17 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 100.0f + "'", float32 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-1.0f) + "'", float34 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-1.0f) + "'", float35 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-1.0f) + "'", float36 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-1.0f) + "'", float38 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-1.0f) + "'", float39 == (-1.0f));
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) 'a', (long) (byte) 1, (long) (short) -1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray7 = new long[] { 52L, (short) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray7);
        long[] longArray9 = new long[] {};
        long[] longArray11 = new long[] { (byte) -1 };
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray11);
        long[] longArray13 = new long[] {};
        long[] longArray15 = new long[] { (byte) -1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray15);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(longArray11, longArray15);
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray15);
        long long21 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long[] longArray25 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray26 = new long[] {};
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray26);
        long long28 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long long30 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long[] longArray31 = new long[] {};
        long[] longArray33 = new long[] { (byte) -1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(longArray31, longArray33);
        long long35 = org.apache.commons.lang.math.NumberUtils.max(longArray33);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray33);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray25);
        long[] longArray38 = new long[] {};
        long[] longArray40 = new long[] { (byte) -1 };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(longArray38, longArray40);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        long[] longArray47 = new long[] { 0, (short) 1, 52, (byte) 1 };
        long long48 = org.apache.commons.lang.math.NumberUtils.max(longArray47);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(longArray40, longArray47);
        long long50 = org.apache.commons.lang.math.NumberUtils.max(longArray47);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray47);
        long[] longArray55 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray56 = new long[] {};
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(longArray55, longArray56);
        long[] longArray58 = new long[] {};
        long[] longArray60 = new long[] { (byte) -1 };
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(longArray58, longArray60);
        long long62 = org.apache.commons.lang.math.NumberUtils.max(longArray60);
        long[] longArray65 = new long[] { 52L, (short) 1 };
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(longArray60, longArray65);
        long[] longArray67 = new long[] {};
        long[] longArray69 = new long[] { (byte) -1 };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(longArray67, longArray69);
        long[] longArray71 = new long[] {};
        long[] longArray73 = new long[] { (byte) -1 };
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(longArray71, longArray73);
        long long75 = org.apache.commons.lang.math.NumberUtils.max(longArray73);
        long long76 = org.apache.commons.lang.math.NumberUtils.max(longArray73);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(longArray69, longArray73);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(longArray60, longArray73);
        boolean boolean79 = org.apache.commons.lang.math.NumberUtils.equals(longArray56, longArray60);
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(longArray47, longArray56);
        long long81 = org.apache.commons.lang.math.NumberUtils.max(longArray47);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[0, 1, 52, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52L + "'", long50 == 52L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[]");
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[]");
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 52L + "'", long81 == 52L);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long long5 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long long6 = org.apache.commons.lang.math.NumberUtils.min(longArray2);
        long long7 = org.apache.commons.lang.math.NumberUtils.min(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) ' ', (long) (short) -1, (long) 97);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 0, (float) (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] { 100L, 1.0f };
        double[] doubleArray7 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray7);
        double double9 = org.apache.commons.lang.math.NumberUtils.max(doubleArray3);
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray0, doubleArray3);
        double double11 = org.apache.commons.lang.math.NumberUtils.min(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 10L, (double) 100.0f, 32.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) 0, (short) -1, (short) (byte) 100);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        double double2 = org.apache.commons.lang.math.NumberUtils.toDouble("hi!", (double) '4');
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 52.0d + "'", double2 == 52.0d);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long long6 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long7 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long8 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long9 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long long10 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long long11 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long[] longArray15 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray16 = new long[] {};
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray16);
        long[] longArray18 = new long[] {};
        long[] longArray20 = new long[] { (byte) -1 };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(longArray18, longArray20);
        long long22 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        long[] longArray25 = new long[] { 52L, (short) 1 };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(longArray20, longArray25);
        long[] longArray27 = new long[] {};
        long[] longArray29 = new long[] { (byte) -1 };
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray29);
        long[] longArray31 = new long[] {};
        long[] longArray33 = new long[] { (byte) -1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(longArray31, longArray33);
        long long35 = org.apache.commons.lang.math.NumberUtils.max(longArray33);
        long long36 = org.apache.commons.lang.math.NumberUtils.max(longArray33);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray29, longArray33);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(longArray20, longArray33);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray16, longArray20);
        long[] longArray40 = new long[] {};
        long[] longArray42 = new long[] { (byte) -1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(longArray40, longArray42);
        long long44 = org.apache.commons.lang.math.NumberUtils.max(longArray42);
        long[] longArray49 = new long[] { 0, (short) 1, 52, (byte) 1 };
        long long50 = org.apache.commons.lang.math.NumberUtils.max(longArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(longArray42, longArray49);
        long long52 = org.apache.commons.lang.math.NumberUtils.min(longArray42);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(longArray20, longArray42);
        long long54 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        long[] longArray55 = new long[] {};
        long[] longArray57 = new long[] { (byte) -1 };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(longArray55, longArray57);
        long[] longArray59 = new long[] {};
        long[] longArray61 = new long[] { (byte) -1 };
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(longArray59, longArray61);
        long long63 = org.apache.commons.lang.math.NumberUtils.max(longArray61);
        long long64 = org.apache.commons.lang.math.NumberUtils.max(longArray61);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(longArray57, longArray61);
        long long66 = org.apache.commons.lang.math.NumberUtils.min(longArray57);
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(longArray20, longArray57);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray57);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[0, 1, 52, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52L + "'", long50 == 52L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 52L, (float) ' ', 0.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 0, (short) 100, (short) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long long6 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long long7 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long[] longArray8 = new long[] {};
        long[] longArray10 = new long[] { (byte) -1 };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray10);
        long[] longArray12 = new long[] {};
        long[] longArray14 = new long[] { (byte) -1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(longArray12, longArray14);
        long long16 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(longArray10, longArray14);
        long[] longArray22 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray23 = new long[] {};
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(longArray22, longArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray22);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray22);
        long[] longArray30 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray31 = new long[] {};
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(longArray30, longArray31);
        long long33 = org.apache.commons.lang.math.NumberUtils.max(longArray30);
        long long34 = org.apache.commons.lang.math.NumberUtils.max(longArray30);
        long long35 = org.apache.commons.lang.math.NumberUtils.min(longArray30);
        long long36 = org.apache.commons.lang.math.NumberUtils.min(longArray30);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray30);
        long long38 = org.apache.commons.lang.math.NumberUtils.min(longArray30);
        long[] longArray39 = new long[] {};
        long[] longArray41 = new long[] { (byte) -1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(longArray39, longArray41);
        long long43 = org.apache.commons.lang.math.NumberUtils.max(longArray41);
        long[] longArray46 = new long[] { 52L, (short) 1 };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(longArray41, longArray46);
        long[] longArray48 = new long[] {};
        long[] longArray50 = new long[] { (byte) -1 };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(longArray48, longArray50);
        long[] longArray52 = new long[] {};
        long[] longArray54 = new long[] { (byte) -1 };
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(longArray52, longArray54);
        long long56 = org.apache.commons.lang.math.NumberUtils.max(longArray54);
        long long57 = org.apache.commons.lang.math.NumberUtils.max(longArray54);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray54);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(longArray41, longArray54);
        long long60 = org.apache.commons.lang.math.NumberUtils.max(longArray41);
        long long61 = org.apache.commons.lang.math.NumberUtils.min(longArray41);
        long[] longArray62 = new long[] {};
        long[] longArray64 = new long[] { (byte) -1 };
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(longArray62, longArray64);
        long[] longArray66 = new long[] {};
        long[] longArray68 = new long[] { (byte) -1 };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(longArray66, longArray68);
        long long70 = org.apache.commons.lang.math.NumberUtils.max(longArray68);
        long long71 = org.apache.commons.lang.math.NumberUtils.max(longArray68);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(longArray64, longArray68);
        long long73 = org.apache.commons.lang.math.NumberUtils.min(longArray64);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(longArray41, longArray64);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(longArray30, longArray64);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[]");
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) 1, (short) -1, (short) (byte) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (short) 100, (int) '#', (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((-1), 0, 97);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short[] shortArray21 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short22 = org.apache.commons.lang.math.NumberUtils.max(shortArray21);
        short[] shortArray26 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray26);
        short[] shortArray30 = new short[] { (short) -1, (short) -1 };
        short short31 = org.apache.commons.lang.math.NumberUtils.min(shortArray30);
        short[] shortArray35 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short36 = org.apache.commons.lang.math.NumberUtils.max(shortArray35);
        short[] shortArray40 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(shortArray35, shortArray40);
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(shortArray30, shortArray35);
        short[] shortArray44 = new short[] { (short) 100 };
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(shortArray30, shortArray44);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray44);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray21);
        short short48 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 10 + "'", short22 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) -1 + "'", short31 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 10 + "'", short36 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -1 + "'", short48 == (short) -1);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (byte) 100, (int) '#', (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) 1.0f, (double) (-1.0f));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 1 };
        byte[] byteArray3 = null;
        byte[] byteArray10 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray10);
        byte byte12 = org.apache.commons.lang.math.NumberUtils.min(byteArray10);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte17 = org.apache.commons.lang.math.NumberUtils.max(byteArray16);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(byteArray10, byteArray16);
        byte byte19 = org.apache.commons.lang.math.NumberUtils.min(byteArray16);
        byte byte20 = org.apache.commons.lang.math.NumberUtils.min(byteArray16);
        byte byte21 = org.apache.commons.lang.math.NumberUtils.min(byteArray16);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(byteArray2, byteArray16);
        byte byte23 = org.apache.commons.lang.math.NumberUtils.max(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) -1 + "'", byte12 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 10 + "'", byte17 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) -1 + "'", byte19 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) -1 + "'", byte20 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) -1 + "'", byte21 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 100 + "'", byte23 == (byte) 100);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        int int3 = org.apache.commons.lang.math.NumberUtils.min(52, (int) (byte) 1, (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short short10 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short[] shortArray14 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short15 = org.apache.commons.lang.math.NumberUtils.max(shortArray14);
        short short16 = org.apache.commons.lang.math.NumberUtils.min(shortArray14);
        short short17 = org.apache.commons.lang.math.NumberUtils.min(shortArray14);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray14);
        short short19 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short20 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        java.lang.Class<?> wildcardClass21 = shortArray3.getClass();
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 1 + "'", short10 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 10 + "'", short15 == (short) 10);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 1 + "'", short16 == (short) 1);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 1 + "'", short17 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 1 + "'", short19 == (short) 1);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 1 + "'", short20 == (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) 35, (double) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double[] doubleArray37 = new double[] { 100L, 1.0f };
        double[] doubleArray41 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray41);
        double[] doubleArray45 = new double[] { 100L, 1.0f };
        double[] doubleArray49 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray45);
        double[] doubleArray54 = new double[] { 100L, 1.0f };
        double[] doubleArray58 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray54, doubleArray58);
        double[] doubleArray62 = new double[] { 100L, 1.0f };
        double[] doubleArray66 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray62, doubleArray66);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray62);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray62);
        double double70 = org.apache.commons.lang.math.NumberUtils.min(doubleArray62);
        double[] doubleArray73 = new double[] { 100L, 1.0f };
        double[] doubleArray77 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray73, doubleArray77);
        double double79 = org.apache.commons.lang.math.NumberUtils.max(doubleArray73);
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray62, doubleArray73);
        boolean boolean81 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray62);
        double[] doubleArray84 = new double[] { 100L, 1.0f };
        double[] doubleArray88 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean89 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray84, doubleArray88);
        double double90 = org.apache.commons.lang.math.NumberUtils.max(doubleArray84);
        double double91 = org.apache.commons.lang.math.NumberUtils.min(doubleArray84);
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray84);
        double double93 = org.apache.commons.lang.math.NumberUtils.max(doubleArray27);
        double double94 = org.apache.commons.lang.math.NumberUtils.max(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 100.0d + "'", double90 == 100.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 100.0d + "'", double93 == 100.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        short[] shortArray4 = new short[] { (byte) -1, (short) 100, (byte) -1, (byte) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        short short6 = org.apache.commons.lang.math.NumberUtils.min(shortArray4);
        short short7 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 100, -1, -1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 100 + "'", short5 == (short) 100);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) -1 + "'", short6 == (short) -1);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 100 + "'", short7 == (short) 100);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray16 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray16);
        int[] intArray28 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(intArray28, intArray33);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray28);
        int int36 = org.apache.commons.lang.math.NumberUtils.max(intArray28);
        int[] intArray42 = new int[] { (-1), (-1), 1, 52, ' ' };
        int int43 = org.apache.commons.lang.math.NumberUtils.min(intArray42);
        int int44 = org.apache.commons.lang.math.NumberUtils.max(intArray42);
        int int45 = org.apache.commons.lang.math.NumberUtils.min(intArray42);
        int[] intArray50 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(intArray50, intArray55);
        int int57 = org.apache.commons.lang.math.NumberUtils.max(intArray55);
        int int58 = org.apache.commons.lang.math.NumberUtils.max(intArray55);
        int[] intArray63 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray68 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(intArray63, intArray68);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(intArray55, intArray63);
        int int71 = org.apache.commons.lang.math.NumberUtils.min(intArray63);
        int int72 = org.apache.commons.lang.math.NumberUtils.max(intArray63);
        int int73 = org.apache.commons.lang.math.NumberUtils.max(intArray63);
        int int74 = org.apache.commons.lang.math.NumberUtils.max(intArray63);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(intArray42, intArray63);
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(intArray28, intArray42);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, 1, 52, 32]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 10, (byte) 1, (byte) 0);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        double double3 = org.apache.commons.lang.math.NumberUtils.max(35.0d, (double) (short) 10, (double) ' ');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 52L, (float) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) (-1), (long) '#', (long) (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(10, (int) (byte) 100, (int) ' ');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 100.0f, (double) 'a', (double) (byte) 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        short[] shortArray1 = new short[] { (short) -1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.max(shortArray1);
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) -1 + "'", short4 == (short) -1);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long[] longArray4 = new long[] {};
        long[] longArray6 = new long[] { (byte) -1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray6);
        long long8 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        long long9 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray6);
        long long11 = org.apache.commons.lang.math.NumberUtils.min(longArray2);
        long[] longArray15 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray16 = new long[] {};
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray16);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long19 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long20 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long21 = org.apache.commons.lang.math.NumberUtils.min(longArray15);
        long[] longArray25 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray26 = new long[] {};
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray26);
        long long28 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long long30 = org.apache.commons.lang.math.NumberUtils.min(longArray25);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray25);
        long[] longArray36 = new long[] { 0L, 35, 32L, '#' };
        long[] longArray40 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray41 = new long[] {};
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(longArray40, longArray41);
        long long43 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        long long44 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        long long45 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        long long46 = org.apache.commons.lang.math.NumberUtils.min(longArray40);
        long[] longArray50 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray51 = new long[] {};
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray51);
        long long53 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long54 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long55 = org.apache.commons.lang.math.NumberUtils.min(longArray50);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(longArray40, longArray50);
        long[] longArray60 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray61 = new long[] {};
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(longArray60, longArray61);
        long long63 = org.apache.commons.lang.math.NumberUtils.max(longArray60);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray60);
        long[] longArray68 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray69 = new long[] {};
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(longArray68, longArray69);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(longArray60, longArray68);
        long long72 = org.apache.commons.lang.math.NumberUtils.min(longArray60);
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(longArray36, longArray60);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray60);
        long[] longArray78 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray79 = new long[] {};
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(longArray78, longArray79);
        long long81 = org.apache.commons.lang.math.NumberUtils.min(longArray78);
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(longArray60, longArray78);
        long[] longArray86 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray87 = new long[] {};
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(longArray86, longArray87);
        long long89 = org.apache.commons.lang.math.NumberUtils.max(longArray86);
        long long90 = org.apache.commons.lang.math.NumberUtils.max(longArray86);
        long long91 = org.apache.commons.lang.math.NumberUtils.max(longArray86);
        long long92 = org.apache.commons.lang.math.NumberUtils.min(longArray86);
        long long93 = org.apache.commons.lang.math.NumberUtils.max(longArray86);
        long long94 = org.apache.commons.lang.math.NumberUtils.min(longArray86);
        long long95 = org.apache.commons.lang.math.NumberUtils.max(longArray86);
        boolean boolean96 = org.apache.commons.lang.math.NumberUtils.equals(longArray60, longArray86);
        long long97 = org.apache.commons.lang.math.NumberUtils.min(longArray86);
        long long98 = org.apache.commons.lang.math.NumberUtils.max(longArray86);
        boolean boolean99 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray86);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[0, 35, 32, 35]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 52L + "'", long54 == 52L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(longArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray86), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray87), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 52L + "'", long89 == 52L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 52L + "'", long90 == 52L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 52L + "'", long91 == 52L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 52L + "'", long93 == 52L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-1L) + "'", long94 == (-1L));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 52L + "'", long95 == 52L);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-1L) + "'", long97 == (-1L));
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 52L + "'", long98 == 52L);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) (byte) 1, (long) (byte) 10, (long) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 1L, (float) (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray27);
        double[] doubleArray36 = new double[] { 100L, 1.0f };
        double[] doubleArray40 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray36, doubleArray40);
        double[] doubleArray44 = new double[] { 100L, 1.0f };
        double[] doubleArray48 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray44, doubleArray48);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray40, doubleArray44);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray44);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray44);
        double[] doubleArray55 = new double[] { 100L, 1.0f };
        double[] doubleArray59 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray55, doubleArray59);
        double[] doubleArray63 = new double[] { 100L, 1.0f };
        double[] doubleArray67 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray63, doubleArray67);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray55, doubleArray63);
        double double70 = org.apache.commons.lang.math.NumberUtils.min(doubleArray63);
        double double71 = org.apache.commons.lang.math.NumberUtils.max(doubleArray63);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray63);
        java.lang.Class<?> wildcardClass73 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte4 = org.apache.commons.lang.math.NumberUtils.max(byteArray3);
        byte[] byteArray5 = null;
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(byteArray5, byteArray12);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(byteArray12, byteArray18);
        byte byte20 = org.apache.commons.lang.math.NumberUtils.max(byteArray12);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray12);
        byte byte22 = org.apache.commons.lang.math.NumberUtils.max(byteArray12);
        byte[] byteArray23 = null;
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(byteArray23, byteArray30);
        byte byte32 = org.apache.commons.lang.math.NumberUtils.min(byteArray30);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte37 = org.apache.commons.lang.math.NumberUtils.max(byteArray36);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(byteArray30, byteArray36);
        byte[] byteArray39 = null;
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte44 = org.apache.commons.lang.math.NumberUtils.max(byteArray43);
        byte[] byteArray45 = null;
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(byteArray45, byteArray52);
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(byteArray52, byteArray58);
        byte byte60 = org.apache.commons.lang.math.NumberUtils.max(byteArray52);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(byteArray43, byteArray52);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(byteArray39, byteArray52);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(byteArray30, byteArray39);
        byte byte64 = org.apache.commons.lang.math.NumberUtils.min(byteArray30);
        byte byte65 = org.apache.commons.lang.math.NumberUtils.min(byteArray30);
        byte byte66 = org.apache.commons.lang.math.NumberUtils.min(byteArray30);
        byte byte67 = org.apache.commons.lang.math.NumberUtils.min(byteArray30);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(byteArray12, byteArray30);
        byte byte69 = org.apache.commons.lang.math.NumberUtils.min(byteArray12);
        byte byte70 = org.apache.commons.lang.math.NumberUtils.min(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 10 + "'", byte4 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 100 + "'", byte20 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 100 + "'", byte22 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) -1 + "'", byte32 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 10 + "'", byte37 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 10 + "'", byte44 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + byte60 + "' != '" + (byte) 100 + "'", byte60 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) -1 + "'", byte64 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) -1 + "'", byte65 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte66 + "' != '" + (byte) -1 + "'", byte66 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) -1 + "'", byte67 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + byte69 + "' != '" + (byte) -1 + "'", byte69 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte70 + "' != '" + (byte) -1 + "'", byte70 == (byte) -1);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] { 100L, 1.0f };
        double[] doubleArray7 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray7);
        double[] doubleArray11 = new double[] { 100L, 1.0f };
        double[] doubleArray15 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray11, doubleArray15);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray11);
        double[] doubleArray20 = new double[] { 100L, 1.0f };
        double[] doubleArray24 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray20, doubleArray24);
        double[] doubleArray28 = new double[] { 100L, 1.0f };
        double[] doubleArray32 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray28, doubleArray32);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray24, doubleArray28);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray28);
        double[] doubleArray38 = new double[] { 100L, 1.0f };
        double[] doubleArray42 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray42);
        double[] doubleArray46 = new double[] { 100L, 1.0f };
        double[] doubleArray50 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray46, doubleArray50);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray46);
        double[] doubleArray55 = new double[] { 100L, 1.0f };
        double[] doubleArray59 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray55, doubleArray59);
        double[] doubleArray63 = new double[] { 100L, 1.0f };
        double[] doubleArray67 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray63, doubleArray67);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray59, doubleArray63);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray63);
        double double71 = org.apache.commons.lang.math.NumberUtils.min(doubleArray63);
        double[] doubleArray74 = new double[] { 100L, 1.0f };
        double[] doubleArray78 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean79 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray74, doubleArray78);
        double double80 = org.apache.commons.lang.math.NumberUtils.max(doubleArray74);
        boolean boolean81 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray63, doubleArray74);
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray28, doubleArray63);
        double double83 = org.apache.commons.lang.math.NumberUtils.max(doubleArray63);
        double double84 = org.apache.commons.lang.math.NumberUtils.max(doubleArray63);
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray0, doubleArray63);
        double double86 = org.apache.commons.lang.math.NumberUtils.min(doubleArray63);
        double double87 = org.apache.commons.lang.math.NumberUtils.min(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) (short) -1, 10L, (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float float23 = org.apache.commons.lang.math.NumberUtils.max(floatArray14);
        float float24 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        float float25 = org.apache.commons.lang.math.NumberUtils.max(floatArray14);
        float[] floatArray26 = new float[] {};
        float[] floatArray30 = new float[] { 0, 1.0f, 100 };
        float[] floatArray32 = new float[] { (-1L) };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray32);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray30);
        float[] floatArray38 = new float[] { 0, 1.0f, 100 };
        float[] floatArray40 = new float[] { (-1L) };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(floatArray38, floatArray40);
        float[] floatArray45 = new float[] { 0, ' ', 100.0f };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray40, floatArray45);
        float float47 = org.apache.commons.lang.math.NumberUtils.min(floatArray40);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray40);
        float[] floatArray52 = new float[] { 0, 1.0f, 100 };
        float[] floatArray54 = new float[] { (-1L) };
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(floatArray52, floatArray54);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray52);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray52);
        float float58 = org.apache.commons.lang.math.NumberUtils.min(floatArray52);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-1.0f) + "'", float23 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-1.0f) + "'", float24 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-1.0f) + "'", float25 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-1.0f) + "'", float47 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 100L, (float) (byte) 10, (float) (-1L));
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) -1, (short) (byte) 1, (short) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) 100, (byte) 0, (byte) 1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(32, (int) '4', 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) (short) -1, (double) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare(97.0d, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short[] shortArray8 = new short[] { (byte) 1 };
        short short9 = org.apache.commons.lang.math.NumberUtils.min(shortArray8);
        short[] shortArray11 = new short[] { (short) -1 };
        short short12 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray8, shortArray11);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray11);
        short short15 = org.apache.commons.lang.math.NumberUtils.min(shortArray4);
        short short16 = org.apache.commons.lang.math.NumberUtils.min(shortArray4);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 1 + "'", short9 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) -1 + "'", short12 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) -1 + "'", short16 == (short) -1);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        long long3 = org.apache.commons.lang.math.NumberUtils.max(1L, (long) (byte) 0, 35L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        int int2 = org.apache.commons.lang.math.NumberUtils.stringToInt("", (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (short) 0, 0, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        long[] longArray4 = new long[] { 0L, 35, 32L, '#' };
        long[] longArray8 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray9 = new long[] {};
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray9);
        long long11 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        long long13 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        long long14 = org.apache.commons.lang.math.NumberUtils.min(longArray8);
        long[] longArray18 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray19 = new long[] {};
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(longArray18, longArray19);
        long long21 = org.apache.commons.lang.math.NumberUtils.max(longArray18);
        long long22 = org.apache.commons.lang.math.NumberUtils.max(longArray18);
        long long23 = org.apache.commons.lang.math.NumberUtils.min(longArray18);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray18);
        long[] longArray28 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray29 = new long[] {};
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray29);
        long long31 = org.apache.commons.lang.math.NumberUtils.max(longArray28);
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(longArray18, longArray28);
        long[] longArray36 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray37 = new long[] {};
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(longArray36, longArray37);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray36);
        long long40 = org.apache.commons.lang.math.NumberUtils.min(longArray28);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray28);
        long[] longArray46 = new long[] { 0L, 35, 32L, '#' };
        long[] longArray50 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray51 = new long[] {};
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray51);
        long long53 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long54 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long55 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long56 = org.apache.commons.lang.math.NumberUtils.min(longArray50);
        long[] longArray60 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray61 = new long[] {};
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(longArray60, longArray61);
        long long63 = org.apache.commons.lang.math.NumberUtils.max(longArray60);
        long long64 = org.apache.commons.lang.math.NumberUtils.max(longArray60);
        long long65 = org.apache.commons.lang.math.NumberUtils.min(longArray60);
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray60);
        long[] longArray70 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray71 = new long[] {};
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(longArray70, longArray71);
        long long73 = org.apache.commons.lang.math.NumberUtils.max(longArray70);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(longArray60, longArray70);
        long[] longArray78 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray79 = new long[] {};
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(longArray78, longArray79);
        boolean boolean81 = org.apache.commons.lang.math.NumberUtils.equals(longArray70, longArray78);
        long long82 = org.apache.commons.lang.math.NumberUtils.min(longArray70);
        boolean boolean83 = org.apache.commons.lang.math.NumberUtils.equals(longArray46, longArray70);
        boolean boolean84 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray46);
        long long85 = org.apache.commons.lang.math.NumberUtils.min(longArray46);
        long long86 = org.apache.commons.lang.math.NumberUtils.min(longArray46);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 35, 32, 35]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[0, 35, 32, 35]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 52L + "'", long54 == 52L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 52L + "'", long73 == 52L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) (short) 10, (long) (byte) 100, (long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        long long3 = org.apache.commons.lang.math.NumberUtils.min(35L, (long) '#', (long) (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) (-1L), (double) (-1.0f), (double) (-1L));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        int int2 = org.apache.commons.lang.math.NumberUtils.toInt("", 97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) (short) -1, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double[] doubleArray37 = new double[] { 100L, 1.0f };
        double[] doubleArray41 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray41);
        double[] doubleArray45 = new double[] { 100L, 1.0f };
        double[] doubleArray49 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray45);
        double[] doubleArray54 = new double[] { 100L, 1.0f };
        double[] doubleArray58 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray54, doubleArray58);
        double[] doubleArray62 = new double[] { 100L, 1.0f };
        double[] doubleArray66 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray62, doubleArray66);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray62);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray62);
        double double70 = org.apache.commons.lang.math.NumberUtils.min(doubleArray62);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray62);
        double double72 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double double73 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double double74 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double[] doubleArray76 = new double[] { '#' };
        double double77 = org.apache.commons.lang.math.NumberUtils.min(doubleArray76);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray76);
        double double79 = org.apache.commons.lang.math.NumberUtils.min(doubleArray76);
        double double80 = org.apache.commons.lang.math.NumberUtils.min(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 35.0d + "'", double79 == 35.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 35.0d + "'", double80 == 35.0d);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) 10, (short) 100, (short) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (short) -1, (-1), (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short[] shortArray12 = new short[] { (short) -1, (short) -1 };
        short short13 = org.apache.commons.lang.math.NumberUtils.min(shortArray12);
        short[] shortArray17 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short18 = org.apache.commons.lang.math.NumberUtils.max(shortArray17);
        short[] shortArray22 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(shortArray17, shortArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray17);
        short[] shortArray26 = new short[] { (short) 100 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray26);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray26);
        short short29 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short short30 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short31 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short32 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray36 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short37 = org.apache.commons.lang.math.NumberUtils.max(shortArray36);
        short[] shortArray41 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(shortArray36, shortArray41);
        short short43 = org.apache.commons.lang.math.NumberUtils.min(shortArray36);
        short[] shortArray46 = new short[] { (short) -1, (short) -1 };
        short short47 = org.apache.commons.lang.math.NumberUtils.min(shortArray46);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(shortArray36, shortArray46);
        short short49 = org.apache.commons.lang.math.NumberUtils.max(shortArray46);
        short short50 = org.apache.commons.lang.math.NumberUtils.min(shortArray46);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray46);
        java.lang.Class<?> wildcardClass52 = shortArray46.getClass();
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) -1 + "'", short13 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 10 + "'", short18 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 10 + "'", short29 == (short) 10);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 1 + "'", short30 == (short) 1);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 1 + "'", short31 == (short) 1);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 10 + "'", short32 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 10 + "'", short37 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 1 + "'", short43 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) -1 + "'", short47 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) -1 + "'", short49 == (short) -1);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) -1 + "'", short50 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) 100, (byte) -1, (byte) 10);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 1, (byte) 1, (byte) -1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short short7 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short short8 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray12 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short13 = org.apache.commons.lang.math.NumberUtils.max(shortArray12);
        short[] shortArray17 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray17);
        short[] shortArray20 = new short[] { (byte) 1 };
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        short[] shortArray23 = new short[] { (short) -1 };
        short short24 = org.apache.commons.lang.math.NumberUtils.max(shortArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray20, shortArray23);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(shortArray17, shortArray20);
        short short27 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short28 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray20);
        short short30 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short31 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short32 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short33 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short34 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 1 + "'", short7 == (short) 1);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 1 + "'", short8 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 10 + "'", short13 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 1 + "'", short21 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) -1 + "'", short24 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 1 + "'", short27 == (short) 1);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1 + "'", short28 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 1 + "'", short30 == (short) 1);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 1 + "'", short31 == (short) 1);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 1 + "'", short32 == (short) 1);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 1 + "'", short33 == (short) 1);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 1 + "'", short34 == (short) 1);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray14);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray14);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray14);
        byte byte18 = org.apache.commons.lang.math.NumberUtils.min(byteArray14);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte24 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        byte[] byteArray25 = null;
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(byteArray25, byteArray32);
        byte byte34 = org.apache.commons.lang.math.NumberUtils.min(byteArray32);
        byte byte35 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte byte36 = org.apache.commons.lang.math.NumberUtils.min(byteArray32);
        byte byte37 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(byteArray23, byteArray32);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(byteArray14, byteArray23);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray14);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte45 = org.apache.commons.lang.math.NumberUtils.max(byteArray44);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray44, byteArray48);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte55 = org.apache.commons.lang.math.NumberUtils.max(byteArray54);
        byte byte56 = org.apache.commons.lang.math.NumberUtils.max(byteArray54);
        byte byte57 = org.apache.commons.lang.math.NumberUtils.min(byteArray54);
        byte byte58 = org.apache.commons.lang.math.NumberUtils.min(byteArray54);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(byteArray48, byteArray54);
        byte byte60 = org.apache.commons.lang.math.NumberUtils.max(byteArray48);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray48);
        byte byte62 = org.apache.commons.lang.math.NumberUtils.max(byteArray48);
        java.lang.Class<?> wildcardClass63 = byteArray48.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 10 + "'", byte16 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) -1 + "'", byte18 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 10 + "'", byte24 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) -1 + "'", byte34 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 100 + "'", byte35 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) -1 + "'", byte36 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 100 + "'", byte37 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 10 + "'", byte45 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte55 + "' != '" + (byte) 10 + "'", byte55 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 10 + "'", byte56 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) -1 + "'", byte57 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) -1 + "'", byte58 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + byte60 + "' != '" + (byte) 100 + "'", byte60 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 100 + "'", byte62 == (byte) 100);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        double double2 = org.apache.commons.lang.math.NumberUtils.toDouble("", 32.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 32.0d + "'", double2 == 32.0d);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        int[] intArray5 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int6 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int7 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int8 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int[] intArray13 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray18 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(intArray13, intArray18);
        int int20 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int int21 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int[] intArray26 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(intArray26, intArray31);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray31);
        int int34 = org.apache.commons.lang.math.NumberUtils.min(intArray31);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray31);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray18);
        int int37 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int int38 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int[] intArray43 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(intArray43, intArray48);
        int int50 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int int51 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int[] intArray56 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(intArray56, intArray61);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(intArray48, intArray56);
        int int64 = org.apache.commons.lang.math.NumberUtils.min(intArray56);
        int int65 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        int int66 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        int int67 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray56);
        int int69 = org.apache.commons.lang.math.NumberUtils.min(intArray56);
        int int70 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float float9 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float[] floatArray14 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray15 = new float[] {};
        float[] floatArray19 = new float[] { 0, 1.0f, 100 };
        float[] floatArray21 = new float[] { (-1L) };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray19);
        float float24 = org.apache.commons.lang.math.NumberUtils.max(floatArray19);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float26 = org.apache.commons.lang.math.NumberUtils.max(floatArray19);
        float[] floatArray30 = new float[] { 0, 1.0f, 100 };
        float[] floatArray32 = new float[] { (-1L) };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray32);
        float[] floatArray37 = new float[] { 0, ' ', 100.0f };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray32, floatArray37);
        float[] floatArray39 = new float[] {};
        float[] floatArray43 = new float[] { 0, 1.0f, 100 };
        float[] floatArray45 = new float[] { (-1L) };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray43, floatArray45);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray39, floatArray43);
        float[] floatArray51 = new float[] { 0, 1.0f, 100 };
        float[] floatArray53 = new float[] { (-1L) };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray51, floatArray53);
        float[] floatArray58 = new float[] { 0, ' ', 100.0f };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(floatArray53, floatArray58);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray39, floatArray53);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(floatArray37, floatArray53);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray53);
        float[] floatArray66 = new float[] { 0, 1.0f, 100 };
        float[] floatArray68 = new float[] { (-1L) };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray66, floatArray68);
        float[] floatArray73 = new float[] { 0, ' ', 100.0f };
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(floatArray68, floatArray73);
        float float75 = org.apache.commons.lang.math.NumberUtils.min(floatArray73);
        float float76 = org.apache.commons.lang.math.NumberUtils.min(floatArray73);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray73);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray19);
        float float79 = org.apache.commons.lang.math.NumberUtils.min(floatArray19);
        float float80 = org.apache.commons.lang.math.NumberUtils.min(floatArray19);
        float[] floatArray81 = null;
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray81);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 100.0f + "'", float9 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 100.0f + "'", float24 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 100.0f + "'", float26 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 0.0f + "'", float80 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short[] shortArray10 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short11 = org.apache.commons.lang.math.NumberUtils.max(shortArray10);
        short[] shortArray15 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray15);
        short short17 = org.apache.commons.lang.math.NumberUtils.min(shortArray10);
        short[] shortArray20 = new short[] { (short) -1, (short) -1 };
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray20);
        short short23 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short24 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray20);
        short[] shortArray28 = new short[] { (short) -1, (short) -1 };
        short short29 = org.apache.commons.lang.math.NumberUtils.min(shortArray28);
        short[] shortArray33 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short34 = org.apache.commons.lang.math.NumberUtils.max(shortArray33);
        short[] shortArray38 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(shortArray33, shortArray38);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(shortArray28, shortArray33);
        short[] shortArray42 = new short[] { (short) 100 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(shortArray28, shortArray42);
        short short44 = org.apache.commons.lang.math.NumberUtils.min(shortArray42);
        short short45 = org.apache.commons.lang.math.NumberUtils.min(shortArray42);
        short short46 = org.apache.commons.lang.math.NumberUtils.min(shortArray42);
        short short47 = org.apache.commons.lang.math.NumberUtils.min(shortArray42);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(shortArray20, shortArray42);
        short short49 = org.apache.commons.lang.math.NumberUtils.max(shortArray42);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 10 + "'", short11 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 1 + "'", short17 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) -1 + "'", short21 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) -1 + "'", short23 == (short) -1);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) -1 + "'", short24 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) -1 + "'", short29 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 10 + "'", short34 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 100 + "'", short44 == (short) 100);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 100 + "'", short45 == (short) 100);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) 100 + "'", short46 == (short) 100);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 100 + "'", short47 == (short) 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 100 + "'", short49 == (short) 100);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 100, (short) (byte) 100, (short) (byte) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) 1, (byte) 10, (byte) 100);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte10 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte11 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte12 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte13 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte14 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte19 = org.apache.commons.lang.math.NumberUtils.max(byteArray18);
        byte[] byteArray20 = null;
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray20, byteArray27);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(byteArray27, byteArray33);
        byte byte35 = org.apache.commons.lang.math.NumberUtils.max(byteArray27);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(byteArray18, byteArray27);
        byte byte37 = org.apache.commons.lang.math.NumberUtils.max(byteArray27);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray27);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 100 + "'", byte10 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) -1 + "'", byte11 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 100 + "'", byte12 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 100 + "'", byte13 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) -1 + "'", byte14 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 10 + "'", byte19 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 100 + "'", byte35 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 100 + "'", byte37 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 32, 0.0f, 100.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) (short) 0, 0.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) 35, (double) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double double35 = org.apache.commons.lang.math.NumberUtils.min(doubleArray2);
        double double36 = org.apache.commons.lang.math.NumberUtils.max(doubleArray2);
        double double37 = org.apache.commons.lang.math.NumberUtils.min(doubleArray2);
        double double38 = org.apache.commons.lang.math.NumberUtils.max(doubleArray2);
        double double39 = org.apache.commons.lang.math.NumberUtils.max(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) (short) 100, (float) 1L, (float) 52L);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) -1, (short) 0, (short) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        double double2 = org.apache.commons.lang.math.NumberUtils.toDouble("hi!", (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) (-1.0f), (double) (-1L), (double) 'a');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 10, (byte) -1, (byte) 100);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) (byte) -1, 35L, (long) ' ');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] { 100L, 1.0f };
        double[] doubleArray7 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray7);
        double double9 = org.apache.commons.lang.math.NumberUtils.max(doubleArray3);
        double[] doubleArray12 = new double[] { 100L, 1.0f };
        double[] doubleArray16 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray12, doubleArray16);
        double[] doubleArray20 = new double[] { 100L, 1.0f };
        double[] doubleArray24 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray20, doubleArray24);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray12, doubleArray20);
        double[] doubleArray29 = new double[] { 100L, 1.0f };
        double[] doubleArray33 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray29, doubleArray33);
        double[] doubleArray37 = new double[] { 100L, 1.0f };
        double[] doubleArray41 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray41);
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray33, doubleArray37);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray12, doubleArray37);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray12);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray0, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = org.apache.commons.lang.math.NumberUtils.max(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, ' ', 100.0f };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray16 = new float[] { 0, 1.0f, 100 };
        float[] floatArray18 = new float[] { (-1L) };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray18);
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray16);
        float[] floatArray24 = new float[] { 0, 1.0f, 100 };
        float[] floatArray26 = new float[] { (-1L) };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(floatArray24, floatArray26);
        float[] floatArray31 = new float[] { 0, ' ', 100.0f };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray26);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray26);
        float float35 = org.apache.commons.lang.math.NumberUtils.max(floatArray26);
        float float36 = org.apache.commons.lang.math.NumberUtils.min(floatArray26);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-1.0f) + "'", float35 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-1.0f) + "'", float36 == (-1.0f));
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) (byte) 1, (double) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        int int3 = org.apache.commons.lang.math.NumberUtils.min(10, (int) (short) 100, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray4);
        int[] intArray17 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int18 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int int19 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int int20 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int[] intArray25 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray30 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(intArray25, intArray30);
        int int32 = org.apache.commons.lang.math.NumberUtils.min(intArray30);
        int int33 = org.apache.commons.lang.math.NumberUtils.min(intArray30);
        int[] intArray38 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(intArray38, intArray43);
        int int45 = org.apache.commons.lang.math.NumberUtils.max(intArray43);
        int int46 = org.apache.commons.lang.math.NumberUtils.min(intArray43);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(intArray30, intArray43);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray30);
        int int49 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray17);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) (byte) 100, (short) 0, (short) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short short18 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short short19 = org.apache.commons.lang.math.NumberUtils.max(shortArray16);
        short short20 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short[] shortArray22 = new short[] { (byte) 1 };
        short short23 = org.apache.commons.lang.math.NumberUtils.min(shortArray22);
        short[] shortArray25 = new short[] { (short) -1 };
        short short26 = org.apache.commons.lang.math.NumberUtils.max(shortArray25);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(shortArray22, shortArray25);
        short[] shortArray29 = new short[] { (byte) 1 };
        short short30 = org.apache.commons.lang.math.NumberUtils.min(shortArray29);
        short[] shortArray32 = new short[] { (short) -1 };
        short short33 = org.apache.commons.lang.math.NumberUtils.max(shortArray32);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(shortArray29, shortArray32);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(shortArray25, shortArray32);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(shortArray16, shortArray32);
        short short37 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short short38 = org.apache.commons.lang.math.NumberUtils.max(shortArray32);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 100 + "'", short18 == (short) 100);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 100 + "'", short20 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 1 + "'", short23 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) -1 + "'", short26 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1]");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 1 + "'", short30 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) -1 + "'", short33 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) -1 + "'", short37 == (short) -1);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) -1 + "'", short38 == (short) -1);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short short5 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short6 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short7 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short[] shortArray11 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short12 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        short[] shortArray16 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray11, shortArray16);
        short[] shortArray19 = new short[] { (byte) 1 };
        short short20 = org.apache.commons.lang.math.NumberUtils.min(shortArray19);
        short[] shortArray22 = new short[] { (short) -1 };
        short short23 = org.apache.commons.lang.math.NumberUtils.max(shortArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(shortArray19, shortArray22);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray16, shortArray19);
        short short26 = org.apache.commons.lang.math.NumberUtils.min(shortArray19);
        short[] shortArray28 = new short[] { (byte) 1 };
        short short29 = org.apache.commons.lang.math.NumberUtils.min(shortArray28);
        short[] shortArray31 = new short[] { (short) -1 };
        short short32 = org.apache.commons.lang.math.NumberUtils.max(shortArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray28, shortArray31);
        short[] shortArray35 = new short[] { (byte) 1 };
        short short36 = org.apache.commons.lang.math.NumberUtils.min(shortArray35);
        short[] shortArray38 = new short[] { (short) -1 };
        short short39 = org.apache.commons.lang.math.NumberUtils.max(shortArray38);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(shortArray35, shortArray38);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(shortArray31, shortArray38);
        short short42 = org.apache.commons.lang.math.NumberUtils.max(shortArray38);
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(shortArray19, shortArray38);
        short[] shortArray47 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short48 = org.apache.commons.lang.math.NumberUtils.max(shortArray47);
        short short49 = org.apache.commons.lang.math.NumberUtils.min(shortArray47);
        short short50 = org.apache.commons.lang.math.NumberUtils.min(shortArray47);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(shortArray19, shortArray47);
        short[] shortArray55 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short56 = org.apache.commons.lang.math.NumberUtils.max(shortArray55);
        short[] shortArray60 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(shortArray55, shortArray60);
        short short62 = org.apache.commons.lang.math.NumberUtils.min(shortArray55);
        short[] shortArray65 = new short[] { (short) -1, (short) -1 };
        short short66 = org.apache.commons.lang.math.NumberUtils.min(shortArray65);
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(shortArray55, shortArray65);
        short short68 = org.apache.commons.lang.math.NumberUtils.min(shortArray65);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(shortArray19, shortArray65);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray19);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 1 + "'", short5 == (short) 1);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 1 + "'", short6 == (short) 1);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 1 + "'", short7 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 10 + "'", short12 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 1 + "'", short20 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) -1 + "'", short23 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 1 + "'", short26 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 1 + "'", short29 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) -1 + "'", short32 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 1 + "'", short36 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) -1 + "'", short39 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) -1 + "'", short42 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) 10 + "'", short48 == (short) 10);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 1 + "'", short49 == (short) 1);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 1 + "'", short50 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 10 + "'", short56 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 1 + "'", short62 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) -1 + "'", short66 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) -1 + "'", short68 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray14);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray14);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray14);
        byte byte18 = org.apache.commons.lang.math.NumberUtils.min(byteArray14);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte24 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        byte[] byteArray25 = null;
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(byteArray25, byteArray32);
        byte byte34 = org.apache.commons.lang.math.NumberUtils.min(byteArray32);
        byte byte35 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte byte36 = org.apache.commons.lang.math.NumberUtils.min(byteArray32);
        byte byte37 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(byteArray23, byteArray32);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(byteArray14, byteArray23);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray14);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte45 = org.apache.commons.lang.math.NumberUtils.max(byteArray44);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray44, byteArray48);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte55 = org.apache.commons.lang.math.NumberUtils.max(byteArray54);
        byte byte56 = org.apache.commons.lang.math.NumberUtils.max(byteArray54);
        byte byte57 = org.apache.commons.lang.math.NumberUtils.min(byteArray54);
        byte byte58 = org.apache.commons.lang.math.NumberUtils.min(byteArray54);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(byteArray48, byteArray54);
        byte byte60 = org.apache.commons.lang.math.NumberUtils.max(byteArray48);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray48);
        byte byte62 = org.apache.commons.lang.math.NumberUtils.max(byteArray48);
        byte[] byteArray63 = null;
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(byteArray63, byteArray70);
        byte[] byteArray76 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(byteArray70, byteArray76);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(byteArray48, byteArray76);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 10 + "'", byte16 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) -1 + "'", byte18 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 10 + "'", byte24 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) -1 + "'", byte34 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 100 + "'", byte35 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) -1 + "'", byte36 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 100 + "'", byte37 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 10 + "'", byte45 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte55 + "' != '" + (byte) 10 + "'", byte55 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 10 + "'", byte56 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) -1 + "'", byte57 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) -1 + "'", byte58 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + byte60 + "' != '" + (byte) 100 + "'", byte60 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 100 + "'", byte62 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short short15 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray18 = new short[] { (short) -1, (short) -1 };
        short short19 = org.apache.commons.lang.math.NumberUtils.min(shortArray18);
        short[] shortArray23 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short24 = org.apache.commons.lang.math.NumberUtils.max(shortArray23);
        short[] shortArray28 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(shortArray23, shortArray28);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray23);
        short[] shortArray32 = new short[] { (short) 100 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray32);
        short short34 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short short35 = org.apache.commons.lang.math.NumberUtils.max(shortArray32);
        short short36 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short short37 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short[] shortArray41 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short42 = org.apache.commons.lang.math.NumberUtils.max(shortArray41);
        short[] shortArray46 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(shortArray41, shortArray46);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(shortArray32, shortArray41);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray32);
        short short50 = org.apache.commons.lang.math.NumberUtils.min(shortArray7);
        short[] shortArray53 = new short[] { (short) -1, (short) -1 };
        short short54 = org.apache.commons.lang.math.NumberUtils.min(shortArray53);
        short[] shortArray58 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short59 = org.apache.commons.lang.math.NumberUtils.max(shortArray58);
        short[] shortArray63 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(shortArray58, shortArray63);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(shortArray53, shortArray58);
        short[] shortArray67 = new short[] { (short) 100 };
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(shortArray53, shortArray67);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray53);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 10 + "'", short15 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) -1 + "'", short19 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 10 + "'", short24 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 100 + "'", short34 == (short) 100);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 100 + "'", short35 == (short) 100);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 100 + "'", short36 == (short) 100);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 100 + "'", short37 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) 10 + "'", short42 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 1 + "'", short50 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) -1 + "'", short54 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 10 + "'", short59 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[100]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(100, (int) (short) 1, (int) '4');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) 100, (short) 0, (short) 0);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 52.0f, 35.0d, (double) 35.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) (-1.0f), (double) (short) 100, (double) (-1));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int13 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray18 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray23);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int int26 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int[] intArray31 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(intArray31, intArray36);
        int int38 = org.apache.commons.lang.math.NumberUtils.max(intArray36);
        int int39 = org.apache.commons.lang.math.NumberUtils.max(intArray36);
        int int40 = org.apache.commons.lang.math.NumberUtils.min(intArray36);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray36);
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray18);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) (short) 1, (double) (byte) 0, 100.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short short18 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short short19 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short[] shortArray24 = new short[] { (byte) -1, (short) 100, (byte) -1, (byte) -1 };
        short short25 = org.apache.commons.lang.math.NumberUtils.max(shortArray24);
        short[] shortArray28 = new short[] { (short) -1, (short) -1 };
        short short29 = org.apache.commons.lang.math.NumberUtils.min(shortArray28);
        short[] shortArray33 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short34 = org.apache.commons.lang.math.NumberUtils.max(shortArray33);
        short[] shortArray38 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(shortArray33, shortArray38);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(shortArray28, shortArray33);
        short[] shortArray42 = new short[] { (short) 100 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(shortArray28, shortArray42);
        short short44 = org.apache.commons.lang.math.NumberUtils.min(shortArray42);
        short short45 = org.apache.commons.lang.math.NumberUtils.max(shortArray42);
        short short46 = org.apache.commons.lang.math.NumberUtils.min(shortArray42);
        short short47 = org.apache.commons.lang.math.NumberUtils.min(shortArray42);
        short[] shortArray51 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short52 = org.apache.commons.lang.math.NumberUtils.max(shortArray51);
        short[] shortArray56 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(shortArray51, shortArray56);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(shortArray42, shortArray51);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(shortArray24, shortArray42);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(shortArray16, shortArray24);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 100 + "'", short18 == (short) 100);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[-1, 100, -1, -1]");
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 100 + "'", short25 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) -1 + "'", short29 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 10 + "'", short34 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 100 + "'", short44 == (short) 100);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 100 + "'", short45 == (short) 100);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) 100 + "'", short46 == (short) 100);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 100 + "'", short47 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short52 + "' != '" + (short) 10 + "'", short52 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] { 100L, 1.0f };
        double[] doubleArray7 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray7);
        double[] doubleArray11 = new double[] { 100L, 1.0f };
        double[] doubleArray15 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray11, doubleArray15);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray7, doubleArray11);
        double double18 = org.apache.commons.lang.math.NumberUtils.min(doubleArray11);
        double double19 = org.apache.commons.lang.math.NumberUtils.min(doubleArray11);
        double double20 = org.apache.commons.lang.math.NumberUtils.min(doubleArray11);
        double[] doubleArray23 = new double[] { 100L, 1.0f };
        double[] doubleArray27 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        double[] doubleArray31 = new double[] { 100L, 1.0f };
        double[] doubleArray35 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray31, doubleArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        double double38 = org.apache.commons.lang.math.NumberUtils.min(doubleArray31);
        double double39 = org.apache.commons.lang.math.NumberUtils.min(doubleArray31);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray11, doubleArray31);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray0, doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = org.apache.commons.lang.math.NumberUtils.min(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        long long3 = org.apache.commons.lang.math.NumberUtils.min(35L, 97L, 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        long[] longArray6 = new long[] { 0, 52, 32, 32L, (short) 10, 1L };
        long long7 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        long[] longArray8 = new long[] {};
        long[] longArray10 = new long[] { (byte) -1 };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray10);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray10);
        long[] longArray16 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray17 = new long[] {};
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(longArray16, longArray17);
        long long19 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long20 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long21 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        long long22 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(longArray10, longArray16);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(longArray6, longArray10);
        long[] longArray25 = new long[] {};
        long[] longArray27 = new long[] { (byte) -1 };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray27);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        long[] longArray32 = new long[] { 52L, (short) 1 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray32);
        long[] longArray34 = new long[] {};
        long[] longArray36 = new long[] { (byte) -1 };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray34, longArray36);
        long[] longArray38 = new long[] {};
        long[] longArray40 = new long[] { (byte) -1 };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(longArray38, longArray40);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        long long43 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(longArray36, longArray40);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray40);
        long long46 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        long[] longArray50 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray51 = new long[] {};
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray51);
        long long53 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long54 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long55 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long[] longArray56 = new long[] {};
        long[] longArray58 = new long[] { (byte) -1 };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(longArray56, longArray58);
        long long60 = org.apache.commons.lang.math.NumberUtils.max(longArray58);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray58);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(longArray40, longArray50);
        long long63 = org.apache.commons.lang.math.NumberUtils.min(longArray50);
        long[] longArray67 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray68 = new long[] {};
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(longArray67, longArray68);
        long[] longArray70 = null;
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(longArray68, longArray70);
        long[] longArray72 = new long[] {};
        long[] longArray74 = new long[] { (byte) -1 };
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(longArray72, longArray74);
        long long76 = org.apache.commons.lang.math.NumberUtils.max(longArray74);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(longArray68, longArray74);
        long long78 = org.apache.commons.lang.math.NumberUtils.max(longArray74);
        boolean boolean79 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray74);
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(longArray6, longArray50);
        java.lang.Class<?> wildcardClass81 = longArray50.getClass();
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 52, 32, 32, 10, 1]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 52L + "'", long54 == 52L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, ' ', 100.0f };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float12 = org.apache.commons.lang.math.NumberUtils.min(floatArray10);
        float[] floatArray13 = new float[] {};
        float[] floatArray17 = new float[] { 0, 1.0f, 100 };
        float[] floatArray19 = new float[] { (-1L) };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray17, floatArray19);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(floatArray13, floatArray17);
        float[] floatArray25 = new float[] { 0, 1.0f, 100 };
        float[] floatArray27 = new float[] { (-1L) };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(floatArray25, floatArray27);
        float[] floatArray32 = new float[] { 0, ' ', 100.0f };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray27, floatArray32);
        float float34 = org.apache.commons.lang.math.NumberUtils.min(floatArray27);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(floatArray17, floatArray27);
        float[] floatArray39 = new float[] { 0, 1.0f, 100 };
        float[] floatArray41 = new float[] { (-1L) };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(floatArray39, floatArray41);
        float[] floatArray46 = new float[] { 0, ' ', 100.0f };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray46);
        float float48 = org.apache.commons.lang.math.NumberUtils.min(floatArray46);
        float float49 = org.apache.commons.lang.math.NumberUtils.min(floatArray46);
        float float50 = org.apache.commons.lang.math.NumberUtils.max(floatArray46);
        float[] floatArray54 = new float[] { 0, 1.0f, 100 };
        float[] floatArray56 = new float[] { (-1L) };
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray54, floatArray56);
        float float58 = org.apache.commons.lang.math.NumberUtils.max(floatArray54);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(floatArray46, floatArray54);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray27, floatArray54);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray27);
        float float62 = org.apache.commons.lang.math.NumberUtils.min(floatArray10);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-1.0f) + "'", float34 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 100.0f + "'", float50 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 100.0f + "'", float58 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double double35 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double[] doubleArray38 = new double[] { 100L, 1.0f };
        double[] doubleArray42 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray42);
        double double44 = org.apache.commons.lang.math.NumberUtils.max(doubleArray38);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray38);
        double[] doubleArray48 = new double[] { 100L, 1.0f };
        double[] doubleArray52 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray48, doubleArray52);
        double[] doubleArray56 = new double[] { 100L, 1.0f };
        double[] doubleArray60 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray56, doubleArray60);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray48, doubleArray56);
        double[] doubleArray65 = new double[] { 100L, 1.0f };
        double[] doubleArray69 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray65, doubleArray69);
        double[] doubleArray73 = new double[] { 100L, 1.0f };
        double[] doubleArray77 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray73, doubleArray77);
        boolean boolean79 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray69, doubleArray73);
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray48, doubleArray73);
        double double81 = org.apache.commons.lang.math.NumberUtils.min(doubleArray48);
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray48);
        double double83 = org.apache.commons.lang.math.NumberUtils.max(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (short) 1, (int) (short) 100, 35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) -1, (short) (byte) -1, (short) (byte) -1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) 10, (long) '#', 35L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (byte) 0, (int) 'a', 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double double35 = org.apache.commons.lang.math.NumberUtils.min(doubleArray2);
        double double36 = org.apache.commons.lang.math.NumberUtils.max(doubleArray2);
        double double37 = org.apache.commons.lang.math.NumberUtils.max(doubleArray2);
        double double38 = org.apache.commons.lang.math.NumberUtils.min(doubleArray2);
        double[] doubleArray41 = new double[] { 100L, 1.0f };
        double[] doubleArray45 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray41, doubleArray45);
        double[] doubleArray49 = new double[] { 100L, 1.0f };
        double[] doubleArray53 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray49, doubleArray53);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray49);
        double[] doubleArray58 = new double[] { 100L, 1.0f };
        double[] doubleArray62 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray62);
        double[] doubleArray66 = new double[] { 100L, 1.0f };
        double[] doubleArray70 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray66, doubleArray70);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray66);
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray49, doubleArray66);
        double double74 = org.apache.commons.lang.math.NumberUtils.max(doubleArray66);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 100.0d + "'", double74 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (short) 0, 0, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float float9 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float[] floatArray13 = new float[] { 0, 1.0f, 100 };
        float[] floatArray15 = new float[] { (-1L) };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(floatArray13, floatArray15);
        float float17 = org.apache.commons.lang.math.NumberUtils.min(floatArray15);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray15);
        float[] floatArray19 = new float[] {};
        float[] floatArray23 = new float[] { 0, 1.0f, 100 };
        float[] floatArray25 = new float[] { (-1L) };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(floatArray23, floatArray25);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray23);
        float[] floatArray31 = new float[] { 0, 1.0f, 100 };
        float[] floatArray33 = new float[] { (-1L) };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray31, floatArray33);
        float[] floatArray38 = new float[] { 0, ' ', 100.0f };
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray38);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray33);
        float[] floatArray44 = new float[] { 0, 1.0f, 100 };
        float[] floatArray46 = new float[] { (-1L) };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray46);
        float float48 = org.apache.commons.lang.math.NumberUtils.max(floatArray44);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray44);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray44);
        float float51 = org.apache.commons.lang.math.NumberUtils.max(floatArray44);
        float[] floatArray55 = new float[] { 0, 1.0f, 100 };
        float[] floatArray57 = new float[] { (-1L) };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray55, floatArray57);
        float[] floatArray62 = new float[] { 0, 1.0f, 100 };
        float[] floatArray64 = new float[] { (-1L) };
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(floatArray62, floatArray64);
        float float66 = org.apache.commons.lang.math.NumberUtils.max(floatArray62);
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(floatArray57, floatArray62);
        float float68 = org.apache.commons.lang.math.NumberUtils.max(floatArray62);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray62);
        float[] floatArray74 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray75 = new float[] {};
        float[] floatArray79 = new float[] { 0, 1.0f, 100 };
        float[] floatArray81 = new float[] { (-1L) };
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(floatArray79, floatArray81);
        boolean boolean83 = org.apache.commons.lang.math.NumberUtils.equals(floatArray75, floatArray79);
        float float84 = org.apache.commons.lang.math.NumberUtils.max(floatArray79);
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(floatArray74, floatArray79);
        boolean boolean86 = org.apache.commons.lang.math.NumberUtils.equals(floatArray62, floatArray74);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 100.0f + "'", float9 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-1.0f) + "'", float17 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 100.0f + "'", float48 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 100.0f + "'", float51 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 100.0f + "'", float66 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 100.0f + "'", float68 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 100.0f + "'", float84 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float[] floatArray26 = new float[] { 0, 1.0f, 100 };
        float[] floatArray28 = new float[] { (-1L) };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray28);
        float[] floatArray33 = new float[] { 0, ' ', 100.0f };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray33);
        float float35 = org.apache.commons.lang.math.NumberUtils.min(floatArray33);
        float float36 = org.apache.commons.lang.math.NumberUtils.min(floatArray33);
        float float37 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        float[] floatArray41 = new float[] { 0, 1.0f, 100 };
        float[] floatArray43 = new float[] { (-1L) };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray43);
        float float45 = org.apache.commons.lang.math.NumberUtils.max(floatArray41);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray41);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray41);
        float float48 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        float[] floatArray49 = new float[] {};
        float[] floatArray53 = new float[] { 0, 1.0f, 100 };
        float[] floatArray55 = new float[] { (-1L) };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray53, floatArray55);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray49, floatArray53);
        float[] floatArray61 = new float[] { 0, 1.0f, 100 };
        float[] floatArray63 = new float[] { (-1L) };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(floatArray61, floatArray63);
        float[] floatArray68 = new float[] { 0, ' ', 100.0f };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray63, floatArray68);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(floatArray49, floatArray63);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray63);
        float float72 = org.apache.commons.lang.math.NumberUtils.max(floatArray14);
        float float73 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 100.0f + "'", float37 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 100.0f + "'", float45 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-1.0f) + "'", float48 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-1.0f) + "'", float72 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-1.0f) + "'", float73 == (-1.0f));
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short short18 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        short[] shortArray21 = new short[] { (short) -1, (short) -1 };
        short short22 = org.apache.commons.lang.math.NumberUtils.min(shortArray21);
        short[] shortArray26 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short27 = org.apache.commons.lang.math.NumberUtils.max(shortArray26);
        short[] shortArray31 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(shortArray26, shortArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray26);
        short[] shortArray35 = new short[] { (short) 100 };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray21);
        short short38 = org.apache.commons.lang.math.NumberUtils.max(shortArray21);
        short[] shortArray41 = new short[] { (short) -1, (short) -1 };
        short short42 = org.apache.commons.lang.math.NumberUtils.min(shortArray41);
        short[] shortArray46 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short47 = org.apache.commons.lang.math.NumberUtils.max(shortArray46);
        short[] shortArray51 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(shortArray46, shortArray51);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(shortArray41, shortArray46);
        short[] shortArray55 = new short[] { (short) 100 };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(shortArray41, shortArray55);
        short short57 = org.apache.commons.lang.math.NumberUtils.min(shortArray55);
        short short58 = org.apache.commons.lang.math.NumberUtils.max(shortArray55);
        short short59 = org.apache.commons.lang.math.NumberUtils.min(shortArray55);
        short short60 = org.apache.commons.lang.math.NumberUtils.min(shortArray55);
        short[] shortArray64 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short65 = org.apache.commons.lang.math.NumberUtils.max(shortArray64);
        short[] shortArray69 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(shortArray64, shortArray69);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(shortArray55, shortArray64);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray55);
        short[] shortArray76 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short77 = org.apache.commons.lang.math.NumberUtils.max(shortArray76);
        short[] shortArray81 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(shortArray76, shortArray81);
        short short83 = org.apache.commons.lang.math.NumberUtils.min(shortArray76);
        short[] shortArray87 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short88 = org.apache.commons.lang.math.NumberUtils.max(shortArray87);
        short short89 = org.apache.commons.lang.math.NumberUtils.min(shortArray87);
        short short90 = org.apache.commons.lang.math.NumberUtils.min(shortArray87);
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(shortArray76, shortArray87);
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(shortArray55, shortArray87);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) -1 + "'", short18 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -1 + "'", short22 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 10 + "'", short27 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) -1 + "'", short38 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) -1 + "'", short42 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 10 + "'", short47 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) 100 + "'", short57 == (short) 100);
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) 100 + "'", short58 == (short) 100);
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 100 + "'", short59 == (short) 100);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 100 + "'", short60 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 10 + "'", short65 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(shortArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray76), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short77 + "' != '" + (short) 10 + "'", short77 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) 1 + "'", short83 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short88 + "' != '" + (short) 10 + "'", short88 == (short) 10);
        org.junit.Assert.assertTrue("'" + short89 + "' != '" + (short) 1 + "'", short89 == (short) 1);
        org.junit.Assert.assertTrue("'" + short90 + "' != '" + (short) 1 + "'", short90 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float float9 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float float10 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float float11 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 100.0f + "'", float11 == 100.0f);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) (short) -1, (double) 1, (double) 35.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        double double2 = org.apache.commons.lang.math.NumberUtils.toDouble("hi!", (double) (-1L));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, 1.0f, 100 };
        float[] floatArray12 = new float[] { (-1L) };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray12);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float16 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float float17 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float[] floatArray21 = new float[] { 0, 1.0f, 100 };
        float[] floatArray23 = new float[] { (-1L) };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray23);
        float[] floatArray28 = new float[] { 0, 1.0f, 100 };
        float[] floatArray30 = new float[] { (-1L) };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray30);
        float float32 = org.apache.commons.lang.math.NumberUtils.max(floatArray28);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray23, floatArray28);
        float float34 = org.apache.commons.lang.math.NumberUtils.min(floatArray23);
        float float35 = org.apache.commons.lang.math.NumberUtils.max(floatArray23);
        float float36 = org.apache.commons.lang.math.NumberUtils.min(floatArray23);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray23);
        float[] floatArray41 = new float[] { 0, 1.0f, 100 };
        float[] floatArray43 = new float[] { (-1L) };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray43);
        float[] floatArray49 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray50 = new float[] {};
        float[] floatArray54 = new float[] { 0, 1.0f, 100 };
        float[] floatArray56 = new float[] { (-1L) };
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray54, floatArray56);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray50, floatArray54);
        float float59 = org.apache.commons.lang.math.NumberUtils.max(floatArray54);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray49, floatArray54);
        float float61 = org.apache.commons.lang.math.NumberUtils.max(floatArray54);
        float float62 = org.apache.commons.lang.math.NumberUtils.max(floatArray54);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray54);
        float float64 = org.apache.commons.lang.math.NumberUtils.max(floatArray54);
        float float65 = org.apache.commons.lang.math.NumberUtils.max(floatArray54);
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray54);
        float[] floatArray67 = null;
        float[] floatArray72 = new float[] { 52.0f, 1.0f, 1L, (byte) 0 };
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(floatArray67, floatArray72);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(floatArray54, floatArray72);
        float float75 = org.apache.commons.lang.math.NumberUtils.max(floatArray72);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-1.0f) + "'", float16 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-1.0f) + "'", float17 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 100.0f + "'", float32 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-1.0f) + "'", float34 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-1.0f) + "'", float35 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-1.0f) + "'", float36 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 100.0f + "'", float59 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 100.0f + "'", float61 == 100.0f);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 100.0f + "'", float62 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 100.0f + "'", float64 == 100.0f);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 100.0f + "'", float65 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[52.0, 1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 52.0f + "'", float75 == 52.0f);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float float9 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float float10 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float float11 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float[] floatArray16 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray17 = new float[] {};
        float[] floatArray21 = new float[] { 0, 1.0f, 100 };
        float[] floatArray23 = new float[] { (-1L) };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray17, floatArray21);
        float float26 = org.apache.commons.lang.math.NumberUtils.max(floatArray21);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray21);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray21);
        float[] floatArray29 = new float[] {};
        float[] floatArray33 = new float[] { 0, 1.0f, 100 };
        float[] floatArray35 = new float[] { (-1L) };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray33);
        float float38 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        float[] floatArray42 = new float[] { 0, 1.0f, 100 };
        float[] floatArray44 = new float[] { (-1L) };
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(floatArray42, floatArray44);
        float float46 = org.apache.commons.lang.math.NumberUtils.min(floatArray44);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray44);
        float[] floatArray48 = new float[] {};
        float[] floatArray52 = new float[] { 0, 1.0f, 100 };
        float[] floatArray54 = new float[] { (-1L) };
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(floatArray52, floatArray54);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray48, floatArray52);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray52);
        float[] floatArray61 = new float[] { 0, 1.0f, 100 };
        float[] floatArray63 = new float[] { (-1L) };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(floatArray61, floatArray63);
        float[] floatArray68 = new float[] { 0, ' ', 100.0f };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray63, floatArray68);
        float float70 = org.apache.commons.lang.math.NumberUtils.min(floatArray68);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(floatArray52, floatArray68);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray68);
        float float73 = org.apache.commons.lang.math.NumberUtils.max(floatArray68);
        float float74 = org.apache.commons.lang.math.NumberUtils.max(floatArray68);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 100.0f + "'", float9 == 100.0f);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 100.0f + "'", float26 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 100.0f + "'", float38 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-1.0f) + "'", float46 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 100.0f + "'", float73 == 100.0f);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 100.0f + "'", float74 == 100.0f);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(32, 0, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray17);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int int26 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray31 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(intArray31, intArray36);
        int int38 = org.apache.commons.lang.math.NumberUtils.min(intArray36);
        int[] intArray43 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(intArray43, intArray48);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(intArray36, intArray43);
        int int51 = org.apache.commons.lang.math.NumberUtils.max(intArray36);
        int[] intArray57 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int58 = org.apache.commons.lang.math.NumberUtils.max(intArray57);
        int int59 = org.apache.commons.lang.math.NumberUtils.max(intArray57);
        int int60 = org.apache.commons.lang.math.NumberUtils.max(intArray57);
        int int61 = org.apache.commons.lang.math.NumberUtils.max(intArray57);
        int int62 = org.apache.commons.lang.math.NumberUtils.max(intArray57);
        int int63 = org.apache.commons.lang.math.NumberUtils.max(intArray57);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(intArray36, intArray57);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray36);
        int[] intArray72 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int73 = org.apache.commons.lang.math.NumberUtils.min(intArray72);
        int int74 = org.apache.commons.lang.math.NumberUtils.min(intArray72);
        int[] intArray81 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int82 = org.apache.commons.lang.math.NumberUtils.min(intArray81);
        boolean boolean83 = org.apache.commons.lang.math.NumberUtils.equals(intArray72, intArray81);
        int[] intArray89 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int90 = org.apache.commons.lang.math.NumberUtils.max(intArray89);
        int int91 = org.apache.commons.lang.math.NumberUtils.max(intArray89);
        int int92 = org.apache.commons.lang.math.NumberUtils.max(intArray89);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(intArray81, intArray89);
        int int94 = org.apache.commons.lang.math.NumberUtils.min(intArray81);
        int int95 = org.apache.commons.lang.math.NumberUtils.max(intArray81);
        boolean boolean96 = org.apache.commons.lang.math.NumberUtils.equals(intArray36, intArray81);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 52 + "'", int95 == 52);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double double17 = org.apache.commons.lang.math.NumberUtils.min(doubleArray10);
        double double18 = org.apache.commons.lang.math.NumberUtils.max(doubleArray10);
        double[] doubleArray21 = new double[] { 100L, 1.0f };
        double[] doubleArray25 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray21, doubleArray25);
        double[] doubleArray29 = new double[] { 100L, 1.0f };
        double[] doubleArray33 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray29, doubleArray33);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray21, doubleArray29);
        double[] doubleArray38 = new double[] { 100L, 1.0f };
        double[] doubleArray42 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray42);
        double[] doubleArray46 = new double[] { 100L, 1.0f };
        double[] doubleArray50 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray46, doubleArray50);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray42, doubleArray46);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray21, doubleArray46);
        double double54 = org.apache.commons.lang.math.NumberUtils.min(doubleArray46);
        double[] doubleArray55 = null;
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray46, doubleArray55);
        double[] doubleArray58 = new double[] { 32 };
        double[] doubleArray61 = new double[] { 100L, 1.0f };
        double[] doubleArray65 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray61, doubleArray65);
        double[] doubleArray69 = new double[] { 100L, 1.0f };
        double[] doubleArray73 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray69, doubleArray73);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray65, doubleArray69);
        double[] doubleArray78 = new double[] { 100L, 1.0f };
        double[] doubleArray82 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean83 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray78, doubleArray82);
        double[] doubleArray86 = new double[] { 100L, 1.0f };
        double[] doubleArray90 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray86, doubleArray90);
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray78, doubleArray86);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray69, doubleArray86);
        double double94 = org.apache.commons.lang.math.NumberUtils.max(doubleArray86);
        boolean boolean95 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray86);
        boolean boolean96 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray55, doubleArray58);
        double double97 = org.apache.commons.lang.math.NumberUtils.max(doubleArray58);
        double double98 = org.apache.commons.lang.math.NumberUtils.min(doubleArray58);
        boolean boolean99 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 32.0d + "'", double97 == 32.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 32.0d + "'", double98 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 0.0f, 1.0d, (double) (-1L));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { (short) 0, (byte) 0, (byte) 100 };
        float float11 = org.apache.commons.lang.math.NumberUtils.min(floatArray10);
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray10);
        java.lang.Class<?> wildcardClass13 = floatArray3.getClass();
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 35, (float) 0, (float) 0L);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 35.0f + "'", float3 == 35.0f);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short short18 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        short[] shortArray21 = new short[] { (short) -1, (short) -1 };
        short short22 = org.apache.commons.lang.math.NumberUtils.min(shortArray21);
        short[] shortArray26 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short27 = org.apache.commons.lang.math.NumberUtils.max(shortArray26);
        short[] shortArray31 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(shortArray26, shortArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray26);
        short[] shortArray35 = new short[] { (short) 100 };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray21);
        short short38 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short short39 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) -1 + "'", short18 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -1 + "'", short22 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 10 + "'", short27 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) -1 + "'", short38 == (short) -1);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) -1 + "'", short39 == (short) -1);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray9 = new long[] { 0, (short) 1, 52, (byte) 1 };
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray9);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray16 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray17 = new long[] {};
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(longArray16, longArray17);
        long long19 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long20 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long21 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        long long22 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        long long23 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        long[] longArray27 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray28 = new long[] {};
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray28);
        long long30 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        long long31 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        long long32 = org.apache.commons.lang.math.NumberUtils.min(longArray27);
        long long33 = org.apache.commons.lang.math.NumberUtils.min(longArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(longArray16, longArray27);
        long long35 = org.apache.commons.lang.math.NumberUtils.min(longArray27);
        long[] longArray39 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray40 = new long[] {};
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(longArray39, longArray40);
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray40);
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray27);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 52, 1]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) -1, (byte) 10, (byte) 10);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) (byte) 0, (double) 32.0f, (double) 32L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short short15 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray18 = new short[] { (short) -1, (short) -1 };
        short short19 = org.apache.commons.lang.math.NumberUtils.min(shortArray18);
        short[] shortArray23 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short24 = org.apache.commons.lang.math.NumberUtils.max(shortArray23);
        short[] shortArray28 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(shortArray23, shortArray28);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray23);
        short[] shortArray32 = new short[] { (short) 100 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray32);
        short short34 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short short35 = org.apache.commons.lang.math.NumberUtils.max(shortArray32);
        short short36 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short short37 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short[] shortArray41 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short42 = org.apache.commons.lang.math.NumberUtils.max(shortArray41);
        short[] shortArray46 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(shortArray41, shortArray46);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(shortArray32, shortArray41);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray32);
        short short50 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short[] shortArray55 = new short[] { (byte) -1, (short) 100, (byte) -1, (byte) -1 };
        short short56 = org.apache.commons.lang.math.NumberUtils.max(shortArray55);
        short[] shortArray59 = new short[] { (short) -1, (short) -1 };
        short short60 = org.apache.commons.lang.math.NumberUtils.min(shortArray59);
        short[] shortArray64 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short65 = org.apache.commons.lang.math.NumberUtils.max(shortArray64);
        short[] shortArray69 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(shortArray64, shortArray69);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(shortArray59, shortArray64);
        short[] shortArray73 = new short[] { (short) 100 };
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(shortArray59, shortArray73);
        short short75 = org.apache.commons.lang.math.NumberUtils.min(shortArray73);
        short short76 = org.apache.commons.lang.math.NumberUtils.max(shortArray73);
        short short77 = org.apache.commons.lang.math.NumberUtils.min(shortArray73);
        short short78 = org.apache.commons.lang.math.NumberUtils.min(shortArray73);
        short[] shortArray82 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short83 = org.apache.commons.lang.math.NumberUtils.max(shortArray82);
        short[] shortArray87 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(shortArray82, shortArray87);
        boolean boolean89 = org.apache.commons.lang.math.NumberUtils.equals(shortArray73, shortArray82);
        boolean boolean90 = org.apache.commons.lang.math.NumberUtils.equals(shortArray55, shortArray73);
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(shortArray32, shortArray73);
        java.lang.Class<?> wildcardClass92 = shortArray73.getClass();
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 10 + "'", short15 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) -1 + "'", short19 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 10 + "'", short24 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 100 + "'", short34 == (short) 100);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 100 + "'", short35 == (short) 100);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 100 + "'", short36 == (short) 100);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 100 + "'", short37 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) 10 + "'", short42 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 100 + "'", short50 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[-1, 100, -1, -1]");
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 100 + "'", short56 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) -1 + "'", short60 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 10 + "'", short65 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) 100 + "'", short75 == (short) 100);
        org.junit.Assert.assertTrue("'" + short76 + "' != '" + (short) 100 + "'", short76 == (short) 100);
        org.junit.Assert.assertTrue("'" + short77 + "' != '" + (short) 100 + "'", short77 == (short) 100);
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 100 + "'", short78 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) 10 + "'", short83 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, ' ', 100.0f };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float12 = org.apache.commons.lang.math.NumberUtils.min(floatArray10);
        float float13 = org.apache.commons.lang.math.NumberUtils.min(floatArray10);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        float[] floatArray18 = new float[] { 0, 1.0f, 100 };
        float[] floatArray20 = new float[] { (-1L) };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(floatArray18, floatArray20);
        float float22 = org.apache.commons.lang.math.NumberUtils.max(floatArray18);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray18);
        float float24 = org.apache.commons.lang.math.NumberUtils.max(floatArray18);
        float float25 = org.apache.commons.lang.math.NumberUtils.min(floatArray18);
        float float26 = org.apache.commons.lang.math.NumberUtils.min(floatArray18);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 100.0f + "'", float22 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 100.0f + "'", float24 == 100.0f);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte4 = org.apache.commons.lang.math.NumberUtils.max(byteArray3);
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray7);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte21 = org.apache.commons.lang.math.NumberUtils.max(byteArray20);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(byteArray20, byteArray24);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte31 = org.apache.commons.lang.math.NumberUtils.max(byteArray30);
        byte byte32 = org.apache.commons.lang.math.NumberUtils.max(byteArray30);
        byte byte33 = org.apache.commons.lang.math.NumberUtils.min(byteArray30);
        byte byte34 = org.apache.commons.lang.math.NumberUtils.min(byteArray30);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(byteArray24, byteArray30);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte40 = org.apache.commons.lang.math.NumberUtils.max(byteArray39);
        byte[] byteArray41 = null;
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray41, byteArray48);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(byteArray48, byteArray54);
        byte byte56 = org.apache.commons.lang.math.NumberUtils.max(byteArray48);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(byteArray39, byteArray48);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(byteArray30, byteArray39);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray30);
        byte byte60 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte61 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte62 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 10 + "'", byte4 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 10 + "'", byte16 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 10 + "'", byte21 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 10 + "'", byte31 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 10 + "'", byte32 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) -1 + "'", byte33 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) -1 + "'", byte34 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) 10 + "'", byte40 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 100 + "'", byte56 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + byte60 + "' != '" + (byte) -1 + "'", byte60 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) -1 + "'", byte61 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) -1 + "'", byte62 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 1L, (double) (byte) -1, 32.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray13);
        byte[] byteArray19 = null;
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(byteArray19, byteArray26);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(byteArray26, byteArray32);
        byte byte34 = org.apache.commons.lang.math.NumberUtils.max(byteArray26);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray26);
        byte[] byteArray36 = null;
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(byteArray36, byteArray43);
        byte byte45 = org.apache.commons.lang.math.NumberUtils.min(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte50 = org.apache.commons.lang.math.NumberUtils.max(byteArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(byteArray43, byteArray49);
        byte byte52 = org.apache.commons.lang.math.NumberUtils.max(byteArray43);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte57 = org.apache.commons.lang.math.NumberUtils.max(byteArray56);
        byte[] byteArray58 = null;
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(byteArray58, byteArray65);
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(byteArray65, byteArray71);
        byte byte73 = org.apache.commons.lang.math.NumberUtils.max(byteArray65);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(byteArray56, byteArray65);
        byte byte75 = org.apache.commons.lang.math.NumberUtils.max(byteArray65);
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(byteArray43, byteArray65);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte81 = org.apache.commons.lang.math.NumberUtils.max(byteArray80);
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(byteArray80, byteArray84);
        boolean boolean86 = org.apache.commons.lang.math.NumberUtils.equals(byteArray65, byteArray80);
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte91 = org.apache.commons.lang.math.NumberUtils.max(byteArray90);
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean95 = org.apache.commons.lang.math.NumberUtils.equals(byteArray90, byteArray94);
        boolean boolean96 = org.apache.commons.lang.math.NumberUtils.equals(byteArray80, byteArray90);
        boolean boolean97 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray80);
        byte byte98 = org.apache.commons.lang.math.NumberUtils.max(byteArray80);
        byte byte99 = org.apache.commons.lang.math.NumberUtils.max(byteArray80);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) -1 + "'", byte16 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 100 + "'", byte34 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) -1 + "'", byte45 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 10 + "'", byte50 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + byte52 + "' != '" + (byte) 100 + "'", byte52 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) 10 + "'", byte57 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + byte73 + "' != '" + (byte) 100 + "'", byte73 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + byte75 + "' != '" + (byte) 100 + "'", byte75 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte81 + "' != '" + (byte) 10 + "'", byte81 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte91 + "' != '" + (byte) 10 + "'", byte91 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + byte98 + "' != '" + (byte) 10 + "'", byte98 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte99 + "' != '" + (byte) 10 + "'", byte99 == (byte) 10);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 52L, (float) (short) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) (short) 10, 0.0f, (float) '#');
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare(52.0d, (double) '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, 1.0f, 100 };
        float[] floatArray12 = new float[] { (-1L) };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray12);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float16 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float[] floatArray17 = new float[] {};
        float[] floatArray21 = new float[] { 0, 1.0f, 100 };
        float[] floatArray23 = new float[] { (-1L) };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray17, floatArray21);
        float[] floatArray29 = new float[] { 0, 1.0f, 100 };
        float[] floatArray31 = new float[] { (-1L) };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray31);
        float[] floatArray36 = new float[] { 0, ' ', 100.0f };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray31, floatArray36);
        float float38 = org.apache.commons.lang.math.NumberUtils.min(floatArray31);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray31);
        float float40 = org.apache.commons.lang.math.NumberUtils.max(floatArray31);
        float float41 = org.apache.commons.lang.math.NumberUtils.min(floatArray31);
        float float42 = org.apache.commons.lang.math.NumberUtils.max(floatArray31);
        float[] floatArray43 = new float[] {};
        float[] floatArray47 = new float[] { 0, 1.0f, 100 };
        float[] floatArray49 = new float[] { (-1L) };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(floatArray47, floatArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(floatArray43, floatArray47);
        float[] floatArray55 = new float[] { 0, 1.0f, 100 };
        float[] floatArray57 = new float[] { (-1L) };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray55, floatArray57);
        float[] floatArray62 = new float[] { 0, ' ', 100.0f };
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(floatArray57, floatArray62);
        float float64 = org.apache.commons.lang.math.NumberUtils.min(floatArray57);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(floatArray47, floatArray57);
        float[] floatArray69 = new float[] { 0, 1.0f, 100 };
        float[] floatArray71 = new float[] { (-1L) };
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(floatArray69, floatArray71);
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(floatArray47, floatArray69);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(floatArray31, floatArray69);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray69);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-1.0f) + "'", float16 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-1.0f) + "'", float38 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-1.0f) + "'", float41 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-1.0f) + "'", float42 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-1.0f) + "'", float64 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        float float2 = org.apache.commons.lang.math.NumberUtils.toFloat("", (float) 10);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) (short) -1, 35.0f, (-1.0f));
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 35.0f + "'", float3 == 35.0f);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 10, (double) (byte) 10, (double) 100L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 97L, (double) 97, (double) 52.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 1, (byte) -1, (byte) 100);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray11 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray12 = new float[] {};
        float[] floatArray16 = new float[] { 0, 1.0f, 100 };
        float[] floatArray18 = new float[] { (-1L) };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray18);
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray16);
        float float21 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray11, floatArray16);
        float float23 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        float float24 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray16);
        float[] floatArray32 = new float[] { 52.0f, 100.0f, 10L, 100, 35L, 35 };
        float float33 = org.apache.commons.lang.math.NumberUtils.max(floatArray32);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray32);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 100.0f + "'", float21 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 100.0f + "'", float23 == 100.0f);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 100.0f + "'", float24 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[52.0, 100.0, 10.0, 100.0, 35.0, 35.0]");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 100.0f + "'", float33 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) 100, (short) (byte) -1, (short) (byte) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) (byte) 1, (float) (short) 1, (float) 97L);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float float9 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float[] floatArray13 = new float[] { 0, 1.0f, 100 };
        float[] floatArray15 = new float[] { (-1L) };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(floatArray13, floatArray15);
        float float17 = org.apache.commons.lang.math.NumberUtils.min(floatArray15);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray15);
        float[] floatArray19 = new float[] {};
        float[] floatArray23 = new float[] { 0, 1.0f, 100 };
        float[] floatArray25 = new float[] { (-1L) };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(floatArray23, floatArray25);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray23);
        float[] floatArray31 = new float[] { 0, 1.0f, 100 };
        float[] floatArray33 = new float[] { (-1L) };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray31, floatArray33);
        float[] floatArray38 = new float[] { 0, ' ', 100.0f };
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray38);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray33);
        float[] floatArray44 = new float[] { 0, 1.0f, 100 };
        float[] floatArray46 = new float[] { (-1L) };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray46);
        float float48 = org.apache.commons.lang.math.NumberUtils.max(floatArray44);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray44);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray44);
        float[] floatArray51 = null;
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray51);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 100.0f + "'", float9 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-1.0f) + "'", float17 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 100.0f + "'", float48 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        int[] intArray5 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int6 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int7 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int8 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int[] intArray13 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray18 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(intArray13, intArray18);
        int int20 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int int21 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int[] intArray26 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(intArray26, intArray31);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray31);
        int int34 = org.apache.commons.lang.math.NumberUtils.min(intArray31);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray31);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray18);
        int int37 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int int38 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int int39 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        long long3 = org.apache.commons.lang.math.NumberUtils.min(1L, (long) 100, 100L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte[] byteArray6 = null;
        byte[] byteArray13 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(byteArray6, byteArray13);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte18 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray13);
        byte byte20 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte[] byteArray21 = null;
        byte[] byteArray28 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(byteArray21, byteArray28);
        byte byte30 = org.apache.commons.lang.math.NumberUtils.min(byteArray28);
        byte byte31 = org.apache.commons.lang.math.NumberUtils.max(byteArray28);
        byte byte32 = org.apache.commons.lang.math.NumberUtils.max(byteArray28);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte38 = org.apache.commons.lang.math.NumberUtils.max(byteArray37);
        byte byte39 = org.apache.commons.lang.math.NumberUtils.max(byteArray37);
        byte byte40 = org.apache.commons.lang.math.NumberUtils.min(byteArray37);
        byte byte41 = org.apache.commons.lang.math.NumberUtils.min(byteArray37);
        byte byte42 = org.apache.commons.lang.math.NumberUtils.min(byteArray37);
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(byteArray28, byteArray37);
        byte[] byteArray44 = null;
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(byteArray44, byteArray51);
        byte byte53 = org.apache.commons.lang.math.NumberUtils.min(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte58 = org.apache.commons.lang.math.NumberUtils.max(byteArray57);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(byteArray51, byteArray57);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(byteArray37, byteArray57);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray57);
        byte[] byteArray62 = null;
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(byteArray62, byteArray69);
        byte byte71 = org.apache.commons.lang.math.NumberUtils.min(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte76 = org.apache.commons.lang.math.NumberUtils.max(byteArray75);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(byteArray69, byteArray75);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(byteArray57, byteArray75);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) -1 + "'", byte15 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 100 + "'", byte16 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 100 + "'", byte18 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 10 + "'", byte20 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) -1 + "'", byte30 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 100 + "'", byte31 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 100 + "'", byte32 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 10 + "'", byte38 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 10 + "'", byte39 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) -1 + "'", byte40 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) -1 + "'", byte41 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) -1 + "'", byte42 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) -1 + "'", byte53 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) 10 + "'", byte58 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) -1 + "'", byte71 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte76 + "' != '" + (byte) 10 + "'", byte76 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        short[] shortArray4 = new short[] { (byte) -1, (short) 100, (byte) -1, (byte) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        short[] shortArray8 = new short[] { (short) -1, (short) -1 };
        short short9 = org.apache.commons.lang.math.NumberUtils.min(shortArray8);
        short[] shortArray13 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short14 = org.apache.commons.lang.math.NumberUtils.max(shortArray13);
        short[] shortArray18 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(shortArray13, shortArray18);
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(shortArray8, shortArray13);
        short[] shortArray22 = new short[] { (short) 100 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(shortArray8, shortArray22);
        short short24 = org.apache.commons.lang.math.NumberUtils.min(shortArray22);
        short short25 = org.apache.commons.lang.math.NumberUtils.max(shortArray22);
        short short26 = org.apache.commons.lang.math.NumberUtils.min(shortArray22);
        short short27 = org.apache.commons.lang.math.NumberUtils.min(shortArray22);
        short[] shortArray31 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short32 = org.apache.commons.lang.math.NumberUtils.max(shortArray31);
        short[] shortArray36 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(shortArray31, shortArray36);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(shortArray22, shortArray31);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray22);
        short short40 = org.apache.commons.lang.math.NumberUtils.max(shortArray22);
        short short41 = org.apache.commons.lang.math.NumberUtils.min(shortArray22);
        short short42 = org.apache.commons.lang.math.NumberUtils.max(shortArray22);
        short short43 = org.apache.commons.lang.math.NumberUtils.min(shortArray22);
        short short44 = org.apache.commons.lang.math.NumberUtils.max(shortArray22);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 100, -1, -1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 100 + "'", short5 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -1 + "'", short9 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 10 + "'", short14 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 100 + "'", short24 == (short) 100);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 100 + "'", short25 == (short) 100);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 100 + "'", short26 == (short) 100);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 100 + "'", short27 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 10 + "'", short32 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 100 + "'", short40 == (short) 100);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 100 + "'", short41 == (short) 100);
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) 100 + "'", short42 == (short) 100);
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 100 + "'", short43 == (short) 100);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 100 + "'", short44 == (short) 100);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) 0, (long) 0, (long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray13);
        byte byte19 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) -1 + "'", byte16 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 10 + "'", byte19 == (byte) 10);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) (byte) 0, (double) (byte) 0, (double) 1.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long[] longArray6 = new long[] {};
        long[] longArray8 = new long[] { (byte) -1 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(longArray6, longArray8);
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        long[] longArray13 = new long[] { 52L, (short) 1 };
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray13);
        long[] longArray15 = new long[] {};
        long[] longArray17 = new long[] { (byte) -1 };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray17);
        long[] longArray19 = new long[] {};
        long[] longArray21 = new long[] { (byte) -1 };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(longArray19, longArray21);
        long long23 = org.apache.commons.lang.math.NumberUtils.max(longArray21);
        long long24 = org.apache.commons.lang.math.NumberUtils.max(longArray21);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(longArray17, longArray21);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray21);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray8);
        long[] longArray28 = new long[] {};
        long[] longArray30 = new long[] { (byte) -1 };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray30);
        long long32 = org.apache.commons.lang.math.NumberUtils.max(longArray30);
        long[] longArray37 = new long[] { 0, (short) 1, 52, (byte) 1 };
        long long38 = org.apache.commons.lang.math.NumberUtils.max(longArray37);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray30, longArray37);
        long long40 = org.apache.commons.lang.math.NumberUtils.min(longArray30);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray30);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray30);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[0, 1, 52, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray5 = new float[] { 0, 1.0f, 100 };
        float[] floatArray7 = new float[] { (-1L) };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray7);
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(floatArray1, floatArray5);
        float float10 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float[] floatArray14 = new float[] { 0, 1.0f, 100 };
        float[] floatArray16 = new float[] { (-1L) };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray16);
        float float18 = org.apache.commons.lang.math.NumberUtils.min(floatArray16);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray16);
        float[] floatArray20 = new float[] {};
        float[] floatArray24 = new float[] { 0, 1.0f, 100 };
        float[] floatArray26 = new float[] { (-1L) };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(floatArray24, floatArray26);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(floatArray20, floatArray24);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray24);
        float float30 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray16);
        float[] floatArray35 = new float[] { 0, 1.0f, 100 };
        float[] floatArray37 = new float[] { (-1L) };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray35, floatArray37);
        float[] floatArray42 = new float[] { (short) 0, (byte) 0, (byte) 100 };
        float float43 = org.apache.commons.lang.math.NumberUtils.min(floatArray42);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray35, floatArray42);
        float[] floatArray48 = new float[] { 0, 1.0f, 100 };
        float[] floatArray50 = new float[] { (-1L) };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(floatArray48, floatArray50);
        float[] floatArray55 = new float[] { 0, 1.0f, 100 };
        float[] floatArray57 = new float[] { (-1L) };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray55, floatArray57);
        float float59 = org.apache.commons.lang.math.NumberUtils.max(floatArray55);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray48, floatArray55);
        float float61 = org.apache.commons.lang.math.NumberUtils.max(floatArray48);
        float[] floatArray62 = new float[] {};
        float[] floatArray66 = new float[] { 0, 1.0f, 100 };
        float[] floatArray68 = new float[] { (-1L) };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray66, floatArray68);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(floatArray62, floatArray66);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(floatArray48, floatArray66);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(floatArray35, floatArray48);
        float float73 = org.apache.commons.lang.math.NumberUtils.max(floatArray35);
        float float74 = org.apache.commons.lang.math.NumberUtils.min(floatArray35);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray35);
        // The following exception was thrown during execution in test generation
        try {
            float float76 = org.apache.commons.lang.math.NumberUtils.max(floatArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 100.0f + "'", float10 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-1.0f) + "'", float30 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 100.0f + "'", float59 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 100.0f + "'", float61 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 100.0f + "'", float73 == 100.0f);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        double double3 = org.apache.commons.lang.math.NumberUtils.min(0.0d, 10.0d, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 10, (double) 35.0f, (double) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        long[] longArray6 = new long[] { 0, 52, 32, 32L, (short) 10, 1L };
        long long7 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        long[] longArray8 = new long[] {};
        long[] longArray10 = new long[] { (byte) -1 };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray10);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray10);
        long[] longArray16 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray17 = new long[] {};
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(longArray16, longArray17);
        long long19 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long20 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long21 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        long long22 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(longArray10, longArray16);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(longArray6, longArray10);
        long[] longArray28 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray29 = new long[] {};
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray29);
        long[] longArray34 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray35 = new long[] {};
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(longArray34, longArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray35);
        long[] longArray41 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray42 = new long[] {};
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(longArray41, longArray42);
        long long44 = org.apache.commons.lang.math.NumberUtils.max(longArray41);
        long long45 = org.apache.commons.lang.math.NumberUtils.max(longArray41);
        long long46 = org.apache.commons.lang.math.NumberUtils.max(longArray41);
        long long47 = org.apache.commons.lang.math.NumberUtils.min(longArray41);
        long long48 = org.apache.commons.lang.math.NumberUtils.max(longArray41);
        long long49 = org.apache.commons.lang.math.NumberUtils.min(longArray41);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray41);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(longArray10, longArray28);
        long long52 = org.apache.commons.lang.math.NumberUtils.max(longArray10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 52, 32, 32, 10, 1]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(1, (int) (short) 0, 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        long long3 = org.apache.commons.lang.math.NumberUtils.max(32L, 0L, (long) 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte10 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte11 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte[] byteArray12 = null;
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(byteArray12, byteArray19);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(byteArray19, byteArray25);
        byte byte27 = org.apache.commons.lang.math.NumberUtils.max(byteArray25);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray25);
        byte[] byteArray29 = null;
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray29);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 100 + "'", byte10 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 100 + "'", byte11 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 10 + "'", byte27 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray10);
        double double17 = org.apache.commons.lang.math.NumberUtils.max(doubleArray6);
        double[] doubleArray23 = new double[] { 97, (byte) 10, (-1), (-1), 100L };
        double double24 = org.apache.commons.lang.math.NumberUtils.max(doubleArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[97.0, 10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray5 = new float[] { 0, 1.0f, 100 };
        float[] floatArray7 = new float[] { (-1L) };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray7);
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(floatArray1, floatArray5);
        float float10 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float[] floatArray14 = new float[] { 0, 1.0f, 100 };
        float[] floatArray16 = new float[] { (-1L) };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray16);
        float float18 = org.apache.commons.lang.math.NumberUtils.min(floatArray16);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray16);
        float[] floatArray20 = new float[] {};
        float[] floatArray24 = new float[] { 0, 1.0f, 100 };
        float[] floatArray26 = new float[] { (-1L) };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(floatArray24, floatArray26);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(floatArray20, floatArray24);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray24);
        float float30 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray16);
        // The following exception was thrown during execution in test generation
        try {
            float float32 = org.apache.commons.lang.math.NumberUtils.min(floatArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 100.0f + "'", float10 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-1.0f) + "'", float30 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        float[] floatArray4 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray5 = new float[] {};
        float[] floatArray9 = new float[] { 0, 1.0f, 100 };
        float[] floatArray11 = new float[] { (-1L) };
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(floatArray9, floatArray11);
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray9);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray9);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray9);
        float float16 = org.apache.commons.lang.math.NumberUtils.max(floatArray9);
        float float17 = org.apache.commons.lang.math.NumberUtils.max(floatArray9);
        float float18 = org.apache.commons.lang.math.NumberUtils.min(floatArray9);
        float float19 = org.apache.commons.lang.math.NumberUtils.min(floatArray9);
        float float20 = org.apache.commons.lang.math.NumberUtils.min(floatArray9);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 100.0f + "'", float16 == 100.0f);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 100.0f + "'", float17 == 100.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 'a', (float) 1, 10.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray9 = new long[] { 0, (short) 1, 52, (byte) 1 };
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray9);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray13 = new long[] {};
        long[] longArray15 = new long[] { (byte) -1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray15);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long[] longArray20 = new long[] { 52L, (short) 1 };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray20);
        long long22 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        long long23 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        long long24 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        long[] longArray25 = new long[] {};
        long[] longArray27 = new long[] { (byte) -1 };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray27);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        long[] longArray32 = new long[] { 52L, (short) 1 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray32);
        long[] longArray34 = new long[] {};
        long[] longArray36 = new long[] { (byte) -1 };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray34, longArray36);
        long[] longArray38 = new long[] {};
        long[] longArray40 = new long[] { (byte) -1 };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(longArray38, longArray40);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        long long43 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(longArray36, longArray40);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray40);
        long long46 = org.apache.commons.lang.math.NumberUtils.max(longArray40);
        long[] longArray50 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray51 = new long[] {};
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray51);
        long long53 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long54 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long long55 = org.apache.commons.lang.math.NumberUtils.max(longArray50);
        long[] longArray56 = new long[] {};
        long[] longArray58 = new long[] { (byte) -1 };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(longArray56, longArray58);
        long long60 = org.apache.commons.lang.math.NumberUtils.max(longArray58);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(longArray50, longArray58);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(longArray40, longArray50);
        long long63 = org.apache.commons.lang.math.NumberUtils.min(longArray50);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(longArray20, longArray50);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray50);
        long long66 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 52, 1]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 52L + "'", long54 == 52L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        long long3 = org.apache.commons.lang.math.NumberUtils.min(35L, (long) 35, 52L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        float float2 = org.apache.commons.lang.math.NumberUtils.toFloat("", (float) 1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { (short) 0, (byte) 0, (byte) 100 };
        float float11 = org.apache.commons.lang.math.NumberUtils.min(floatArray10);
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray10);
        float[] floatArray16 = new float[] { 0, 1.0f, 100 };
        float[] floatArray18 = new float[] { (-1L) };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray18);
        float[] floatArray23 = new float[] { 0, 1.0f, 100 };
        float[] floatArray25 = new float[] { (-1L) };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(floatArray23, floatArray25);
        float float27 = org.apache.commons.lang.math.NumberUtils.max(floatArray23);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray23);
        float float29 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        float[] floatArray30 = new float[] {};
        float[] floatArray34 = new float[] { 0, 1.0f, 100 };
        float[] floatArray36 = new float[] { (-1L) };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray34, floatArray36);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray34);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray34);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray16);
        float float41 = org.apache.commons.lang.math.NumberUtils.max(floatArray3);
        float float42 = org.apache.commons.lang.math.NumberUtils.max(floatArray3);
        float float43 = org.apache.commons.lang.math.NumberUtils.min(floatArray3);
        float[] floatArray44 = new float[] {};
        float[] floatArray48 = new float[] { 0, 1.0f, 100 };
        float[] floatArray50 = new float[] { (-1L) };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(floatArray48, floatArray50);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray48);
        float float53 = org.apache.commons.lang.math.NumberUtils.max(floatArray48);
        float[] floatArray57 = new float[] { 0, 1.0f, 100 };
        float[] floatArray59 = new float[] { (-1L) };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray57, floatArray59);
        float float61 = org.apache.commons.lang.math.NumberUtils.min(floatArray59);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(floatArray48, floatArray59);
        float[] floatArray63 = new float[] {};
        float[] floatArray67 = new float[] { 0, 1.0f, 100 };
        float[] floatArray69 = new float[] { (-1L) };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(floatArray67, floatArray69);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(floatArray63, floatArray67);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(floatArray59, floatArray67);
        float[] floatArray76 = new float[] { 0, 1.0f, 100 };
        float[] floatArray78 = new float[] { (-1L) };
        boolean boolean79 = org.apache.commons.lang.math.NumberUtils.equals(floatArray76, floatArray78);
        float[] floatArray83 = new float[] { 0, ' ', 100.0f };
        boolean boolean84 = org.apache.commons.lang.math.NumberUtils.equals(floatArray78, floatArray83);
        float float85 = org.apache.commons.lang.math.NumberUtils.min(floatArray83);
        boolean boolean86 = org.apache.commons.lang.math.NumberUtils.equals(floatArray67, floatArray83);
        float float87 = org.apache.commons.lang.math.NumberUtils.min(floatArray83);
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray83);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 100.0f + "'", float27 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 100.0f + "'", float29 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 100.0f + "'", float41 == 100.0f);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 100.0f + "'", float42 == 100.0f);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 100.0f + "'", float53 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-1.0f) + "'", float61 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[]");
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.0f + "'", float85 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) (byte) 10, 52.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) 100, (byte) 1, (byte) -1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(35, (int) (byte) 1, 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte10 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray15);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.max(byteArray15);
        byte byte18 = org.apache.commons.lang.math.NumberUtils.max(byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte23 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(byteArray22, byteArray26);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte33 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte byte34 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte byte35 = org.apache.commons.lang.math.NumberUtils.min(byteArray32);
        byte byte36 = org.apache.commons.lang.math.NumberUtils.min(byteArray32);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(byteArray26, byteArray32);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte42 = org.apache.commons.lang.math.NumberUtils.max(byteArray41);
        byte[] byteArray43 = null;
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(byteArray43, byteArray50);
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(byteArray50, byteArray56);
        byte byte58 = org.apache.commons.lang.math.NumberUtils.max(byteArray50);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(byteArray41, byteArray50);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(byteArray32, byteArray41);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(byteArray15, byteArray32);
        byte byte62 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte byte63 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray32);
        byte byte65 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte70 = org.apache.commons.lang.math.NumberUtils.max(byteArray69);
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(byteArray69, byteArray73);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(byteArray32, byteArray69);
        byte byte76 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) -1 + "'", byte10 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 10 + "'", byte16 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 10 + "'", byte17 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 10 + "'", byte18 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 10 + "'", byte23 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 10 + "'", byte33 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 10 + "'", byte34 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) -1 + "'", byte35 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) -1 + "'", byte36 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 10 + "'", byte42 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) 100 + "'", byte58 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 10 + "'", byte62 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 10 + "'", byte63 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 10 + "'", byte65 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte70 + "' != '" + (byte) 10 + "'", byte70 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + byte76 + "' != '" + (byte) 10 + "'", byte76 == (byte) 10);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 'a', 0.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int[] intArray15 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray20 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(intArray15, intArray20);
        int int22 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray20);
        int int24 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray29 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray29, intArray34);
        int int36 = org.apache.commons.lang.math.NumberUtils.max(intArray34);
        int int37 = org.apache.commons.lang.math.NumberUtils.min(intArray34);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray34);
        int int39 = org.apache.commons.lang.math.NumberUtils.max(intArray34);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) (byte) -1, (long) (short) 100, 97L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        long long3 = org.apache.commons.lang.math.NumberUtils.max(35L, (long) (short) 0, 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 97, (double) 35L, (double) (-1L));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) ' ', (float) 1, (float) (byte) 1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 32.0f + "'", float3 == 32.0f);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        float float3 = org.apache.commons.lang.math.NumberUtils.max(0.0f, 97.0f, (float) 52L);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        int int3 = org.apache.commons.lang.math.NumberUtils.min(35, (int) (byte) 100, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        float float3 = org.apache.commons.lang.math.NumberUtils.max(100.0f, 35.0f, 0.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        float[] floatArray0 = null;
        float[] floatArray5 = new float[] { 52.0f, 1.0f, 1L, (byte) 0 };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray5);
        // The following exception was thrown during execution in test generation
        try {
            float float7 = org.apache.commons.lang.math.NumberUtils.max(floatArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[52.0, 1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) '#', (float) 35, 0.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 35.0f + "'", float3 == 35.0f);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte12 = org.apache.commons.lang.math.NumberUtils.max(byteArray11);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(byteArray11, byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte22 = org.apache.commons.lang.math.NumberUtils.max(byteArray21);
        byte byte23 = org.apache.commons.lang.math.NumberUtils.max(byteArray21);
        byte byte24 = org.apache.commons.lang.math.NumberUtils.min(byteArray21);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.min(byteArray21);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(byteArray15, byteArray21);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte31 = org.apache.commons.lang.math.NumberUtils.max(byteArray30);
        byte[] byteArray32 = null;
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(byteArray32, byteArray39);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(byteArray39, byteArray45);
        byte byte47 = org.apache.commons.lang.math.NumberUtils.max(byteArray39);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(byteArray30, byteArray39);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray21, byteArray30);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray21);
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte56 = org.apache.commons.lang.math.NumberUtils.max(byteArray55);
        byte byte57 = org.apache.commons.lang.math.NumberUtils.max(byteArray55);
        byte byte58 = org.apache.commons.lang.math.NumberUtils.min(byteArray55);
        byte byte59 = org.apache.commons.lang.math.NumberUtils.min(byteArray55);
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte65 = org.apache.commons.lang.math.NumberUtils.max(byteArray64);
        byte byte66 = org.apache.commons.lang.math.NumberUtils.max(byteArray64);
        byte byte67 = org.apache.commons.lang.math.NumberUtils.min(byteArray64);
        byte byte68 = org.apache.commons.lang.math.NumberUtils.min(byteArray64);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(byteArray55, byteArray64);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray55);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 10 + "'", byte7 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 10 + "'", byte12 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 10 + "'", byte22 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 10 + "'", byte23 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) -1 + "'", byte24 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) -1 + "'", byte25 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 10 + "'", byte31 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 100 + "'", byte47 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 10 + "'", byte56 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) 10 + "'", byte57 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) -1 + "'", byte58 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte59 + "' != '" + (byte) -1 + "'", byte59 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 10 + "'", byte65 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte66 + "' != '" + (byte) 10 + "'", byte66 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) -1 + "'", byte67 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte68 + "' != '" + (byte) -1 + "'", byte68 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        int[] intArray5 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int6 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int7 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int8 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int[] intArray13 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray18 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(intArray13, intArray18);
        int int20 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int int21 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int[] intArray26 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(intArray26, intArray31);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray31);
        int int34 = org.apache.commons.lang.math.NumberUtils.min(intArray31);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray31);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray18);
        int int37 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int int38 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int[] intArray43 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(intArray43, intArray48);
        int int50 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int int51 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int[] intArray56 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(intArray56, intArray61);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(intArray48, intArray56);
        int int64 = org.apache.commons.lang.math.NumberUtils.min(intArray56);
        int int65 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        int int66 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        int int67 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray56);
        int int69 = org.apache.commons.lang.math.NumberUtils.min(intArray56);
        int int70 = org.apache.commons.lang.math.NumberUtils.min(intArray56);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long[] longArray4 = new long[] {};
        long[] longArray6 = new long[] { (byte) -1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray6);
        long long8 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        long long9 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray6);
        long[] longArray14 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray15 = new long[] {};
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray15);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(longArray6, longArray14);
        long long18 = org.apache.commons.lang.math.NumberUtils.min(longArray14);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 10, (short) 0, (short) 100);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) (byte) 10, (float) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) 10, (short) 10, (short) 100);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 1, (byte) 0, (byte) -1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) -1, (byte) -1, (byte) 100);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 52, 0.0f, 35.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray16 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray16);
        int[] intArray24 = null;
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray24);
        int int26 = org.apache.commons.lang.math.NumberUtils.min(intArray16);
        int[] intArray27 = null;
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray27);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (byte) 0, 10, 32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        int[] intArray6 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int7 = org.apache.commons.lang.math.NumberUtils.min(intArray6);
        int int8 = org.apache.commons.lang.math.NumberUtils.min(intArray6);
        int[] intArray15 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int16 = org.apache.commons.lang.math.NumberUtils.min(intArray15);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(intArray6, intArray15);
        int[] intArray22 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(intArray22, intArray27);
        int int29 = org.apache.commons.lang.math.NumberUtils.max(intArray27);
        int int30 = org.apache.commons.lang.math.NumberUtils.max(intArray27);
        int[] intArray35 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray40 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(intArray35, intArray40);
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(intArray27, intArray35);
        int int43 = org.apache.commons.lang.math.NumberUtils.min(intArray35);
        int int44 = org.apache.commons.lang.math.NumberUtils.max(intArray35);
        int int45 = org.apache.commons.lang.math.NumberUtils.max(intArray35);
        int int46 = org.apache.commons.lang.math.NumberUtils.min(intArray35);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(intArray6, intArray35);
        int[] intArray48 = null;
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(intArray6, intArray48);
        int[] intArray54 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray59 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(intArray54, intArray59);
        int int61 = org.apache.commons.lang.math.NumberUtils.max(intArray59);
        int int62 = org.apache.commons.lang.math.NumberUtils.max(intArray59);
        int[] intArray67 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray72 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(intArray67, intArray72);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(intArray59, intArray67);
        int int75 = org.apache.commons.lang.math.NumberUtils.min(intArray67);
        int int76 = org.apache.commons.lang.math.NumberUtils.max(intArray67);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(intArray6, intArray67);
        int int78 = org.apache.commons.lang.math.NumberUtils.min(intArray6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) ' ', (float) 1L, (float) '#');
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long[] longArray6 = new long[] {};
        long[] longArray8 = new long[] { (byte) -1 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(longArray6, longArray8);
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        long[] longArray13 = new long[] { 52L, (short) 1 };
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray13);
        long[] longArray15 = new long[] {};
        long[] longArray17 = new long[] { (byte) -1 };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray17);
        long[] longArray19 = new long[] {};
        long[] longArray21 = new long[] { (byte) -1 };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(longArray19, longArray21);
        long long23 = org.apache.commons.lang.math.NumberUtils.max(longArray21);
        long long24 = org.apache.commons.lang.math.NumberUtils.max(longArray21);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(longArray17, longArray21);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray21);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray8);
        long[] longArray28 = new long[] {};
        long[] longArray30 = new long[] { (byte) -1 };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray28, longArray30);
        long long32 = org.apache.commons.lang.math.NumberUtils.max(longArray30);
        long[] longArray37 = new long[] { 0, (short) 1, 52, (byte) 1 };
        long long38 = org.apache.commons.lang.math.NumberUtils.max(longArray37);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray30, longArray37);
        long long40 = org.apache.commons.lang.math.NumberUtils.min(longArray30);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray30);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        long[] longArray43 = new long[] {};
        long[] longArray45 = new long[] { (byte) -1 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(longArray43, longArray45);
        long[] longArray47 = new long[] {};
        long[] longArray49 = new long[] { (byte) -1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(longArray47, longArray49);
        long long51 = org.apache.commons.lang.math.NumberUtils.max(longArray49);
        long long52 = org.apache.commons.lang.math.NumberUtils.max(longArray49);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(longArray45, longArray49);
        long long54 = org.apache.commons.lang.math.NumberUtils.min(longArray45);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray45);
        long long56 = org.apache.commons.lang.math.NumberUtils.min(longArray45);
        long long57 = org.apache.commons.lang.math.NumberUtils.max(longArray45);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[0, 1, 52, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((-1.0f), 35.0f, (float) 10);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 35.0f + "'", float3 == 35.0f);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) 0, (byte) 10, (byte) 1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        long long2 = org.apache.commons.lang.math.NumberUtils.toLong("hi!", (long) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray5 = new float[] { 0, 1.0f, 100 };
        float[] floatArray7 = new float[] { (-1L) };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray7);
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(floatArray1, floatArray5);
        float[] floatArray13 = new float[] { 0, 1.0f, 100 };
        float[] floatArray15 = new float[] { (-1L) };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(floatArray13, floatArray15);
        float[] floatArray20 = new float[] { 0, ' ', 100.0f };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray20);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray1, floatArray15);
        float float23 = org.apache.commons.lang.math.NumberUtils.min(floatArray15);
        float[] floatArray28 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray29 = new float[] {};
        float[] floatArray33 = new float[] { 0, 1.0f, 100 };
        float[] floatArray35 = new float[] { (-1L) };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray33);
        float float38 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray33);
        float float40 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray33);
        float float42 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        float float43 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray33);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-1.0f) + "'", float23 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 100.0f + "'", float38 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 100.0f + "'", float40 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 100.0f + "'", float42 == 100.0f);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 100.0f + "'", float43 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double[] doubleArray37 = new double[] { 100L, 1.0f };
        double[] doubleArray41 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray41);
        double[] doubleArray45 = new double[] { 100L, 1.0f };
        double[] doubleArray49 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray45);
        double[] doubleArray54 = new double[] { 100L, 1.0f };
        double[] doubleArray58 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray54, doubleArray58);
        double[] doubleArray62 = new double[] { 100L, 1.0f };
        double[] doubleArray66 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray62, doubleArray66);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray62);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray62);
        double double70 = org.apache.commons.lang.math.NumberUtils.min(doubleArray62);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray62);
        double double72 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        java.lang.Class<?> wildcardClass73 = doubleArray27.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short short10 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray13 = new short[] { (short) -1, (short) -1 };
        short short14 = org.apache.commons.lang.math.NumberUtils.min(shortArray13);
        short[] shortArray18 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short19 = org.apache.commons.lang.math.NumberUtils.max(shortArray18);
        short[] shortArray23 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray13, shortArray18);
        short[] shortArray27 = new short[] { (short) 100 };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(shortArray13, shortArray27);
        short short29 = org.apache.commons.lang.math.NumberUtils.min(shortArray27);
        short short30 = org.apache.commons.lang.math.NumberUtils.max(shortArray27);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short35 = org.apache.commons.lang.math.NumberUtils.max(shortArray34);
        short[] shortArray39 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(shortArray34, shortArray39);
        short[] shortArray43 = new short[] { (short) -1, (short) -1 };
        short short44 = org.apache.commons.lang.math.NumberUtils.min(shortArray43);
        short[] shortArray48 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short49 = org.apache.commons.lang.math.NumberUtils.max(shortArray48);
        short[] shortArray53 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(shortArray48, shortArray53);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(shortArray43, shortArray48);
        short[] shortArray57 = new short[] { (short) 100 };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(shortArray43, shortArray57);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(shortArray34, shortArray57);
        short[] shortArray61 = new short[] { (byte) 1 };
        short short62 = org.apache.commons.lang.math.NumberUtils.min(shortArray61);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(shortArray57, shortArray61);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(shortArray27, shortArray61);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray61);
        short short66 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 10 + "'", short10 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) -1 + "'", short14 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 10 + "'", short19 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 100 + "'", short29 == (short) 100);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 100 + "'", short30 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 10 + "'", short35 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -1 + "'", short44 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 10 + "'", short49 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1]");
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 1 + "'", short62 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) 1 + "'", short66 == (short) 1);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float float23 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float[] floatArray24 = new float[] {};
        float[] floatArray28 = new float[] { 0, 1.0f, 100 };
        float[] floatArray30 = new float[] { (-1L) };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray30);
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(floatArray24, floatArray28);
        float[] floatArray36 = new float[] { 0, 1.0f, 100 };
        float[] floatArray38 = new float[] { (-1L) };
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray36, floatArray38);
        float[] floatArray43 = new float[] { 0, ' ', 100.0f };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray38, floatArray43);
        float float45 = org.apache.commons.lang.math.NumberUtils.min(floatArray38);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray38);
        float[] floatArray50 = new float[] { 0, 1.0f, 100 };
        float[] floatArray52 = new float[] { (-1L) };
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(floatArray50, floatArray52);
        float[] floatArray57 = new float[] { 0, 1.0f, 100 };
        float[] floatArray59 = new float[] { (-1L) };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray57, floatArray59);
        float float61 = org.apache.commons.lang.math.NumberUtils.max(floatArray57);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(floatArray50, floatArray57);
        float float63 = org.apache.commons.lang.math.NumberUtils.max(floatArray50);
        float[] floatArray64 = new float[] {};
        float[] floatArray68 = new float[] { 0, 1.0f, 100 };
        float[] floatArray70 = new float[] { (-1L) };
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(floatArray68, floatArray70);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(floatArray64, floatArray68);
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(floatArray50, floatArray68);
        float float74 = org.apache.commons.lang.math.NumberUtils.max(floatArray68);
        float float75 = org.apache.commons.lang.math.NumberUtils.min(floatArray68);
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray68);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray28);
        float float78 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float float79 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 100.0f + "'", float23 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-1.0f) + "'", float45 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 100.0f + "'", float61 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 100.0f + "'", float63 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 100.0f + "'", float74 == 100.0f);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        int int24 = org.apache.commons.lang.math.NumberUtils.max(intArray22);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray22);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray22);
        int int27 = org.apache.commons.lang.math.NumberUtils.min(intArray22);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 10.0f, (double) (-1.0f), (double) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte4 = org.apache.commons.lang.math.NumberUtils.max(byteArray3);
        byte[] byteArray5 = null;
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(byteArray5, byteArray12);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(byteArray12, byteArray18);
        byte byte20 = org.apache.commons.lang.math.NumberUtils.max(byteArray12);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray12);
        byte byte22 = org.apache.commons.lang.math.NumberUtils.min(byteArray3);
        byte byte23 = org.apache.commons.lang.math.NumberUtils.min(byteArray3);
        byte byte24 = org.apache.commons.lang.math.NumberUtils.min(byteArray3);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.min(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 10 + "'", byte4 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 100 + "'", byte20 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) -1 + "'", byte22 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) -1 + "'", byte23 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) -1 + "'", byte24 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) -1 + "'", byte25 == (byte) -1);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 1, (short) 1, (short) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        int[] intArray5 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int6 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int7 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int8 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int[] intArray13 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray18 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(intArray13, intArray18);
        int int20 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int int21 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int[] intArray26 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(intArray26, intArray31);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray31);
        int int34 = org.apache.commons.lang.math.NumberUtils.min(intArray31);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray31);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray18);
        int[] intArray42 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int43 = org.apache.commons.lang.math.NumberUtils.max(intArray42);
        int int44 = org.apache.commons.lang.math.NumberUtils.min(intArray42);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray42);
        int int46 = org.apache.commons.lang.math.NumberUtils.max(intArray42);
        int int47 = org.apache.commons.lang.math.NumberUtils.max(intArray42);
        int int48 = org.apache.commons.lang.math.NumberUtils.min(intArray42);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float float7 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float[] floatArray8 = new float[] {};
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(floatArray8, floatArray12);
        float[] floatArray20 = new float[] { 0, 1.0f, 100 };
        float[] floatArray22 = new float[] { (-1L) };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(floatArray20, floatArray22);
        float[] floatArray27 = new float[] { 0, ' ', 100.0f };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(floatArray22, floatArray27);
        float float29 = org.apache.commons.lang.math.NumberUtils.min(floatArray22);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray22);
        float[] floatArray34 = new float[] { 0, 1.0f, 100 };
        float[] floatArray36 = new float[] { (-1L) };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray34, floatArray36);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray34);
        float float39 = org.apache.commons.lang.math.NumberUtils.max(floatArray34);
        float[] floatArray40 = new float[] {};
        float[] floatArray44 = new float[] { 0, 1.0f, 100 };
        float[] floatArray46 = new float[] { (-1L) };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray46);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(floatArray40, floatArray44);
        float float49 = org.apache.commons.lang.math.NumberUtils.max(floatArray44);
        float[] floatArray53 = new float[] { 0, 1.0f, 100 };
        float[] floatArray55 = new float[] { (-1L) };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray53, floatArray55);
        float float57 = org.apache.commons.lang.math.NumberUtils.min(floatArray55);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray55);
        float[] floatArray59 = new float[] {};
        float[] floatArray63 = new float[] { 0, 1.0f, 100 };
        float[] floatArray65 = new float[] { (-1L) };
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(floatArray63, floatArray65);
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(floatArray59, floatArray63);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(floatArray55, floatArray63);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray34, floatArray55);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray34);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-1.0f) + "'", float7 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-1.0f) + "'", float29 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 100.0f + "'", float39 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 100.0f + "'", float49 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-1.0f) + "'", float57 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte10 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte11 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte[] byteArray12 = null;
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(byteArray12, byteArray19);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(byteArray19, byteArray25);
        byte byte27 = org.apache.commons.lang.math.NumberUtils.max(byteArray25);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray25);
        byte byte29 = org.apache.commons.lang.math.NumberUtils.max(byteArray25);
        byte byte30 = org.apache.commons.lang.math.NumberUtils.min(byteArray25);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 100 + "'", byte10 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 100 + "'", byte11 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 10 + "'", byte27 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 10 + "'", byte29 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) -1 + "'", byte30 == (byte) -1);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (short) 100, 32, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long long6 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long7 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long8 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long9 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long[] longArray13 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray14 = new long[] {};
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray14);
        long long16 = org.apache.commons.lang.math.NumberUtils.max(longArray13);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray13);
        long long18 = org.apache.commons.lang.math.NumberUtils.min(longArray13);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray13);
        long long20 = org.apache.commons.lang.math.NumberUtils.max(longArray13);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double double35 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double double36 = org.apache.commons.lang.math.NumberUtils.max(doubleArray27);
        double double37 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray10);
        double double17 = org.apache.commons.lang.math.NumberUtils.max(doubleArray10);
        double double18 = org.apache.commons.lang.math.NumberUtils.min(doubleArray10);
        double double19 = org.apache.commons.lang.math.NumberUtils.max(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long[] longArray9 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray10 = new long[] {};
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray10);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        long long13 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        long long14 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        long long15 = org.apache.commons.lang.math.NumberUtils.min(longArray9);
        long[] longArray19 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray20 = new long[] {};
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(longArray19, longArray20);
        long long22 = org.apache.commons.lang.math.NumberUtils.max(longArray19);
        long long23 = org.apache.commons.lang.math.NumberUtils.max(longArray19);
        long long24 = org.apache.commons.lang.math.NumberUtils.min(longArray19);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray19);
        long[] longArray29 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray30 = new long[] {};
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray29, longArray30);
        long long32 = org.apache.commons.lang.math.NumberUtils.max(longArray29);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(longArray19, longArray29);
        long[] longArray37 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray38 = new long[] {};
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray37, longArray38);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(longArray29, longArray37);
        long long41 = org.apache.commons.lang.math.NumberUtils.min(longArray29);
        long[] longArray42 = new long[] {};
        long[] longArray44 = new long[] { (byte) -1 };
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(longArray42, longArray44);
        long long46 = org.apache.commons.lang.math.NumberUtils.max(longArray44);
        long[] longArray49 = new long[] { 52L, (short) 1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(longArray44, longArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(longArray29, longArray44);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray29);
        long[] longArray53 = new long[] {};
        long[] longArray55 = new long[] { (byte) -1 };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(longArray53, longArray55);
        long[] longArray57 = new long[] {};
        long[] longArray59 = new long[] { (byte) -1 };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(longArray57, longArray59);
        long long61 = org.apache.commons.lang.math.NumberUtils.max(longArray59);
        long long62 = org.apache.commons.lang.math.NumberUtils.max(longArray59);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(longArray55, longArray59);
        long[] longArray67 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray68 = new long[] {};
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(longArray67, longArray68);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(longArray59, longArray67);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(longArray29, longArray59);
        long long72 = org.apache.commons.lang.math.NumberUtils.max(longArray29);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) (short) 0, (float) '#', 100.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) (short) 0, 35.0f, (float) ' ');
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 97.0f, (double) 0, (double) 1L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) 0, 100L, (long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        float float3 = org.apache.commons.lang.math.NumberUtils.min(0.0f, (float) 32, (float) 1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        short short5 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short short6 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        short short7 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        short short8 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) -1 + "'", short4 == (short) -1);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) -1 + "'", short6 == (short) -1);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -1 + "'", short7 == (short) -1);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) -1 + "'", short8 == (short) -1);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        int int24 = org.apache.commons.lang.math.NumberUtils.min(intArray22);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray22);
        int[] intArray30 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(intArray30, intArray35);
        int int37 = org.apache.commons.lang.math.NumberUtils.max(intArray35);
        int int38 = org.apache.commons.lang.math.NumberUtils.min(intArray35);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(intArray22, intArray35);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray22);
        int int41 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int42 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((-1), (int) 'a', (int) '4');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 35L, (float) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) '#', (double) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short short15 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short short16 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short short17 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        short short18 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) -1 + "'", short16 == (short) -1);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) -1 + "'", short17 == (short) -1);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) -1 + "'", short18 == (short) -1);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) (-1.0f), (double) (short) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long long6 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long7 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long8 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long long9 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long long10 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long[] longArray14 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray15 = new long[] {};
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray15);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        long long19 = org.apache.commons.lang.math.NumberUtils.min(longArray14);
        long long20 = org.apache.commons.lang.math.NumberUtils.min(longArray14);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray14);
        long long22 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 100.0f, (double) 32L, (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray17);
        int[] intArray30 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int31 = org.apache.commons.lang.math.NumberUtils.max(intArray30);
        int int32 = org.apache.commons.lang.math.NumberUtils.max(intArray30);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray30);
        int int34 = org.apache.commons.lang.math.NumberUtils.max(intArray30);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray30);
        int int36 = org.apache.commons.lang.math.NumberUtils.min(intArray30);
        int int37 = org.apache.commons.lang.math.NumberUtils.min(intArray30);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) 1, (long) (short) -1, (long) (short) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 1, (float) 97L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 1, (float) 97L, (float) (short) 1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 52.0f, (double) (-1L), (double) 1.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (short) 10, (int) (short) -1, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long[] longArray9 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray10 = new long[] {};
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray10);
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray10);
        long[] longArray16 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray17 = new long[] {};
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(longArray16, longArray17);
        long long19 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long20 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long21 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long22 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        long long23 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        long long24 = org.apache.commons.lang.math.NumberUtils.min(longArray16);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray16);
        long[] longArray29 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray30 = new long[] {};
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray29, longArray30);
        long long32 = org.apache.commons.lang.math.NumberUtils.min(longArray29);
        long long33 = org.apache.commons.lang.math.NumberUtils.min(longArray29);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(longArray16, longArray29);
        long long35 = org.apache.commons.lang.math.NumberUtils.max(longArray16);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short short10 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short[] shortArray13 = new short[] { (short) -1, (short) -1 };
        short short14 = org.apache.commons.lang.math.NumberUtils.min(shortArray13);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray13);
        short short16 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short17 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 1 + "'", short10 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) -1 + "'", short14 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 1 + "'", short16 == (short) 1);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 1 + "'", short17 == (short) 1);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray13);
        byte[] byteArray19 = null;
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(byteArray19, byteArray26);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(byteArray26, byteArray32);
        byte byte34 = org.apache.commons.lang.math.NumberUtils.max(byteArray26);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray26);
        byte[] byteArray36 = null;
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(byteArray36, byteArray43);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray36);
        byte byte46 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) -1 + "'", byte16 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 100 + "'", byte34 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + byte46 + "' != '" + (byte) -1 + "'", byte46 == (byte) -1);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int[] intArray15 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray20 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(intArray15, intArray20);
        int int22 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray20);
        int int24 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray29 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray29, intArray34);
        int int36 = org.apache.commons.lang.math.NumberUtils.max(intArray34);
        int int37 = org.apache.commons.lang.math.NumberUtils.min(intArray34);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray34);
        int[] intArray43 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(intArray43, intArray48);
        int int50 = org.apache.commons.lang.math.NumberUtils.min(intArray48);
        int[] intArray55 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray60 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(intArray55, intArray60);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(intArray48, intArray55);
        int[] intArray67 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray72 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(intArray67, intArray72);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(intArray55, intArray67);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray55);
        int int76 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 'a', (double) (short) 10, (double) 10.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double[] doubleArray37 = new double[] { 100L, 1.0f };
        double[] doubleArray41 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray41);
        double[] doubleArray45 = new double[] { 100L, 1.0f };
        double[] doubleArray49 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray41, doubleArray45);
        double double52 = org.apache.commons.lang.math.NumberUtils.min(doubleArray41);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray41);
        double double54 = org.apache.commons.lang.math.NumberUtils.min(doubleArray41);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray58 = new double[] { 100L, 1.0f };
        double[] doubleArray62 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray62);
        double[] doubleArray66 = new double[] { 100L, 1.0f };
        double[] doubleArray70 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray66, doubleArray70);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray62, doubleArray66);
        double double73 = org.apache.commons.lang.math.NumberUtils.min(doubleArray66);
        double double74 = org.apache.commons.lang.math.NumberUtils.max(doubleArray66);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray55, doubleArray66);
        double[] doubleArray76 = new double[] {};
        double[] doubleArray79 = new double[] { 100L, 1.0f };
        double[] doubleArray83 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean84 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray79, doubleArray83);
        double[] doubleArray87 = new double[] { 100L, 1.0f };
        double[] doubleArray91 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray87, doubleArray91);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray83, doubleArray87);
        double double94 = org.apache.commons.lang.math.NumberUtils.min(doubleArray87);
        double double95 = org.apache.commons.lang.math.NumberUtils.max(doubleArray87);
        boolean boolean96 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray76, doubleArray87);
        boolean boolean97 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray66, doubleArray87);
        boolean boolean98 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray41, doubleArray66);
        double double99 = org.apache.commons.lang.math.NumberUtils.max(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 100.0d + "'", double74 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 100.0d + "'", double95 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 100.0d + "'", double99 == 100.0d);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short short18 = org.apache.commons.lang.math.NumberUtils.max(shortArray2);
        short[] shortArray21 = new short[] { (short) -1, (short) -1 };
        short short22 = org.apache.commons.lang.math.NumberUtils.min(shortArray21);
        short[] shortArray26 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short27 = org.apache.commons.lang.math.NumberUtils.max(shortArray26);
        short[] shortArray31 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(shortArray26, shortArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray26);
        short[] shortArray35 = new short[] { (short) 100 };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray21);
        short short38 = org.apache.commons.lang.math.NumberUtils.max(shortArray21);
        short[] shortArray41 = new short[] { (short) -1, (short) -1 };
        short short42 = org.apache.commons.lang.math.NumberUtils.min(shortArray41);
        short[] shortArray46 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short47 = org.apache.commons.lang.math.NumberUtils.max(shortArray46);
        short[] shortArray51 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(shortArray46, shortArray51);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(shortArray41, shortArray46);
        short[] shortArray55 = new short[] { (short) 100 };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(shortArray41, shortArray55);
        short short57 = org.apache.commons.lang.math.NumberUtils.min(shortArray55);
        short short58 = org.apache.commons.lang.math.NumberUtils.max(shortArray55);
        short short59 = org.apache.commons.lang.math.NumberUtils.min(shortArray55);
        short short60 = org.apache.commons.lang.math.NumberUtils.min(shortArray55);
        short[] shortArray64 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short65 = org.apache.commons.lang.math.NumberUtils.max(shortArray64);
        short[] shortArray69 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(shortArray64, shortArray69);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(shortArray55, shortArray64);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(shortArray21, shortArray55);
        short short73 = org.apache.commons.lang.math.NumberUtils.min(shortArray55);
        short short74 = org.apache.commons.lang.math.NumberUtils.max(shortArray55);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) -1 + "'", short18 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -1 + "'", short22 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 10 + "'", short27 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) -1 + "'", short38 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) -1 + "'", short42 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 10 + "'", short47 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) 100 + "'", short57 == (short) 100);
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) 100 + "'", short58 == (short) 100);
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 100 + "'", short59 == (short) 100);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 100 + "'", short60 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 10 + "'", short65 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) 100 + "'", short73 == (short) 100);
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) 100 + "'", short74 == (short) 100);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 0, (short) 10, (short) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (byte) 100, (int) (byte) 10, (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray7 = new long[] { 52L, (short) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray7);
        long[] longArray9 = new long[] {};
        long[] longArray11 = new long[] { (byte) -1 };
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray11);
        long[] longArray13 = new long[] {};
        long[] longArray15 = new long[] { (byte) -1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray15);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(longArray11, longArray15);
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray15);
        long long21 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long[] longArray25 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray26 = new long[] {};
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray26);
        long long28 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long long30 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long[] longArray31 = new long[] {};
        long[] longArray33 = new long[] { (byte) -1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(longArray31, longArray33);
        long long35 = org.apache.commons.lang.math.NumberUtils.max(longArray33);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray33);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray25);
        long long38 = org.apache.commons.lang.math.NumberUtils.min(longArray25);
        long[] longArray42 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray43 = new long[] {};
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(longArray42, longArray43);
        long[] longArray45 = null;
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(longArray43, longArray45);
        long[] longArray47 = new long[] {};
        long[] longArray49 = new long[] { (byte) -1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(longArray47, longArray49);
        long long51 = org.apache.commons.lang.math.NumberUtils.max(longArray49);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(longArray43, longArray49);
        long long53 = org.apache.commons.lang.math.NumberUtils.max(longArray49);
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray49);
        long long55 = org.apache.commons.lang.math.NumberUtils.min(longArray49);
        long long56 = org.apache.commons.lang.math.NumberUtils.max(longArray49);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray9 = new long[] { 0, (short) 1, 52, (byte) 1 };
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray9);
        long long12 = org.apache.commons.lang.math.NumberUtils.min(longArray9);
        long[] longArray13 = new long[] {};
        long[] longArray15 = new long[] { (byte) -1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray15);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long[] longArray20 = new long[] { 52L, (short) 1 };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray20);
        long long22 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        long long23 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray20);
        long[] longArray31 = new long[] { 0, 52, 32, 32L, (short) 10, 1L };
        long long32 = org.apache.commons.lang.math.NumberUtils.max(longArray31);
        long long33 = org.apache.commons.lang.math.NumberUtils.max(longArray31);
        long long34 = org.apache.commons.lang.math.NumberUtils.min(longArray31);
        long[] longArray38 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray39 = new long[] {};
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(longArray38, longArray39);
        long long41 = org.apache.commons.lang.math.NumberUtils.max(longArray38);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray38);
        long long43 = org.apache.commons.lang.math.NumberUtils.max(longArray38);
        long long44 = org.apache.commons.lang.math.NumberUtils.min(longArray38);
        long[] longArray48 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray49 = new long[] {};
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(longArray48, longArray49);
        long long51 = org.apache.commons.lang.math.NumberUtils.max(longArray48);
        long long52 = org.apache.commons.lang.math.NumberUtils.max(longArray48);
        long long53 = org.apache.commons.lang.math.NumberUtils.min(longArray48);
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(longArray38, longArray48);
        long[] longArray58 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray59 = new long[] {};
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(longArray58, longArray59);
        long long61 = org.apache.commons.lang.math.NumberUtils.max(longArray58);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(longArray48, longArray58);
        long[] longArray66 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray67 = new long[] {};
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(longArray66, longArray67);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(longArray58, longArray66);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(longArray31, longArray66);
        long[] longArray74 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray75 = new long[] {};
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(longArray74, longArray75);
        long long77 = org.apache.commons.lang.math.NumberUtils.max(longArray74);
        long long78 = org.apache.commons.lang.math.NumberUtils.max(longArray74);
        long long79 = org.apache.commons.lang.math.NumberUtils.max(longArray74);
        long long80 = org.apache.commons.lang.math.NumberUtils.min(longArray74);
        long[] longArray84 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray85 = new long[] {};
        boolean boolean86 = org.apache.commons.lang.math.NumberUtils.equals(longArray84, longArray85);
        long long87 = org.apache.commons.lang.math.NumberUtils.max(longArray84);
        long long88 = org.apache.commons.lang.math.NumberUtils.max(longArray84);
        long long89 = org.apache.commons.lang.math.NumberUtils.min(longArray84);
        boolean boolean90 = org.apache.commons.lang.math.NumberUtils.equals(longArray74, longArray84);
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(longArray66, longArray74);
        long long92 = org.apache.commons.lang.math.NumberUtils.min(longArray74);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(longArray20, longArray74);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 52, 1]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[0, 52, 32, 32, 10, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 52L + "'", long51 == 52L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 52L + "'", long78 == 52L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 52L + "'", long79 == 52L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertNotNull(longArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray84), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 52L + "'", long87 == 52L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 52L + "'", long88 == 52L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) ' ', (double) 100L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, 1.0f, 100 };
        float[] floatArray12 = new float[] { (-1L) };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray12);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float16 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float float17 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float float18 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float[] floatArray22 = new float[] { 0, 1.0f, 100 };
        float[] floatArray24 = new float[] { (-1L) };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray22, floatArray24);
        float float26 = org.apache.commons.lang.math.NumberUtils.max(floatArray22);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray22);
        float float28 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-1.0f) + "'", float16 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-1.0f) + "'", float17 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 100.0f + "'", float26 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-1.0f) + "'", float28 == (-1.0f));
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray10);
        double double17 = org.apache.commons.lang.math.NumberUtils.min(doubleArray6);
        double double18 = org.apache.commons.lang.math.NumberUtils.max(doubleArray6);
        double[] doubleArray21 = new double[] { 100L, 1.0f };
        double[] doubleArray25 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray21, doubleArray25);
        double[] doubleArray29 = new double[] { 100L, 1.0f };
        double[] doubleArray33 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray29, doubleArray33);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray25, doubleArray29);
        double[] doubleArray38 = new double[] { 100L, 1.0f };
        double[] doubleArray42 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray42);
        double[] doubleArray46 = new double[] { 100L, 1.0f };
        double[] doubleArray50 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray46, doubleArray50);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray46);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray29, doubleArray46);
        double double54 = org.apache.commons.lang.math.NumberUtils.max(doubleArray46);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray46);
        double double56 = org.apache.commons.lang.math.NumberUtils.max(doubleArray6);
        double double57 = org.apache.commons.lang.math.NumberUtils.min(doubleArray6);
        double double58 = org.apache.commons.lang.math.NumberUtils.max(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) 1, (byte) -1, (byte) 100);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 32, (float) (-1), (float) 100);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) ' ', (long) (short) 0, (long) (short) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) '#', (int) (short) 1, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare(0.0d, (double) 97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 10, (short) (byte) -1, (short) 0);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 1, (-1.0f), 35.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 35.0f + "'", float3 == 35.0f);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) 10L, (double) 35.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        float float3 = org.apache.commons.lang.math.NumberUtils.max(97.0f, (float) 10L, (float) (byte) 10);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(0, (int) (byte) 1, (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) 100, (byte) 100, (byte) 10);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        double[] doubleArray1 = new double[] { 32 };
        double[] doubleArray4 = new double[] { 100L, 1.0f };
        double[] doubleArray8 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray4, doubleArray8);
        double[] doubleArray12 = new double[] { 100L, 1.0f };
        double[] doubleArray16 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray12, doubleArray16);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray8, doubleArray12);
        double[] doubleArray21 = new double[] { 100L, 1.0f };
        double[] doubleArray25 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray21, doubleArray25);
        double[] doubleArray29 = new double[] { 100L, 1.0f };
        double[] doubleArray33 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray29, doubleArray33);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray21, doubleArray29);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray12, doubleArray29);
        double double37 = org.apache.commons.lang.math.NumberUtils.max(doubleArray29);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray1, doubleArray29);
        double double39 = org.apache.commons.lang.math.NumberUtils.max(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        float float3 = org.apache.commons.lang.math.NumberUtils.max(32.0f, (float) (short) 1, (float) ' ');
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 32.0f + "'", float3 == 32.0f);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        double double3 = org.apache.commons.lang.math.NumberUtils.max(0.0d, (double) 10, (double) 52);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray7 = new long[] { 52L, (short) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray7);
        long long9 = org.apache.commons.lang.math.NumberUtils.min(longArray7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float float9 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float[] floatArray14 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray15 = new float[] {};
        float[] floatArray19 = new float[] { 0, 1.0f, 100 };
        float[] floatArray21 = new float[] { (-1L) };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray19);
        float float24 = org.apache.commons.lang.math.NumberUtils.max(floatArray19);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float26 = org.apache.commons.lang.math.NumberUtils.max(floatArray19);
        float[] floatArray30 = new float[] { 0, 1.0f, 100 };
        float[] floatArray32 = new float[] { (-1L) };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray32);
        float[] floatArray37 = new float[] { 0, ' ', 100.0f };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray32, floatArray37);
        float[] floatArray39 = new float[] {};
        float[] floatArray43 = new float[] { 0, 1.0f, 100 };
        float[] floatArray45 = new float[] { (-1L) };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray43, floatArray45);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray39, floatArray43);
        float[] floatArray51 = new float[] { 0, 1.0f, 100 };
        float[] floatArray53 = new float[] { (-1L) };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray51, floatArray53);
        float[] floatArray58 = new float[] { 0, ' ', 100.0f };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(floatArray53, floatArray58);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray39, floatArray53);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(floatArray37, floatArray53);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray53);
        float[] floatArray66 = new float[] { 0, 1.0f, 100 };
        float[] floatArray68 = new float[] { (-1L) };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray66, floatArray68);
        float[] floatArray73 = new float[] { 0, ' ', 100.0f };
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(floatArray68, floatArray73);
        float float75 = org.apache.commons.lang.math.NumberUtils.min(floatArray73);
        float float76 = org.apache.commons.lang.math.NumberUtils.min(floatArray73);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray73);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray19);
        float[] floatArray82 = new float[] { 0, 1.0f, 100 };
        float[] floatArray84 = new float[] { (-1L) };
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(floatArray82, floatArray84);
        float[] floatArray89 = new float[] { 0, 1.0f, 100 };
        float[] floatArray91 = new float[] { (-1L) };
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(floatArray89, floatArray91);
        float float93 = org.apache.commons.lang.math.NumberUtils.max(floatArray89);
        boolean boolean94 = org.apache.commons.lang.math.NumberUtils.equals(floatArray82, floatArray89);
        boolean boolean95 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray89);
        float float96 = org.apache.commons.lang.math.NumberUtils.max(floatArray89);
        float float97 = org.apache.commons.lang.math.NumberUtils.min(floatArray89);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 100.0f + "'", float9 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 100.0f + "'", float24 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 100.0f + "'", float26 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray91), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 100.0f + "'", float93 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + 100.0f + "'", float96 == 100.0f);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + 0.0f + "'", float97 == 0.0f);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        float[] floatArray4 = new float[] { 97, 0, (short) 100, (byte) 100 };
        float float5 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float float6 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[97.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 100.0f + "'", float6 == 100.0f);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) 1, (short) 10, (short) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) (byte) 1, (short) 10, (short) (byte) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 97L, 32.0d, (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float[] floatArray26 = new float[] { 0, 1.0f, 100 };
        float[] floatArray28 = new float[] { (-1L) };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray28);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray26);
        float[] floatArray31 = new float[] {};
        float[] floatArray35 = new float[] { 0, 1.0f, 100 };
        float[] floatArray37 = new float[] { (-1L) };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray35, floatArray37);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray31, floatArray35);
        float[] floatArray43 = new float[] { 0, 1.0f, 100 };
        float[] floatArray45 = new float[] { (-1L) };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray43, floatArray45);
        float[] floatArray50 = new float[] { 0, ' ', 100.0f };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(floatArray45, floatArray50);
        float float52 = org.apache.commons.lang.math.NumberUtils.min(floatArray45);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(floatArray35, floatArray45);
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray45);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-1.0f) + "'", float52 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) (-1.0f), 35.0d, (double) 97);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte12 = org.apache.commons.lang.math.NumberUtils.max(byteArray11);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(byteArray11, byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte22 = org.apache.commons.lang.math.NumberUtils.max(byteArray21);
        byte byte23 = org.apache.commons.lang.math.NumberUtils.max(byteArray21);
        byte byte24 = org.apache.commons.lang.math.NumberUtils.min(byteArray21);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.min(byteArray21);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(byteArray15, byteArray21);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte31 = org.apache.commons.lang.math.NumberUtils.max(byteArray30);
        byte[] byteArray32 = null;
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(byteArray32, byteArray39);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(byteArray39, byteArray45);
        byte byte47 = org.apache.commons.lang.math.NumberUtils.max(byteArray39);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(byteArray30, byteArray39);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray21, byteArray30);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray21);
        byte byte51 = org.apache.commons.lang.math.NumberUtils.max(byteArray21);
        byte byte52 = org.apache.commons.lang.math.NumberUtils.min(byteArray21);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 10 + "'", byte7 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 10 + "'", byte12 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 10 + "'", byte22 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 10 + "'", byte23 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) -1 + "'", byte24 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) -1 + "'", byte25 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 10 + "'", byte31 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 100 + "'", byte47 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + byte51 + "' != '" + (byte) 10 + "'", byte51 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte52 + "' != '" + (byte) -1 + "'", byte52 == (byte) -1);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, 1.0f, 100 };
        float[] floatArray12 = new float[] { (-1L) };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray12);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float16 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float float17 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float[] floatArray21 = new float[] { 0, 1.0f, 100 };
        float[] floatArray23 = new float[] { (-1L) };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray23);
        float[] floatArray28 = new float[] { 0, 1.0f, 100 };
        float[] floatArray30 = new float[] { (-1L) };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray30);
        float float32 = org.apache.commons.lang.math.NumberUtils.max(floatArray28);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray23, floatArray28);
        float float34 = org.apache.commons.lang.math.NumberUtils.min(floatArray23);
        float float35 = org.apache.commons.lang.math.NumberUtils.max(floatArray23);
        float float36 = org.apache.commons.lang.math.NumberUtils.min(floatArray23);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray23);
        float float38 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-1.0f) + "'", float16 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-1.0f) + "'", float17 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 100.0f + "'", float32 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-1.0f) + "'", float34 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-1.0f) + "'", float35 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-1.0f) + "'", float36 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-1.0f) + "'", float38 == (-1.0f));
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float[] floatArray26 = new float[] { 0, 1.0f, 100 };
        float[] floatArray28 = new float[] { (-1L) };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray28);
        float[] floatArray33 = new float[] { 0, ' ', 100.0f };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray33);
        float float35 = org.apache.commons.lang.math.NumberUtils.min(floatArray33);
        float float36 = org.apache.commons.lang.math.NumberUtils.min(floatArray33);
        float float37 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        float[] floatArray41 = new float[] { 0, 1.0f, 100 };
        float[] floatArray43 = new float[] { (-1L) };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray43);
        float float45 = org.apache.commons.lang.math.NumberUtils.max(floatArray41);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray41);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray41);
        float float48 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        float[] floatArray49 = new float[] {};
        float[] floatArray53 = new float[] { 0, 1.0f, 100 };
        float[] floatArray55 = new float[] { (-1L) };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray53, floatArray55);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray49, floatArray53);
        float[] floatArray61 = new float[] { 0, 1.0f, 100 };
        float[] floatArray63 = new float[] { (-1L) };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(floatArray61, floatArray63);
        float[] floatArray68 = new float[] { 0, ' ', 100.0f };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray63, floatArray68);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(floatArray49, floatArray63);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray63);
        float[] floatArray75 = new float[] { 0, 1.0f, 100 };
        float[] floatArray77 = new float[] { (-1L) };
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(floatArray75, floatArray77);
        float[] floatArray82 = new float[] { 0, 1.0f, 100 };
        float[] floatArray84 = new float[] { (-1L) };
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(floatArray82, floatArray84);
        float float86 = org.apache.commons.lang.math.NumberUtils.max(floatArray82);
        boolean boolean87 = org.apache.commons.lang.math.NumberUtils.equals(floatArray75, floatArray82);
        float float88 = org.apache.commons.lang.math.NumberUtils.max(floatArray75);
        float[] floatArray89 = new float[] {};
        float[] floatArray93 = new float[] { 0, 1.0f, 100 };
        float[] floatArray95 = new float[] { (-1L) };
        boolean boolean96 = org.apache.commons.lang.math.NumberUtils.equals(floatArray93, floatArray95);
        boolean boolean97 = org.apache.commons.lang.math.NumberUtils.equals(floatArray89, floatArray93);
        boolean boolean98 = org.apache.commons.lang.math.NumberUtils.equals(floatArray75, floatArray93);
        boolean boolean99 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray75);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 100.0f + "'", float37 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 100.0f + "'", float45 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-1.0f) + "'", float48 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 100.0f + "'", float86 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 100.0f + "'", float88 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[]");
        org.junit.Assert.assertNotNull(floatArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray93), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray95), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        int int24 = org.apache.commons.lang.math.NumberUtils.min(intArray22);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray22);
        int[] intArray30 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(intArray30, intArray35);
        int int37 = org.apache.commons.lang.math.NumberUtils.max(intArray35);
        int int38 = org.apache.commons.lang.math.NumberUtils.min(intArray35);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(intArray22, intArray35);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray22);
        int[] intArray45 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(intArray45, intArray50);
        int int52 = org.apache.commons.lang.math.NumberUtils.max(intArray50);
        int int53 = org.apache.commons.lang.math.NumberUtils.max(intArray50);
        int[] intArray58 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(intArray58, intArray63);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(intArray50, intArray58);
        int int66 = org.apache.commons.lang.math.NumberUtils.min(intArray58);
        int[] intArray71 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(intArray71, intArray76);
        int[] intArray82 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray87 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(intArray82, intArray87);
        int int89 = org.apache.commons.lang.math.NumberUtils.min(intArray87);
        boolean boolean90 = org.apache.commons.lang.math.NumberUtils.equals(intArray76, intArray87);
        int int91 = org.apache.commons.lang.math.NumberUtils.min(intArray76);
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(intArray58, intArray76);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray58);
        int int94 = org.apache.commons.lang.math.NumberUtils.max(intArray58);
        int int95 = org.apache.commons.lang.math.NumberUtils.max(intArray58);
        int int96 = org.apache.commons.lang.math.NumberUtils.min(intArray58);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) (byte) -1, (double) 35L, (double) 52L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short short7 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short short8 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray12 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short13 = org.apache.commons.lang.math.NumberUtils.max(shortArray12);
        short[] shortArray17 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray17);
        short[] shortArray20 = new short[] { (byte) 1 };
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        short[] shortArray23 = new short[] { (short) -1 };
        short short24 = org.apache.commons.lang.math.NumberUtils.max(shortArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray20, shortArray23);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(shortArray17, shortArray20);
        short short27 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short28 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray20);
        short short30 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short short31 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 1 + "'", short7 == (short) 1);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 1 + "'", short8 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 10 + "'", short13 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 1 + "'", short21 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) -1 + "'", short24 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 1 + "'", short27 == (short) 1);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1 + "'", short28 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 1 + "'", short30 == (short) 1);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 1 + "'", short31 == (short) 1);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        float float3 = org.apache.commons.lang.math.NumberUtils.max(35.0f, (float) (short) 1, 100.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray10 = null;
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(byteArray10, byteArray17);
        byte byte19 = org.apache.commons.lang.math.NumberUtils.min(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte24 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(byteArray17, byteArray23);
        byte byte26 = org.apache.commons.lang.math.NumberUtils.min(byteArray23);
        byte byte27 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray23);
        byte byte29 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray30 = null;
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(byteArray30, byteArray37);
        byte byte39 = org.apache.commons.lang.math.NumberUtils.min(byteArray37);
        byte byte40 = org.apache.commons.lang.math.NumberUtils.max(byteArray37);
        byte byte41 = org.apache.commons.lang.math.NumberUtils.max(byteArray37);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte47 = org.apache.commons.lang.math.NumberUtils.max(byteArray46);
        byte byte48 = org.apache.commons.lang.math.NumberUtils.max(byteArray46);
        byte byte49 = org.apache.commons.lang.math.NumberUtils.min(byteArray46);
        byte byte50 = org.apache.commons.lang.math.NumberUtils.min(byteArray46);
        byte byte51 = org.apache.commons.lang.math.NumberUtils.min(byteArray46);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(byteArray37, byteArray46);
        byte byte53 = org.apache.commons.lang.math.NumberUtils.max(byteArray46);
        byte byte54 = org.apache.commons.lang.math.NumberUtils.max(byteArray46);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray46);
        byte byte56 = org.apache.commons.lang.math.NumberUtils.min(byteArray46);
        byte byte57 = org.apache.commons.lang.math.NumberUtils.min(byteArray46);
        byte byte58 = org.apache.commons.lang.math.NumberUtils.max(byteArray46);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) -1 + "'", byte19 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 10 + "'", byte24 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) -1 + "'", byte26 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 10 + "'", byte27 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) -1 + "'", byte29 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) -1 + "'", byte39 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) 100 + "'", byte40 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 100 + "'", byte41 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 10 + "'", byte47 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 10 + "'", byte48 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) -1 + "'", byte49 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) -1 + "'", byte50 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte51 + "' != '" + (byte) -1 + "'", byte51 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) 10 + "'", byte53 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte54 + "' != '" + (byte) 10 + "'", byte54 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) -1 + "'", byte56 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) -1 + "'", byte57 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) 10 + "'", byte58 == (byte) 10);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        int[] intArray6 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int7 = org.apache.commons.lang.math.NumberUtils.min(intArray6);
        int int8 = org.apache.commons.lang.math.NumberUtils.min(intArray6);
        int[] intArray15 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int16 = org.apache.commons.lang.math.NumberUtils.min(intArray15);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(intArray6, intArray15);
        int int18 = org.apache.commons.lang.math.NumberUtils.min(intArray15);
        int int19 = org.apache.commons.lang.math.NumberUtils.max(intArray15);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 100, (short) (byte) 10, (short) (byte) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) 1, (short) 10, (short) -1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float[] floatArray26 = new float[] { 0, 1.0f, 100 };
        float[] floatArray28 = new float[] { (-1L) };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray28);
        float[] floatArray33 = new float[] { 0, ' ', 100.0f };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray33);
        float float35 = org.apache.commons.lang.math.NumberUtils.min(floatArray33);
        float float36 = org.apache.commons.lang.math.NumberUtils.min(floatArray33);
        float float37 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        float[] floatArray41 = new float[] { 0, 1.0f, 100 };
        float[] floatArray43 = new float[] { (-1L) };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray43);
        float float45 = org.apache.commons.lang.math.NumberUtils.max(floatArray41);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray41);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray41);
        float[] floatArray51 = new float[] { 0, 1.0f, 100 };
        float[] floatArray53 = new float[] { (-1L) };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray51, floatArray53);
        float float55 = org.apache.commons.lang.math.NumberUtils.max(floatArray51);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray51);
        float float57 = org.apache.commons.lang.math.NumberUtils.min(floatArray41);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 100.0f + "'", float37 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 100.0f + "'", float45 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 100.0f + "'", float55 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(35, (int) ' ', 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (short) 1, (int) (short) 100, (int) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 52, (float) (byte) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short short10 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short11 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short short12 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short13 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 1 + "'", short10 == (short) 1);
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 10 + "'", short11 == (short) 10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 1 + "'", short12 == (short) 1);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 10 + "'", short13 == (short) 10);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) (byte) 0, 0L, (long) (short) -1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 35L, (float) (short) 0, (float) '#');
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (byte) 1, (int) (short) 1, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        long long3 = org.apache.commons.lang.math.NumberUtils.max(0L, (long) (short) -1, (long) (short) 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 100, (byte) -1, (byte) -1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) ' ', (int) '4', (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) 52L, (double) 35.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short[] shortArray8 = new short[] { (byte) 1 };
        short short9 = org.apache.commons.lang.math.NumberUtils.min(shortArray8);
        short[] shortArray11 = new short[] { (short) -1 };
        short short12 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray8, shortArray11);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray11);
        short[] shortArray18 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short19 = org.apache.commons.lang.math.NumberUtils.max(shortArray18);
        short short20 = org.apache.commons.lang.math.NumberUtils.min(shortArray18);
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray18);
        short short22 = org.apache.commons.lang.math.NumberUtils.min(shortArray18);
        short short23 = org.apache.commons.lang.math.NumberUtils.max(shortArray18);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray18);
        short[] shortArray27 = new short[] { (short) -1, (short) -1 };
        short short28 = org.apache.commons.lang.math.NumberUtils.min(shortArray27);
        short[] shortArray32 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short33 = org.apache.commons.lang.math.NumberUtils.max(shortArray32);
        short[] shortArray37 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(shortArray32, shortArray37);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(shortArray27, shortArray32);
        short[] shortArray41 = new short[] { (short) 100 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(shortArray27, shortArray41);
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray27);
        short short44 = org.apache.commons.lang.math.NumberUtils.max(shortArray27);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 1 + "'", short9 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) -1 + "'", short12 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 10 + "'", short19 == (short) 10);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 1 + "'", short20 == (short) 1);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 1 + "'", short21 == (short) 1);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 1 + "'", short22 == (short) 1);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 10 + "'", short23 == (short) 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -1 + "'", short28 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 10 + "'", short33 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -1 + "'", short44 == (short) -1);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        int int3 = org.apache.commons.lang.math.NumberUtils.min(10, (int) '#', (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        float[] floatArray0 = null;
        float[] floatArray5 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray6 = new float[] {};
        float[] floatArray10 = new float[] { 0, 1.0f, 100 };
        float[] floatArray12 = new float[] { (-1L) };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(floatArray6, floatArray10);
        float float15 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float17 = org.apache.commons.lang.math.NumberUtils.max(floatArray10);
        float[] floatArray18 = new float[] {};
        float[] floatArray22 = new float[] { 0, 1.0f, 100 };
        float[] floatArray24 = new float[] { (-1L) };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray22, floatArray24);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(floatArray18, floatArray22);
        float[] floatArray30 = new float[] { 0, 1.0f, 100 };
        float[] floatArray32 = new float[] { (-1L) };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray32);
        float[] floatArray37 = new float[] { 0, ' ', 100.0f };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray32, floatArray37);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray18, floatArray32);
        float float40 = org.apache.commons.lang.math.NumberUtils.min(floatArray32);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(floatArray10, floatArray32);
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray32);
        // The following exception was thrown during execution in test generation
        try {
            float float43 = org.apache.commons.lang.math.NumberUtils.max(floatArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 100.0f + "'", float15 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 100.0f + "'", float17 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float[] floatArray26 = new float[] { 0, 1.0f, 100 };
        float[] floatArray28 = new float[] { (-1L) };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray28);
        float[] floatArray33 = new float[] { 0, 1.0f, 100 };
        float[] floatArray35 = new float[] { (-1L) };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray35);
        float float37 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray33);
        float float39 = org.apache.commons.lang.math.NumberUtils.max(floatArray26);
        float[] floatArray40 = new float[] {};
        float[] floatArray44 = new float[] { 0, 1.0f, 100 };
        float[] floatArray46 = new float[] { (-1L) };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray46);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(floatArray40, floatArray44);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray44);
        float float50 = org.apache.commons.lang.math.NumberUtils.max(floatArray44);
        float float51 = org.apache.commons.lang.math.NumberUtils.min(floatArray44);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray44);
        float float53 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float float54 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 100.0f + "'", float37 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 100.0f + "'", float39 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 100.0f + "'", float50 == 100.0f);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 100.0f + "'", float53 == 100.0f);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 100.0f + "'", float54 == 100.0f);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray13);
        java.lang.Class<?> wildcardClass19 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) -1 + "'", byte16 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short[] shortArray12 = new short[] { (short) -1, (short) -1 };
        short short13 = org.apache.commons.lang.math.NumberUtils.min(shortArray12);
        short[] shortArray17 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short18 = org.apache.commons.lang.math.NumberUtils.max(shortArray17);
        short[] shortArray22 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(shortArray17, shortArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray17);
        short[] shortArray26 = new short[] { (short) 100 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray26);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray26);
        short[] shortArray31 = new short[] { (short) -1, (short) -1 };
        short short32 = org.apache.commons.lang.math.NumberUtils.min(shortArray31);
        short[] shortArray36 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short37 = org.apache.commons.lang.math.NumberUtils.max(shortArray36);
        short[] shortArray41 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(shortArray36, shortArray41);
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(shortArray31, shortArray36);
        short[] shortArray45 = new short[] { (short) 100 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(shortArray31, shortArray45);
        short short47 = org.apache.commons.lang.math.NumberUtils.min(shortArray45);
        short short48 = org.apache.commons.lang.math.NumberUtils.max(shortArray45);
        short short49 = org.apache.commons.lang.math.NumberUtils.min(shortArray45);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray45);
        short[] shortArray52 = new short[] { (byte) 1 };
        short short53 = org.apache.commons.lang.math.NumberUtils.min(shortArray52);
        short[] shortArray55 = new short[] { (short) -1 };
        short short56 = org.apache.commons.lang.math.NumberUtils.max(shortArray55);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(shortArray52, shortArray55);
        short[] shortArray59 = new short[] { (byte) 1 };
        short short60 = org.apache.commons.lang.math.NumberUtils.min(shortArray59);
        short[] shortArray62 = new short[] { (short) -1 };
        short short63 = org.apache.commons.lang.math.NumberUtils.max(shortArray62);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(shortArray59, shortArray62);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(shortArray55, shortArray62);
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(shortArray45, shortArray55);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) -1 + "'", short13 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 10 + "'", short18 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) -1 + "'", short32 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 10 + "'", short37 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 100 + "'", short47 == (short) 100);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) 100 + "'", short48 == (short) 100);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 100 + "'", short49 == (short) 100);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1]");
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 1 + "'", short53 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) -1 + "'", short56 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[1]");
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 1 + "'", short60 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) -1 + "'", short63 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double[] doubleArray37 = new double[] { 100L, 1.0f };
        double[] doubleArray41 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray41);
        double[] doubleArray45 = new double[] { 100L, 1.0f };
        double[] doubleArray49 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray45);
        double[] doubleArray54 = new double[] { 100L, 1.0f };
        double[] doubleArray58 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray54, doubleArray58);
        double[] doubleArray62 = new double[] { 100L, 1.0f };
        double[] doubleArray66 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray62, doubleArray66);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray62);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray62);
        double double70 = org.apache.commons.lang.math.NumberUtils.min(doubleArray62);
        double[] doubleArray73 = new double[] { 100L, 1.0f };
        double[] doubleArray77 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray73, doubleArray77);
        double double79 = org.apache.commons.lang.math.NumberUtils.max(doubleArray73);
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray62, doubleArray73);
        boolean boolean81 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray62);
        double[] doubleArray84 = new double[] { 100L, 1.0f };
        double[] doubleArray88 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean89 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray84, doubleArray88);
        double double90 = org.apache.commons.lang.math.NumberUtils.max(doubleArray84);
        double double91 = org.apache.commons.lang.math.NumberUtils.min(doubleArray84);
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray84);
        double double93 = org.apache.commons.lang.math.NumberUtils.min(doubleArray84);
        double double94 = org.apache.commons.lang.math.NumberUtils.max(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 100.0d + "'", double90 == 100.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) (short) 0, (float) (-1), (float) (short) 10);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        double double3 = org.apache.commons.lang.math.NumberUtils.max(35.0d, (double) 35, (double) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 32, 1.0f, (float) (byte) -1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) 10, (short) (byte) 0, (short) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short[] shortArray12 = new short[] { (short) -1, (short) -1 };
        short short13 = org.apache.commons.lang.math.NumberUtils.min(shortArray12);
        short[] shortArray17 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short18 = org.apache.commons.lang.math.NumberUtils.max(shortArray17);
        short[] shortArray22 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(shortArray17, shortArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray17);
        short[] shortArray26 = new short[] { (short) 100 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray26);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray26);
        short[] shortArray31 = new short[] { (short) -1, (short) -1 };
        short short32 = org.apache.commons.lang.math.NumberUtils.min(shortArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray26, shortArray31);
        short short34 = org.apache.commons.lang.math.NumberUtils.min(shortArray26);
        short[] shortArray37 = new short[] { (short) -1, (short) -1 };
        short short38 = org.apache.commons.lang.math.NumberUtils.min(shortArray37);
        short[] shortArray42 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short43 = org.apache.commons.lang.math.NumberUtils.max(shortArray42);
        short[] shortArray47 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(shortArray42, shortArray47);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(shortArray37, shortArray42);
        short[] shortArray51 = new short[] { (short) 100 };
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(shortArray37, shortArray51);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(shortArray26, shortArray51);
        short short54 = org.apache.commons.lang.math.NumberUtils.max(shortArray51);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) -1 + "'", short13 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 10 + "'", short18 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) -1 + "'", short32 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 100 + "'", short34 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) -1 + "'", short38 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 10 + "'", short43 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 100 + "'", short54 == (short) 100);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray10);
        double[] doubleArray19 = new double[] { 100L, 1.0f };
        double[] doubleArray23 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray19, doubleArray23);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray23, doubleArray27);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray27);
        double[] doubleArray37 = new double[] { 100L, 1.0f };
        double[] doubleArray41 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray41);
        double[] doubleArray45 = new double[] { 100L, 1.0f };
        double[] doubleArray49 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray45);
        double[] doubleArray54 = new double[] { 100L, 1.0f };
        double[] doubleArray58 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray54, doubleArray58);
        double[] doubleArray62 = new double[] { 100L, 1.0f };
        double[] doubleArray66 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray62, doubleArray66);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray58, doubleArray62);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray62);
        double double70 = org.apache.commons.lang.math.NumberUtils.min(doubleArray62);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray62);
        double double72 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double double73 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double double74 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double[] doubleArray76 = new double[] { '#' };
        double double77 = org.apache.commons.lang.math.NumberUtils.min(doubleArray76);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray76);
        double double79 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        double double80 = org.apache.commons.lang.math.NumberUtils.max(doubleArray27);
        double double81 = org.apache.commons.lang.math.NumberUtils.min(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray17);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray17);
        int int26 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int int27 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int int28 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        int[] intArray34 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int35 = org.apache.commons.lang.math.NumberUtils.max(intArray34);
        int int36 = org.apache.commons.lang.math.NumberUtils.min(intArray34);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray34);
        int int38 = org.apache.commons.lang.math.NumberUtils.max(intArray17);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 97L, 100.0f, (float) 52L);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 52.0f + "'", float3 == 52.0f);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, ' ', 100.0f };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float12 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float float13 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float[] floatArray17 = new float[] { 0, 1.0f, 100 };
        float[] floatArray19 = new float[] { (-1L) };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray17, floatArray19);
        float[] floatArray24 = new float[] { 0, ' ', 100.0f };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray24);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray19);
        float float27 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float float28 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float[] floatArray29 = new float[] {};
        float[] floatArray33 = new float[] { 0, 1.0f, 100 };
        float[] floatArray35 = new float[] { (-1L) };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray33);
        float[] floatArray41 = new float[] { 0, 1.0f, 100 };
        float[] floatArray43 = new float[] { (-1L) };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray43);
        float[] floatArray48 = new float[] { 0, ' ', 100.0f };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(floatArray43, floatArray48);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray43);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray29);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-1.0f) + "'", float12 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-1.0f) + "'", float13 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-1.0f) + "'", float27 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-1.0f) + "'", float28 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) (byte) 100, 10.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) 10, (long) 52, (long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short short5 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short6 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short short7 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        short[] shortArray10 = new short[] { (short) -1, (short) -1 };
        short short11 = org.apache.commons.lang.math.NumberUtils.min(shortArray10);
        short[] shortArray15 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short16 = org.apache.commons.lang.math.NumberUtils.max(shortArray15);
        short[] shortArray20 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(shortArray15, shortArray20);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray15);
        short[] shortArray24 = new short[] { (short) 100 };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray24);
        short short26 = org.apache.commons.lang.math.NumberUtils.max(shortArray10);
        short[] shortArray29 = new short[] { (short) -1, (short) -1 };
        short short30 = org.apache.commons.lang.math.NumberUtils.min(shortArray29);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short35 = org.apache.commons.lang.math.NumberUtils.max(shortArray34);
        short[] shortArray39 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(shortArray34, shortArray39);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(shortArray29, shortArray34);
        short[] shortArray43 = new short[] { (short) 100 };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(shortArray29, shortArray43);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray29);
        short short46 = org.apache.commons.lang.math.NumberUtils.max(shortArray29);
        short[] shortArray49 = new short[] { (short) -1, (short) -1 };
        short short50 = org.apache.commons.lang.math.NumberUtils.min(shortArray49);
        short[] shortArray54 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short55 = org.apache.commons.lang.math.NumberUtils.max(shortArray54);
        short[] shortArray59 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(shortArray54, shortArray59);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(shortArray49, shortArray54);
        short[] shortArray63 = new short[] { (short) 100 };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(shortArray49, shortArray63);
        short short65 = org.apache.commons.lang.math.NumberUtils.min(shortArray63);
        short short66 = org.apache.commons.lang.math.NumberUtils.max(shortArray63);
        short short67 = org.apache.commons.lang.math.NumberUtils.min(shortArray63);
        short short68 = org.apache.commons.lang.math.NumberUtils.min(shortArray63);
        short[] shortArray72 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short73 = org.apache.commons.lang.math.NumberUtils.max(shortArray72);
        short[] shortArray77 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(shortArray72, shortArray77);
        boolean boolean79 = org.apache.commons.lang.math.NumberUtils.equals(shortArray63, shortArray72);
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(shortArray29, shortArray63);
        boolean boolean81 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray63);
        short short82 = org.apache.commons.lang.math.NumberUtils.min(shortArray3);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 1 + "'", short5 == (short) 1);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 1 + "'", short6 == (short) 1);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 1 + "'", short7 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) -1 + "'", short11 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 10 + "'", short16 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) -1 + "'", short26 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) -1 + "'", short30 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 10 + "'", short35 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) -1 + "'", short46 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) -1 + "'", short50 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 10 + "'", short55 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 100 + "'", short65 == (short) 100);
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) 100 + "'", short66 == (short) 100);
        org.junit.Assert.assertTrue("'" + short67 + "' != '" + (short) 100 + "'", short67 == (short) 100);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) 100 + "'", short68 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) 10 + "'", short73 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) 1 + "'", short82 == (short) 1);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) 1, (short) 100, (short) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        float[] floatArray4 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray5 = new float[] {};
        float[] floatArray9 = new float[] { 0, 1.0f, 100 };
        float[] floatArray11 = new float[] { (-1L) };
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(floatArray9, floatArray11);
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray9);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray9);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray9);
        float[] floatArray16 = null;
        float[] floatArray21 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray22 = new float[] {};
        float[] floatArray26 = new float[] { 0, 1.0f, 100 };
        float[] floatArray28 = new float[] { (-1L) };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray28);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(floatArray22, floatArray26);
        float float31 = org.apache.commons.lang.math.NumberUtils.max(floatArray26);
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray26);
        float float33 = org.apache.commons.lang.math.NumberUtils.max(floatArray26);
        float[] floatArray34 = new float[] {};
        float[] floatArray38 = new float[] { 0, 1.0f, 100 };
        float[] floatArray40 = new float[] { (-1L) };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(floatArray38, floatArray40);
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(floatArray34, floatArray38);
        float[] floatArray46 = new float[] { 0, 1.0f, 100 };
        float[] floatArray48 = new float[] { (-1L) };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(floatArray46, floatArray48);
        float[] floatArray53 = new float[] { 0, ' ', 100.0f };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray48, floatArray53);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(floatArray34, floatArray48);
        float float56 = org.apache.commons.lang.math.NumberUtils.min(floatArray48);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray48);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray48);
        float[] floatArray62 = new float[] { 0, 1.0f, 100 };
        float[] floatArray64 = new float[] { (-1L) };
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(floatArray62, floatArray64);
        float[] floatArray69 = new float[] { 0, 1.0f, 100 };
        float[] floatArray71 = new float[] { (-1L) };
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(floatArray69, floatArray71);
        float float73 = org.apache.commons.lang.math.NumberUtils.max(floatArray69);
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(floatArray64, floatArray69);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray69);
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray69);
        float float77 = org.apache.commons.lang.math.NumberUtils.max(floatArray69);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 100.0f + "'", float31 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 100.0f + "'", float33 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-1.0f) + "'", float56 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 100.0f + "'", float73 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 100.0f + "'", float77 == 100.0f);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short[] shortArray11 = new short[] { (byte) 1 };
        short short12 = org.apache.commons.lang.math.NumberUtils.min(shortArray11);
        short[] shortArray14 = new short[] { (short) -1 };
        short short15 = org.apache.commons.lang.math.NumberUtils.max(shortArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(shortArray11, shortArray14);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray8, shortArray11);
        short short18 = org.apache.commons.lang.math.NumberUtils.min(shortArray11);
        short[] shortArray20 = new short[] { (byte) 1 };
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        short[] shortArray23 = new short[] { (short) -1 };
        short short24 = org.apache.commons.lang.math.NumberUtils.max(shortArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray20, shortArray23);
        short[] shortArray27 = new short[] { (byte) 1 };
        short short28 = org.apache.commons.lang.math.NumberUtils.min(shortArray27);
        short[] shortArray30 = new short[] { (short) -1 };
        short short31 = org.apache.commons.lang.math.NumberUtils.max(shortArray30);
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(shortArray27, shortArray30);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray23, shortArray30);
        short short34 = org.apache.commons.lang.math.NumberUtils.max(shortArray30);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(shortArray11, shortArray30);
        short short36 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        short short37 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 1 + "'", short12 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 1 + "'", short18 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 1 + "'", short21 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) -1 + "'", short24 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1 + "'", short28 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) -1 + "'", short31 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) -1 + "'", short34 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 1 + "'", short36 == (short) 1);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1 + "'", short37 == (short) 1);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 0, (double) 97L, (double) (short) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 10 + "'", byte7 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 10 + "'", byte9 == (byte) 10);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float float9 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float float10 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float[] floatArray11 = new float[] {};
        float[] floatArray15 = new float[] { 0, 1.0f, 100 };
        float[] floatArray17 = new float[] { (-1L) };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray17);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(floatArray11, floatArray15);
        float[] floatArray23 = new float[] { 0, 1.0f, 100 };
        float[] floatArray25 = new float[] { (-1L) };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(floatArray23, floatArray25);
        float[] floatArray30 = new float[] { 0, ' ', 100.0f };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray25, floatArray30);
        float float32 = org.apache.commons.lang.math.NumberUtils.min(floatArray25);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray25);
        float[] floatArray37 = new float[] { 0, 1.0f, 100 };
        float[] floatArray39 = new float[] { (-1L) };
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(floatArray37, floatArray39);
        float[] floatArray44 = new float[] { 0, ' ', 100.0f };
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(floatArray39, floatArray44);
        float float46 = org.apache.commons.lang.math.NumberUtils.min(floatArray44);
        float float47 = org.apache.commons.lang.math.NumberUtils.min(floatArray44);
        float float48 = org.apache.commons.lang.math.NumberUtils.max(floatArray44);
        float[] floatArray52 = new float[] { 0, 1.0f, 100 };
        float[] floatArray54 = new float[] { (-1L) };
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(floatArray52, floatArray54);
        float float56 = org.apache.commons.lang.math.NumberUtils.max(floatArray52);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray52);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray25, floatArray52);
        float[] floatArray62 = new float[] { 0, 1.0f, 100 };
        float[] floatArray64 = new float[] { (-1L) };
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(floatArray62, floatArray64);
        float float66 = org.apache.commons.lang.math.NumberUtils.max(floatArray62);
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(floatArray52, floatArray62);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray62);
        float float69 = org.apache.commons.lang.math.NumberUtils.max(floatArray62);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-1.0f) + "'", float32 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 100.0f + "'", float48 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 100.0f + "'", float56 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 100.0f + "'", float66 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 100.0f + "'", float69 == 100.0f);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 32L, (float) 1L, (float) (byte) 10);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 32.0f + "'", float3 == 32.0f);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int int13 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray20 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int21 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        int int22 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        int[] intArray29 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int30 = org.apache.commons.lang.math.NumberUtils.min(intArray29);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(intArray20, intArray29);
        int[] intArray37 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int38 = org.apache.commons.lang.math.NumberUtils.max(intArray37);
        int int39 = org.apache.commons.lang.math.NumberUtils.max(intArray37);
        int int40 = org.apache.commons.lang.math.NumberUtils.max(intArray37);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(intArray29, intArray37);
        int[] intArray46 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray51 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(intArray46, intArray51);
        int int53 = org.apache.commons.lang.math.NumberUtils.max(intArray51);
        int int54 = org.apache.commons.lang.math.NumberUtils.max(intArray51);
        int[] intArray59 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(intArray59, intArray64);
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(intArray51, intArray59);
        int int67 = org.apache.commons.lang.math.NumberUtils.min(intArray59);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(intArray37, intArray59);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray59);
        int[] intArray74 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray79 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(intArray74, intArray79);
        int int81 = org.apache.commons.lang.math.NumberUtils.min(intArray79);
        int int82 = org.apache.commons.lang.math.NumberUtils.min(intArray79);
        int int83 = org.apache.commons.lang.math.NumberUtils.max(intArray79);
        boolean boolean84 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray79);
        int int85 = org.apache.commons.lang.math.NumberUtils.max(intArray79);
        int int86 = org.apache.commons.lang.math.NumberUtils.max(intArray79);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int[] intArray15 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray20 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(intArray15, intArray20);
        int int22 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray20);
        int int24 = org.apache.commons.lang.math.NumberUtils.max(intArray20);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray20);
        int[] intArray31 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int32 = org.apache.commons.lang.math.NumberUtils.max(intArray31);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray31);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(intArray20, intArray31);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) '4', (int) '4', 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short short15 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short short16 = org.apache.commons.lang.math.NumberUtils.min(shortArray7);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 10 + "'", short15 == (short) 10);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 1 + "'", short16 == (short) 1);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) -1, (byte) 1, (byte) -1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) '4', 0, 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short short7 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short short8 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray12 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short13 = org.apache.commons.lang.math.NumberUtils.max(shortArray12);
        short[] shortArray17 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray17);
        short[] shortArray20 = new short[] { (byte) 1 };
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        short[] shortArray23 = new short[] { (short) -1 };
        short short24 = org.apache.commons.lang.math.NumberUtils.max(shortArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray20, shortArray23);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(shortArray17, shortArray20);
        short short27 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short28 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray20);
        short short30 = org.apache.commons.lang.math.NumberUtils.max(shortArray1);
        short[] shortArray32 = new short[] { (byte) 1 };
        short short33 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short[] shortArray35 = new short[] { (short) -1 };
        short short36 = org.apache.commons.lang.math.NumberUtils.max(shortArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(shortArray32, shortArray35);
        short[] shortArray39 = new short[] { (byte) 1 };
        short short40 = org.apache.commons.lang.math.NumberUtils.min(shortArray39);
        short[] shortArray42 = new short[] { (short) -1 };
        short short43 = org.apache.commons.lang.math.NumberUtils.max(shortArray42);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(shortArray39, shortArray42);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(shortArray35, shortArray42);
        short short46 = org.apache.commons.lang.math.NumberUtils.max(shortArray42);
        short short47 = org.apache.commons.lang.math.NumberUtils.max(shortArray42);
        short short48 = org.apache.commons.lang.math.NumberUtils.min(shortArray42);
        short[] shortArray52 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short53 = org.apache.commons.lang.math.NumberUtils.max(shortArray52);
        short[] shortArray57 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(shortArray52, shortArray57);
        short short59 = org.apache.commons.lang.math.NumberUtils.min(shortArray52);
        short short60 = org.apache.commons.lang.math.NumberUtils.max(shortArray52);
        short[] shortArray64 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short65 = org.apache.commons.lang.math.NumberUtils.max(shortArray64);
        short[] shortArray69 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(shortArray64, shortArray69);
        short[] shortArray73 = new short[] { (short) -1, (short) -1 };
        short short74 = org.apache.commons.lang.math.NumberUtils.min(shortArray73);
        short[] shortArray78 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short79 = org.apache.commons.lang.math.NumberUtils.max(shortArray78);
        short[] shortArray83 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean84 = org.apache.commons.lang.math.NumberUtils.equals(shortArray78, shortArray83);
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(shortArray73, shortArray78);
        short[] shortArray87 = new short[] { (short) 100 };
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(shortArray73, shortArray87);
        boolean boolean89 = org.apache.commons.lang.math.NumberUtils.equals(shortArray64, shortArray87);
        short short90 = org.apache.commons.lang.math.NumberUtils.max(shortArray64);
        short short91 = org.apache.commons.lang.math.NumberUtils.min(shortArray64);
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(shortArray52, shortArray64);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(shortArray42, shortArray64);
        boolean boolean94 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray64);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 1 + "'", short7 == (short) 1);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 1 + "'", short8 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 10 + "'", short13 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 1 + "'", short21 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) -1 + "'", short24 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 1 + "'", short27 == (short) 1);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1 + "'", short28 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 1 + "'", short30 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 1 + "'", short33 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -1 + "'", short36 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 1 + "'", short40 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) -1 + "'", short43 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) -1 + "'", short46 == (short) -1);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) -1 + "'", short47 == (short) -1);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -1 + "'", short48 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 10 + "'", short53 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 1 + "'", short59 == (short) 1);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 10 + "'", short60 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 10 + "'", short65 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) -1 + "'", short74 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) 10 + "'", short79 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[100]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + short90 + "' != '" + (short) 10 + "'", short90 == (short) 10);
        org.junit.Assert.assertTrue("'" + short91 + "' != '" + (short) 1 + "'", short91 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) (byte) -1, (short) 0, (short) (byte) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray7 = new long[] { 52L, (short) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray7);
        long[] longArray9 = new long[] {};
        long[] longArray11 = new long[] { (byte) -1 };
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray11);
        long[] longArray13 = new long[] {};
        long[] longArray15 = new long[] { (byte) -1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray15);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(longArray11, longArray15);
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray15);
        long long21 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long[] longArray25 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray26 = new long[] {};
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray26);
        long long28 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long long30 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        long[] longArray31 = new long[] {};
        long[] longArray33 = new long[] { (byte) -1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(longArray31, longArray33);
        long long35 = org.apache.commons.lang.math.NumberUtils.max(longArray33);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray33);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray25);
        long[] longArray38 = new long[] {};
        long[] longArray40 = new long[] { (byte) -1 };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(longArray38, longArray40);
        long[] longArray45 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray46 = new long[] {};
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(longArray45, longArray46);
        long long48 = org.apache.commons.lang.math.NumberUtils.max(longArray45);
        long long49 = org.apache.commons.lang.math.NumberUtils.max(longArray45);
        long long50 = org.apache.commons.lang.math.NumberUtils.max(longArray45);
        long long51 = org.apache.commons.lang.math.NumberUtils.min(longArray45);
        long[] longArray55 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray56 = new long[] {};
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(longArray55, longArray56);
        long long58 = org.apache.commons.lang.math.NumberUtils.max(longArray55);
        long long59 = org.apache.commons.lang.math.NumberUtils.max(longArray55);
        long long60 = org.apache.commons.lang.math.NumberUtils.min(longArray55);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(longArray45, longArray55);
        long[] longArray65 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray66 = new long[] {};
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(longArray65, longArray66);
        long long68 = org.apache.commons.lang.math.NumberUtils.max(longArray65);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(longArray55, longArray65);
        long[] longArray73 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray74 = new long[] {};
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(longArray73, longArray74);
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(longArray65, longArray73);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(longArray40, longArray65);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray65);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52L + "'", long50 == 52L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray16 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray16);
        int[] intArray28 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(intArray28, intArray33);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray28);
        int int36 = org.apache.commons.lang.math.NumberUtils.max(intArray28);
        int int37 = org.apache.commons.lang.math.NumberUtils.min(intArray28);
        int int38 = org.apache.commons.lang.math.NumberUtils.min(intArray28);
        int[] intArray43 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(intArray43, intArray48);
        int int50 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int int51 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int[] intArray56 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(intArray56, intArray61);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(intArray48, intArray56);
        int int64 = org.apache.commons.lang.math.NumberUtils.min(intArray56);
        int[] intArray69 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray74 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(intArray69, intArray74);
        int[] intArray80 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray85 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean86 = org.apache.commons.lang.math.NumberUtils.equals(intArray80, intArray85);
        int int87 = org.apache.commons.lang.math.NumberUtils.min(intArray85);
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(intArray74, intArray85);
        int int89 = org.apache.commons.lang.math.NumberUtils.min(intArray74);
        boolean boolean90 = org.apache.commons.lang.math.NumberUtils.equals(intArray56, intArray74);
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(intArray28, intArray56);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long[] longArray4 = null;
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray4);
        long long6 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray7 = new long[] {};
        long[] longArray9 = new long[] { (byte) -1 };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(longArray7, longArray9);
        long long11 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        long[] longArray14 = new long[] { 52L, (short) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray9);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        double double3 = org.apache.commons.lang.math.NumberUtils.min(35.0d, (double) (byte) 100, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float float9 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float[] floatArray14 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray15 = new float[] {};
        float[] floatArray19 = new float[] { 0, 1.0f, 100 };
        float[] floatArray21 = new float[] { (-1L) };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(floatArray15, floatArray19);
        float float24 = org.apache.commons.lang.math.NumberUtils.max(floatArray19);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float26 = org.apache.commons.lang.math.NumberUtils.max(floatArray19);
        float[] floatArray30 = new float[] { 0, 1.0f, 100 };
        float[] floatArray32 = new float[] { (-1L) };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray32);
        float[] floatArray37 = new float[] { 0, ' ', 100.0f };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray32, floatArray37);
        float[] floatArray39 = new float[] {};
        float[] floatArray43 = new float[] { 0, 1.0f, 100 };
        float[] floatArray45 = new float[] { (-1L) };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray43, floatArray45);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray39, floatArray43);
        float[] floatArray51 = new float[] { 0, 1.0f, 100 };
        float[] floatArray53 = new float[] { (-1L) };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray51, floatArray53);
        float[] floatArray58 = new float[] { 0, ' ', 100.0f };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(floatArray53, floatArray58);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(floatArray39, floatArray53);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(floatArray37, floatArray53);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray53);
        float[] floatArray66 = new float[] { 0, 1.0f, 100 };
        float[] floatArray68 = new float[] { (-1L) };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray66, floatArray68);
        float[] floatArray73 = new float[] { 0, ' ', 100.0f };
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(floatArray68, floatArray73);
        float float75 = org.apache.commons.lang.math.NumberUtils.min(floatArray73);
        float float76 = org.apache.commons.lang.math.NumberUtils.min(floatArray73);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(floatArray19, floatArray73);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray19);
        float[] floatArray82 = new float[] { 0, 1.0f, 100 };
        float[] floatArray84 = new float[] { (-1L) };
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(floatArray82, floatArray84);
        float[] floatArray89 = new float[] { 0, 1.0f, 100 };
        float[] floatArray91 = new float[] { (-1L) };
        boolean boolean92 = org.apache.commons.lang.math.NumberUtils.equals(floatArray89, floatArray91);
        float float93 = org.apache.commons.lang.math.NumberUtils.max(floatArray89);
        boolean boolean94 = org.apache.commons.lang.math.NumberUtils.equals(floatArray82, floatArray89);
        boolean boolean95 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray89);
        float float96 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 100.0f + "'", float9 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 100.0f + "'", float24 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 100.0f + "'", float26 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray91), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 100.0f + "'", float93 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + 0.0f + "'", float96 == 0.0f);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (short) 0, (int) (byte) 0, (int) '4');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray5 = new float[] { 0, 1.0f, 100 };
        float[] floatArray7 = new float[] { (-1L) };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray7);
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(floatArray1, floatArray5);
        float float10 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float[] floatArray14 = new float[] { 0, 1.0f, 100 };
        float[] floatArray16 = new float[] { (-1L) };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray16);
        float float18 = org.apache.commons.lang.math.NumberUtils.min(floatArray16);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray16);
        float[] floatArray20 = new float[] {};
        float[] floatArray24 = new float[] { 0, 1.0f, 100 };
        float[] floatArray26 = new float[] { (-1L) };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(floatArray24, floatArray26);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(floatArray20, floatArray24);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray16, floatArray24);
        float float30 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray16);
        float float32 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        float float33 = org.apache.commons.lang.math.NumberUtils.max(floatArray16);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 100.0f + "'", float10 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-1.0f) + "'", float30 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-1.0f) + "'", float32 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-1.0f) + "'", float33 == (-1.0f));
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        long[] longArray3 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray4 = new long[] {};
        boolean boolean5 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray4);
        long long6 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long7 = org.apache.commons.lang.math.NumberUtils.max(longArray3);
        long long8 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long long9 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long long10 = org.apache.commons.lang.math.NumberUtils.min(longArray3);
        long[] longArray14 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray15 = new long[] {};
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray15);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        long long19 = org.apache.commons.lang.math.NumberUtils.min(longArray14);
        long long20 = org.apache.commons.lang.math.NumberUtils.min(longArray14);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(longArray3, longArray14);
        long long22 = org.apache.commons.lang.math.NumberUtils.min(longArray14);
        long long23 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        int[] intArray5 = new int[] { (-1), (-1), 1, 52, ' ' };
        int int6 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int int7 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, -1, 1, 52, 32]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) 100.0f, (double) 52L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 35, (float) 0L, (float) (-1L));
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray10 = null;
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(byteArray10, byteArray17);
        byte byte19 = org.apache.commons.lang.math.NumberUtils.min(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte24 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(byteArray17, byteArray23);
        byte byte26 = org.apache.commons.lang.math.NumberUtils.min(byteArray23);
        byte byte27 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray23);
        byte byte29 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        java.lang.Class<?> wildcardClass30 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) -1 + "'", byte19 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 10 + "'", byte24 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) -1 + "'", byte26 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 10 + "'", byte27 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) -1 + "'", byte29 == (byte) -1);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        float float2 = org.apache.commons.lang.math.NumberUtils.toFloat("hi!", (-1.0f));
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f));
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        float[] floatArray3 = new float[] { 0, 1.0f, 100 };
        float[] floatArray5 = new float[] { (-1L) };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray3, floatArray5);
        float[] floatArray10 = new float[] { 0, ' ', 100.0f };
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray10);
        float float12 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float float13 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float float15 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-1.0f) + "'", float12 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-1.0f) + "'", float13 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-1.0f) + "'", float14 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-1.0f) + "'", float15 == (-1.0f));
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) 97, (long) ' ', 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) 52, (long) (byte) 10, (long) 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52L + "'", long3 == 52L);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short[] shortArray11 = new short[] { (byte) 1 };
        short short12 = org.apache.commons.lang.math.NumberUtils.min(shortArray11);
        short[] shortArray14 = new short[] { (short) -1 };
        short short15 = org.apache.commons.lang.math.NumberUtils.max(shortArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(shortArray11, shortArray14);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray8, shortArray11);
        short short18 = org.apache.commons.lang.math.NumberUtils.min(shortArray11);
        short short19 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 1 + "'", short12 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 1 + "'", short18 == (short) 1);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 1 + "'", short19 == (short) 1);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) (short) 100, (double) 100.0f, (double) (-1));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 52, (float) 35L, 0.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 52.0f + "'", float3 == 52.0f);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray7 = new long[] { 52L, (short) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray7);
        long long9 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long long11 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long[] longArray12 = new long[] {};
        long[] longArray14 = new long[] { (byte) -1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(longArray12, longArray14);
        long long16 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        long[] longArray19 = new long[] { 52L, (short) 1 };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray19);
        long[] longArray21 = new long[] {};
        long[] longArray23 = new long[] { (byte) -1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(longArray21, longArray23);
        long[] longArray25 = new long[] {};
        long[] longArray27 = new long[] { (byte) -1 };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray27);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        long long30 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray23, longArray27);
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray27);
        long long33 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        long[] longArray37 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray38 = new long[] {};
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray37, longArray38);
        long long40 = org.apache.commons.lang.math.NumberUtils.max(longArray37);
        long long41 = org.apache.commons.lang.math.NumberUtils.max(longArray37);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray37);
        long[] longArray43 = new long[] {};
        long[] longArray45 = new long[] { (byte) -1 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(longArray43, longArray45);
        long long47 = org.apache.commons.lang.math.NumberUtils.max(longArray45);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(longArray37, longArray45);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray37);
        long long50 = org.apache.commons.lang.math.NumberUtils.min(longArray37);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(longArray7, longArray37);
        long long52 = org.apache.commons.lang.math.NumberUtils.min(longArray37);
        long long53 = org.apache.commons.lang.math.NumberUtils.min(longArray37);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) (byte) 10, (float) (-1L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] { 100L, 1.0f };
        double[] doubleArray7 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray7);
        double[] doubleArray11 = new double[] { 100L, 1.0f };
        double[] doubleArray15 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray11, doubleArray15);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray11);
        double[] doubleArray20 = new double[] { 100L, 1.0f };
        double[] doubleArray24 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray20, doubleArray24);
        double[] doubleArray28 = new double[] { 100L, 1.0f };
        double[] doubleArray32 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray28, doubleArray32);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray24, doubleArray28);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray3, doubleArray28);
        double[] doubleArray38 = new double[] { 100L, 1.0f };
        double[] doubleArray42 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray42);
        double[] doubleArray46 = new double[] { 100L, 1.0f };
        double[] doubleArray50 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray46, doubleArray50);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray46);
        double[] doubleArray55 = new double[] { 100L, 1.0f };
        double[] doubleArray59 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray55, doubleArray59);
        double[] doubleArray63 = new double[] { 100L, 1.0f };
        double[] doubleArray67 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray63, doubleArray67);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray59, doubleArray63);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray63);
        double double71 = org.apache.commons.lang.math.NumberUtils.min(doubleArray63);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray28, doubleArray63);
        double double73 = org.apache.commons.lang.math.NumberUtils.min(doubleArray28);
        double[] doubleArray75 = new double[] { 0.0d };
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray28, doubleArray75);
        double double77 = org.apache.commons.lang.math.NumberUtils.max(doubleArray28);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray0, doubleArray28);
        java.lang.Class<?> wildcardClass79 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.min((byte) -1, (byte) 100, (byte) 1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(1, (int) (short) 1, 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        long long3 = org.apache.commons.lang.math.NumberUtils.min(32L, (long) (byte) 0, (long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte10 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte11 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray15);
        byte[] byteArray17 = null;
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(byteArray17, byteArray24);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(byteArray24, byteArray30);
        byte byte32 = org.apache.commons.lang.math.NumberUtils.max(byteArray24);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(byteArray15, byteArray24);
        byte[] byteArray34 = null;
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(byteArray34, byteArray41);
        byte byte43 = org.apache.commons.lang.math.NumberUtils.min(byteArray41);
        byte byte44 = org.apache.commons.lang.math.NumberUtils.max(byteArray41);
        byte byte45 = org.apache.commons.lang.math.NumberUtils.max(byteArray41);
        byte[] byteArray46 = null;
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(byteArray46, byteArray53);
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(byteArray53, byteArray59);
        byte byte61 = org.apache.commons.lang.math.NumberUtils.max(byteArray59);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(byteArray41, byteArray59);
        byte byte63 = org.apache.commons.lang.math.NumberUtils.max(byteArray41);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(byteArray24, byteArray41);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray41);
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte71 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        byte byte72 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        byte byte73 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        byte[] byteArray74 = null;
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(byteArray74, byteArray81);
        byte byte83 = org.apache.commons.lang.math.NumberUtils.min(byteArray81);
        byte byte84 = org.apache.commons.lang.math.NumberUtils.max(byteArray81);
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(byteArray70, byteArray81);
        byte byte86 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        byte byte87 = org.apache.commons.lang.math.NumberUtils.min(byteArray70);
        byte byte88 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        byte byte89 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        byte byte90 = org.apache.commons.lang.math.NumberUtils.min(byteArray70);
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray70);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 100 + "'", byte10 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) -1 + "'", byte11 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 10 + "'", byte16 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 100 + "'", byte32 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) -1 + "'", byte43 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 100 + "'", byte44 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 100 + "'", byte45 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) 10 + "'", byte61 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 100 + "'", byte63 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) 10 + "'", byte71 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte72 + "' != '" + (byte) 10 + "'", byte72 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte73 + "' != '" + (byte) 10 + "'", byte73 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) -1 + "'", byte83 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte84 + "' != '" + (byte) 100 + "'", byte84 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + byte86 + "' != '" + (byte) 10 + "'", byte86 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte87 + "' != '" + (byte) -1 + "'", byte87 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte88 + "' != '" + (byte) 10 + "'", byte88 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte89 + "' != '" + (byte) 10 + "'", byte89 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte90 + "' != '" + (byte) -1 + "'", byte90 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray16 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray16);
        int[] intArray28 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(intArray28, intArray33);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray28);
        int[] intArray40 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(intArray40, intArray45);
        int int47 = org.apache.commons.lang.math.NumberUtils.min(intArray45);
        int int48 = org.apache.commons.lang.math.NumberUtils.min(intArray45);
        int[] intArray53 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(intArray53, intArray58);
        int int60 = org.apache.commons.lang.math.NumberUtils.max(intArray58);
        int int61 = org.apache.commons.lang.math.NumberUtils.min(intArray58);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(intArray45, intArray58);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(intArray28, intArray45);
        int int64 = org.apache.commons.lang.math.NumberUtils.max(intArray28);
        int int65 = org.apache.commons.lang.math.NumberUtils.min(intArray28);
        int int66 = org.apache.commons.lang.math.NumberUtils.min(intArray28);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        float[] floatArray0 = null;
        float[] floatArray5 = new float[] { 52.0f, 1.0f, 1L, (byte) 0 };
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray5);
        float[] floatArray7 = new float[] {};
        float[] floatArray11 = new float[] { 0, 1.0f, 100 };
        float[] floatArray13 = new float[] { (-1L) };
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(floatArray11, floatArray13);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray7, floatArray11);
        float float16 = org.apache.commons.lang.math.NumberUtils.max(floatArray11);
        float[] floatArray20 = new float[] { 0, 1.0f, 100 };
        float[] floatArray22 = new float[] { (-1L) };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(floatArray20, floatArray22);
        float float24 = org.apache.commons.lang.math.NumberUtils.min(floatArray22);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray11, floatArray22);
        float[] floatArray26 = new float[] {};
        float[] floatArray30 = new float[] { 0, 1.0f, 100 };
        float[] floatArray32 = new float[] { (-1L) };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray32);
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray30);
        float[] floatArray38 = new float[] { 0, 1.0f, 100 };
        float[] floatArray40 = new float[] { (-1L) };
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(floatArray38, floatArray40);
        float[] floatArray45 = new float[] { 0, ' ', 100.0f };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray40, floatArray45);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray40);
        float[] floatArray51 = new float[] { 0, 1.0f, 100 };
        float[] floatArray53 = new float[] { (-1L) };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray51, floatArray53);
        float float55 = org.apache.commons.lang.math.NumberUtils.max(floatArray51);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray40, floatArray51);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray22, floatArray51);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray22);
        float float59 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        float float60 = org.apache.commons.lang.math.NumberUtils.max(floatArray5);
        float float61 = org.apache.commons.lang.math.NumberUtils.min(floatArray5);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[52.0, 1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 100.0f + "'", float16 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-1.0f) + "'", float24 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 100.0f + "'", float55 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 52.0f + "'", float60 == 52.0f);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (byte) 100, (int) '4', (int) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        int[] intArray5 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int6 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int7 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int8 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int[] intArray13 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray18 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(intArray13, intArray18);
        int int20 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int int21 = org.apache.commons.lang.math.NumberUtils.min(intArray18);
        int[] intArray26 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(intArray26, intArray31);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray31);
        int int34 = org.apache.commons.lang.math.NumberUtils.min(intArray31);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray31);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray18);
        int[] intArray42 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int43 = org.apache.commons.lang.math.NumberUtils.max(intArray42);
        int int44 = org.apache.commons.lang.math.NumberUtils.min(intArray42);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray42);
        int int46 = org.apache.commons.lang.math.NumberUtils.max(intArray42);
        int int47 = org.apache.commons.lang.math.NumberUtils.max(intArray42);
        int int48 = org.apache.commons.lang.math.NumberUtils.max(intArray42);
        int[] intArray53 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(intArray53, intArray58);
        int int60 = org.apache.commons.lang.math.NumberUtils.max(intArray58);
        int int61 = org.apache.commons.lang.math.NumberUtils.max(intArray58);
        int[] intArray66 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray71 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(intArray66, intArray71);
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(intArray58, intArray66);
        int int74 = org.apache.commons.lang.math.NumberUtils.min(intArray66);
        int int75 = org.apache.commons.lang.math.NumberUtils.min(intArray66);
        int int76 = org.apache.commons.lang.math.NumberUtils.min(intArray66);
        int int77 = org.apache.commons.lang.math.NumberUtils.max(intArray66);
        int int78 = org.apache.commons.lang.math.NumberUtils.max(intArray66);
        boolean boolean79 = org.apache.commons.lang.math.NumberUtils.equals(intArray42, intArray66);
        int int80 = org.apache.commons.lang.math.NumberUtils.max(intArray66);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float[] floatArray26 = new float[] { 0, 1.0f, 100 };
        float[] floatArray28 = new float[] { (-1L) };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(floatArray26, floatArray28);
        float[] floatArray33 = new float[] { 0, ' ', 100.0f };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray33);
        float float35 = org.apache.commons.lang.math.NumberUtils.min(floatArray33);
        float float36 = org.apache.commons.lang.math.NumberUtils.min(floatArray33);
        float float37 = org.apache.commons.lang.math.NumberUtils.max(floatArray33);
        float[] floatArray41 = new float[] { 0, 1.0f, 100 };
        float[] floatArray43 = new float[] { (-1L) };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(floatArray41, floatArray43);
        float float45 = org.apache.commons.lang.math.NumberUtils.max(floatArray41);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(floatArray33, floatArray41);
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray41);
        float float48 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        float[] floatArray49 = new float[] {};
        float[] floatArray53 = new float[] { 0, 1.0f, 100 };
        float[] floatArray55 = new float[] { (-1L) };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray53, floatArray55);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray49, floatArray53);
        float[] floatArray61 = new float[] { 0, 1.0f, 100 };
        float[] floatArray63 = new float[] { (-1L) };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(floatArray61, floatArray63);
        float[] floatArray68 = new float[] { 0, ' ', 100.0f };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(floatArray63, floatArray68);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(floatArray49, floatArray63);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray63);
        float float72 = org.apache.commons.lang.math.NumberUtils.max(floatArray63);
        float float73 = org.apache.commons.lang.math.NumberUtils.min(floatArray63);
        float float74 = org.apache.commons.lang.math.NumberUtils.max(floatArray63);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 100.0f + "'", float37 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 100.0f + "'", float45 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-1.0f) + "'", float48 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-1.0f) + "'", float72 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-1.0f) + "'", float73 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-1.0f) + "'", float74 == (-1.0f));
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray10);
        double double17 = org.apache.commons.lang.math.NumberUtils.min(doubleArray10);
        double double18 = org.apache.commons.lang.math.NumberUtils.min(doubleArray10);
        double double19 = org.apache.commons.lang.math.NumberUtils.max(doubleArray10);
        double[] doubleArray22 = new double[] { 100L, 1.0f };
        double[] doubleArray26 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray22, doubleArray26);
        double[] doubleArray30 = new double[] { 100L, 1.0f };
        double[] doubleArray34 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray30, doubleArray34);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray22, doubleArray30);
        double double37 = org.apache.commons.lang.math.NumberUtils.max(doubleArray30);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray30);
        double double39 = org.apache.commons.lang.math.NumberUtils.max(doubleArray10);
        double double40 = org.apache.commons.lang.math.NumberUtils.max(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        long long3 = org.apache.commons.lang.math.NumberUtils.min(0L, (long) (short) 100, (long) 'a');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short short18 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short short19 = org.apache.commons.lang.math.NumberUtils.max(shortArray16);
        short short20 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short[] shortArray25 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short26 = org.apache.commons.lang.math.NumberUtils.max(shortArray25);
        short[] shortArray30 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(shortArray25, shortArray30);
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(shortArray16, shortArray25);
        short short33 = org.apache.commons.lang.math.NumberUtils.max(shortArray16);
        short short34 = org.apache.commons.lang.math.NumberUtils.max(shortArray16);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 100 + "'", short18 == (short) 100);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 100 + "'", short20 == (short) 100);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 100 + "'", short21 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 10 + "'", short26 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 100 + "'", short33 == (short) 100);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 100 + "'", short34 == (short) 100);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray14);
        float float22 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        float[] floatArray27 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray28 = new float[] {};
        float[] floatArray32 = new float[] { 0, 1.0f, 100 };
        float[] floatArray34 = new float[] { (-1L) };
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(floatArray32, floatArray34);
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray32);
        float float37 = org.apache.commons.lang.math.NumberUtils.max(floatArray32);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray27, floatArray32);
        float float39 = org.apache.commons.lang.math.NumberUtils.max(floatArray32);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray32);
        float float41 = org.apache.commons.lang.math.NumberUtils.max(floatArray32);
        float[] floatArray45 = new float[] { 0, 1.0f, 100 };
        float[] floatArray47 = new float[] { (-1L) };
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(floatArray45, floatArray47);
        float[] floatArray52 = new float[] { 0, 1.0f, 100 };
        float[] floatArray54 = new float[] { (-1L) };
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(floatArray52, floatArray54);
        float float56 = org.apache.commons.lang.math.NumberUtils.max(floatArray52);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(floatArray45, floatArray52);
        float float58 = org.apache.commons.lang.math.NumberUtils.max(floatArray45);
        float[] floatArray59 = new float[] {};
        float[] floatArray63 = new float[] { 0, 1.0f, 100 };
        float[] floatArray65 = new float[] { (-1L) };
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(floatArray63, floatArray65);
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(floatArray59, floatArray63);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(floatArray45, floatArray63);
        float float69 = org.apache.commons.lang.math.NumberUtils.max(floatArray63);
        float float70 = org.apache.commons.lang.math.NumberUtils.min(floatArray63);
        float[] floatArray71 = new float[] {};
        float[] floatArray75 = new float[] { 0, 1.0f, 100 };
        float[] floatArray77 = new float[] { (-1L) };
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(floatArray75, floatArray77);
        boolean boolean79 = org.apache.commons.lang.math.NumberUtils.equals(floatArray71, floatArray75);
        float[] floatArray83 = new float[] { 0, 1.0f, 100 };
        float[] floatArray85 = new float[] { (-1L) };
        boolean boolean86 = org.apache.commons.lang.math.NumberUtils.equals(floatArray83, floatArray85);
        float[] floatArray90 = new float[] { 0, ' ', 100.0f };
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(floatArray85, floatArray90);
        float float92 = org.apache.commons.lang.math.NumberUtils.min(floatArray85);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(floatArray75, floatArray85);
        boolean boolean94 = org.apache.commons.lang.math.NumberUtils.equals(floatArray63, floatArray85);
        boolean boolean95 = org.apache.commons.lang.math.NumberUtils.equals(floatArray32, floatArray85);
        float[] floatArray96 = null;
        boolean boolean97 = org.apache.commons.lang.math.NumberUtils.equals(floatArray32, floatArray96);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-1.0f) + "'", float22 == (-1.0f));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 100.0f + "'", float37 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 100.0f + "'", float39 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 100.0f + "'", float41 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 100.0f + "'", float56 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 100.0f + "'", float58 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 100.0f + "'", float69 == 100.0f);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(floatArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray90), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-1.0f) + "'", float92 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float float23 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float float24 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float float25 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        float[] floatArray29 = new float[] { 0, 1.0f, 100 };
        float[] floatArray31 = new float[] { (-1L) };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray31);
        float[] floatArray36 = new float[] { 0, 1.0f, 100 };
        float[] floatArray38 = new float[] { (-1L) };
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(floatArray36, floatArray38);
        float float40 = org.apache.commons.lang.math.NumberUtils.max(floatArray36);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray36);
        float float42 = org.apache.commons.lang.math.NumberUtils.max(floatArray29);
        float[] floatArray43 = new float[] {};
        float[] floatArray47 = new float[] { 0, 1.0f, 100 };
        float[] floatArray49 = new float[] { (-1L) };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(floatArray47, floatArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(floatArray43, floatArray47);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray47);
        float float53 = org.apache.commons.lang.math.NumberUtils.max(floatArray29);
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray29);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 100.0f + "'", float24 == 100.0f);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 100.0f + "'", float25 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 100.0f + "'", float40 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 100.0f + "'", float42 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 100.0f + "'", float53 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        float float3 = org.apache.commons.lang.math.NumberUtils.min(35.0f, 10.0f, (float) 0);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) (byte) 0, (double) 52, (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) ' ', 0, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        float float3 = org.apache.commons.lang.math.NumberUtils.min(35.0f, (float) (byte) 1, (float) 100);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (byte) 0, (int) (short) 100, (int) '#');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray7 = new long[] { 52L, (short) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray7);
        long long9 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long long11 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long[] longArray12 = new long[] {};
        long[] longArray14 = new long[] { (byte) -1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(longArray12, longArray14);
        long long16 = org.apache.commons.lang.math.NumberUtils.max(longArray14);
        long[] longArray19 = new long[] { 52L, (short) 1 };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray19);
        long[] longArray21 = new long[] {};
        long[] longArray23 = new long[] { (byte) -1 };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(longArray21, longArray23);
        long[] longArray25 = new long[] {};
        long[] longArray27 = new long[] { (byte) -1 };
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray27);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        long long30 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(longArray23, longArray27);
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray27);
        long long33 = org.apache.commons.lang.math.NumberUtils.max(longArray27);
        long[] longArray37 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray38 = new long[] {};
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray37, longArray38);
        long long40 = org.apache.commons.lang.math.NumberUtils.max(longArray37);
        long long41 = org.apache.commons.lang.math.NumberUtils.max(longArray37);
        long long42 = org.apache.commons.lang.math.NumberUtils.max(longArray37);
        long[] longArray43 = new long[] {};
        long[] longArray45 = new long[] { (byte) -1 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(longArray43, longArray45);
        long long47 = org.apache.commons.lang.math.NumberUtils.max(longArray45);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(longArray37, longArray45);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray37);
        long long50 = org.apache.commons.lang.math.NumberUtils.min(longArray37);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(longArray7, longArray37);
        long long52 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        long long53 = org.apache.commons.lang.math.NumberUtils.max(longArray7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        int[] intArray16 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray21);
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray16);
        int[] intArray24 = null;
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(intArray16, intArray24);
        int int26 = org.apache.commons.lang.math.NumberUtils.min(intArray16);
        int int27 = org.apache.commons.lang.math.NumberUtils.max(intArray16);
        int int28 = org.apache.commons.lang.math.NumberUtils.max(intArray16);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray17);
        int int25 = org.apache.commons.lang.math.NumberUtils.min(intArray17);
        int[] intArray31 = new int[] { (-1), (-1), 1, 52, ' ' };
        int int32 = org.apache.commons.lang.math.NumberUtils.min(intArray31);
        int int33 = org.apache.commons.lang.math.NumberUtils.max(intArray31);
        int int34 = org.apache.commons.lang.math.NumberUtils.min(intArray31);
        int[] intArray39 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(intArray39, intArray44);
        int int46 = org.apache.commons.lang.math.NumberUtils.max(intArray44);
        int int47 = org.apache.commons.lang.math.NumberUtils.max(intArray44);
        int[] intArray52 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(intArray52, intArray57);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(intArray44, intArray52);
        int int60 = org.apache.commons.lang.math.NumberUtils.min(intArray52);
        int int61 = org.apache.commons.lang.math.NumberUtils.max(intArray52);
        int int62 = org.apache.commons.lang.math.NumberUtils.max(intArray52);
        int int63 = org.apache.commons.lang.math.NumberUtils.max(intArray52);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(intArray31, intArray52);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray52);
        int int66 = org.apache.commons.lang.math.NumberUtils.min(intArray52);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, 1, 52, 32]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray10);
        double double17 = org.apache.commons.lang.math.NumberUtils.min(doubleArray6);
        double double18 = org.apache.commons.lang.math.NumberUtils.max(doubleArray6);
        double[] doubleArray21 = new double[] { 100L, 1.0f };
        double[] doubleArray25 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray21, doubleArray25);
        double[] doubleArray29 = new double[] { 100L, 1.0f };
        double[] doubleArray33 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray29, doubleArray33);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray25, doubleArray29);
        double[] doubleArray38 = new double[] { 100L, 1.0f };
        double[] doubleArray42 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray42);
        double[] doubleArray46 = new double[] { 100L, 1.0f };
        double[] doubleArray50 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray46, doubleArray50);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray38, doubleArray46);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray29, doubleArray46);
        double double54 = org.apache.commons.lang.math.NumberUtils.max(doubleArray46);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray46);
        double double56 = org.apache.commons.lang.math.NumberUtils.max(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray14);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray14);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray14);
        byte byte18 = org.apache.commons.lang.math.NumberUtils.min(byteArray14);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte24 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.max(byteArray23);
        byte byte26 = org.apache.commons.lang.math.NumberUtils.min(byteArray23);
        byte byte27 = org.apache.commons.lang.math.NumberUtils.min(byteArray23);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray14, byteArray23);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray23);
        byte[] byteArray30 = null;
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(byteArray30, byteArray37);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(byteArray37, byteArray43);
        byte byte45 = org.apache.commons.lang.math.NumberUtils.max(byteArray37);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray37);
        byte byte47 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 10 + "'", byte8 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 10 + "'", byte9 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 10 + "'", byte16 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) -1 + "'", byte18 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 10 + "'", byte24 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 10 + "'", byte25 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) -1 + "'", byte26 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) -1 + "'", byte27 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 100 + "'", byte45 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 10 + "'", byte47 == (byte) 10);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short[] shortArray10 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short11 = org.apache.commons.lang.math.NumberUtils.max(shortArray10);
        short[] shortArray15 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray15);
        short short17 = org.apache.commons.lang.math.NumberUtils.min(shortArray10);
        short[] shortArray20 = new short[] { (short) -1, (short) -1 };
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(shortArray10, shortArray20);
        short short23 = org.apache.commons.lang.math.NumberUtils.max(shortArray20);
        short short24 = org.apache.commons.lang.math.NumberUtils.min(shortArray20);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray20);
        short short26 = org.apache.commons.lang.math.NumberUtils.min(shortArray4);
        short[] shortArray30 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short31 = org.apache.commons.lang.math.NumberUtils.max(shortArray30);
        short[] shortArray35 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(shortArray30, shortArray35);
        short[] shortArray39 = new short[] { (short) -1, (short) -1 };
        short short40 = org.apache.commons.lang.math.NumberUtils.min(shortArray39);
        short[] shortArray44 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short45 = org.apache.commons.lang.math.NumberUtils.max(shortArray44);
        short[] shortArray49 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(shortArray44, shortArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(shortArray39, shortArray44);
        short[] shortArray53 = new short[] { (short) 100 };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(shortArray39, shortArray53);
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(shortArray30, shortArray53);
        short short56 = org.apache.commons.lang.math.NumberUtils.max(shortArray30);
        short short57 = org.apache.commons.lang.math.NumberUtils.min(shortArray30);
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray30);
        short[] shortArray62 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short63 = org.apache.commons.lang.math.NumberUtils.max(shortArray62);
        short[] shortArray67 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(shortArray62, shortArray67);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray67);
        short short70 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        short short71 = org.apache.commons.lang.math.NumberUtils.min(shortArray4);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 10 + "'", short11 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 1 + "'", short17 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) -1 + "'", short21 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) -1 + "'", short23 == (short) -1);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) -1 + "'", short24 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) -1 + "'", short26 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 10 + "'", short31 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -1 + "'", short40 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 10 + "'", short45 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 10 + "'", short56 == (short) 10);
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) 1 + "'", short57 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 10 + "'", short63 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -1 + "'", short70 == (short) -1);
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) -1 + "'", short71 == (short) -1);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 100L, (float) (short) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte12 = org.apache.commons.lang.math.NumberUtils.max(byteArray11);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(byteArray11, byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte22 = org.apache.commons.lang.math.NumberUtils.max(byteArray21);
        byte byte23 = org.apache.commons.lang.math.NumberUtils.max(byteArray21);
        byte byte24 = org.apache.commons.lang.math.NumberUtils.min(byteArray21);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.min(byteArray21);
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(byteArray15, byteArray21);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte31 = org.apache.commons.lang.math.NumberUtils.max(byteArray30);
        byte[] byteArray32 = null;
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(byteArray32, byteArray39);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(byteArray39, byteArray45);
        byte byte47 = org.apache.commons.lang.math.NumberUtils.max(byteArray39);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(byteArray30, byteArray39);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray21, byteArray30);
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray21);
        byte byte51 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte52 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte53 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 10 + "'", byte7 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 10 + "'", byte12 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 10 + "'", byte22 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 10 + "'", byte23 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) -1 + "'", byte24 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) -1 + "'", byte25 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 10 + "'", byte31 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 100 + "'", byte47 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + byte51 + "' != '" + (byte) -1 + "'", byte51 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte52 + "' != '" + (byte) -1 + "'", byte52 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) 10 + "'", byte53 == (byte) 10);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 10L, (float) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 1.0f, (double) (-1), (double) '#');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 32L, 1.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 'a', (float) ' ', (float) (-1));
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte10 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte11 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte12 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte13 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 100 + "'", byte10 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 100 + "'", byte11 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) -1 + "'", byte12 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) -1 + "'", byte13 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 100 + "'", byte14 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) -1 + "'", byte15 == (byte) -1);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        double double3 = org.apache.commons.lang.math.NumberUtils.min(100.0d, (double) 10, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte4 = org.apache.commons.lang.math.NumberUtils.max(byteArray3);
        byte[] byteArray5 = null;
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(byteArray5, byteArray12);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(byteArray12, byteArray18);
        byte byte20 = org.apache.commons.lang.math.NumberUtils.max(byteArray12);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray12);
        byte[] byteArray22 = null;
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(byteArray22, byteArray29);
        byte byte31 = org.apache.commons.lang.math.NumberUtils.min(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte36 = org.apache.commons.lang.math.NumberUtils.max(byteArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(byteArray29, byteArray35);
        byte byte38 = org.apache.commons.lang.math.NumberUtils.max(byteArray29);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte43 = org.apache.commons.lang.math.NumberUtils.max(byteArray42);
        byte[] byteArray44 = null;
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(byteArray44, byteArray51);
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(byteArray51, byteArray57);
        byte byte59 = org.apache.commons.lang.math.NumberUtils.max(byteArray51);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(byteArray42, byteArray51);
        byte byte61 = org.apache.commons.lang.math.NumberUtils.max(byteArray51);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(byteArray29, byteArray51);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte67 = org.apache.commons.lang.math.NumberUtils.max(byteArray66);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(byteArray66, byteArray70);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(byteArray51, byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte77 = org.apache.commons.lang.math.NumberUtils.max(byteArray76);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean81 = org.apache.commons.lang.math.NumberUtils.equals(byteArray76, byteArray80);
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(byteArray70, byteArray76);
        byte byte83 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        byte byte84 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray70);
        byte byte86 = org.apache.commons.lang.math.NumberUtils.max(byteArray70);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 10 + "'", byte4 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 100 + "'", byte20 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) -1 + "'", byte31 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 10 + "'", byte36 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 100 + "'", byte38 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 10 + "'", byte43 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + byte59 + "' != '" + (byte) 100 + "'", byte59 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) 100 + "'", byte61 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) 10 + "'", byte67 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte77 + "' != '" + (byte) 10 + "'", byte77 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) 100 + "'", byte83 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte84 + "' != '" + (byte) 100 + "'", byte84 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + byte86 + "' != '" + (byte) 100 + "'", byte86 == (byte) 100);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare(32.0d, (double) 35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 100, (byte) 0, (byte) 0);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((-1.0d), 0.0d, (double) 35L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) (byte) 1, (short) (byte) -1, (short) (byte) 100);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        double[] doubleArray18 = new double[] { 100L, 1.0f };
        double[] doubleArray22 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray18, doubleArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray18);
        double[] doubleArray27 = new double[] { 100L, 1.0f };
        double[] doubleArray31 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray27, doubleArray31);
        double[] doubleArray35 = new double[] { 100L, 1.0f };
        double[] doubleArray39 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray35, doubleArray39);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray31, doubleArray35);
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray35);
        double double43 = org.apache.commons.lang.math.NumberUtils.min(doubleArray35);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray35);
        double double45 = org.apache.commons.lang.math.NumberUtils.max(doubleArray35);
        double[] doubleArray48 = new double[] { 100L, 1.0f };
        double[] doubleArray52 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray48, doubleArray52);
        double[] doubleArray56 = new double[] { 100L, 1.0f };
        double[] doubleArray60 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray56, doubleArray60);
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray48, doubleArray56);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray35, doubleArray48);
        double double64 = org.apache.commons.lang.math.NumberUtils.max(doubleArray48);
        double double65 = org.apache.commons.lang.math.NumberUtils.min(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) 100, (short) (byte) 100, (short) 0);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        long long2 = org.apache.commons.lang.math.NumberUtils.toLong("", (long) (byte) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        int[] intArray6 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int7 = org.apache.commons.lang.math.NumberUtils.min(intArray6);
        int int8 = org.apache.commons.lang.math.NumberUtils.min(intArray6);
        int[] intArray15 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int16 = org.apache.commons.lang.math.NumberUtils.min(intArray15);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(intArray6, intArray15);
        int[] intArray23 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int24 = org.apache.commons.lang.math.NumberUtils.max(intArray23);
        int int25 = org.apache.commons.lang.math.NumberUtils.max(intArray23);
        int int26 = org.apache.commons.lang.math.NumberUtils.max(intArray23);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(intArray15, intArray23);
        int[] intArray32 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray37 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(intArray32, intArray37);
        int int39 = org.apache.commons.lang.math.NumberUtils.max(intArray37);
        int int40 = org.apache.commons.lang.math.NumberUtils.max(intArray37);
        int[] intArray45 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(intArray45, intArray50);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(intArray37, intArray45);
        int int53 = org.apache.commons.lang.math.NumberUtils.min(intArray45);
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(intArray23, intArray45);
        int[] intArray61 = new int[] { (short) 0, '4', (byte) 0, (short) 1, (short) 10, '#' };
        int int62 = org.apache.commons.lang.math.NumberUtils.min(intArray61);
        int int63 = org.apache.commons.lang.math.NumberUtils.min(intArray61);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(intArray23, intArray61);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 0, 1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) (-1), (long) (byte) 100, (long) 'a');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) (byte) 100, (short) (byte) -1, (short) (byte) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) (byte) 100, (short) 10, (short) (byte) -1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) 52, (long) (byte) 1, (long) 10);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52L + "'", long3 == 52L);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        float float2 = org.apache.commons.lang.math.NumberUtils.toFloat("", (float) 100L);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long[] longArray4 = new long[] {};
        long[] longArray6 = new long[] { (byte) -1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(longArray4, longArray6);
        long long8 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        long long9 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray6);
        long[] longArray14 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray15 = new long[] {};
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray14, longArray15);
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(longArray6, longArray14);
        long[] longArray18 = new long[] {};
        long[] longArray20 = new long[] { (byte) -1 };
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(longArray18, longArray20);
        long long22 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        long long23 = org.apache.commons.lang.math.NumberUtils.max(longArray20);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(longArray6, longArray20);
        long long25 = org.apache.commons.lang.math.NumberUtils.max(longArray6);
        long long26 = org.apache.commons.lang.math.NumberUtils.min(longArray6);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        int[] intArray5 = new int[] { 100, (byte) 0, (-1), 1, (byte) 1 };
        int int6 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int7 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int8 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int9 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int10 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 0, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 0, (short) (byte) 1, (short) 1);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare(97.0f, (float) 10L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (byte) 10, 0, 97);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        short[] shortArray1 = new short[] { (byte) 1 };
        short short2 = org.apache.commons.lang.math.NumberUtils.min(shortArray1);
        short[] shortArray4 = new short[] { (short) -1 };
        short short5 = org.apache.commons.lang.math.NumberUtils.max(shortArray4);
        boolean boolean6 = org.apache.commons.lang.math.NumberUtils.equals(shortArray1, shortArray4);
        short[] shortArray8 = new short[] { (byte) 1 };
        short short9 = org.apache.commons.lang.math.NumberUtils.min(shortArray8);
        short[] shortArray11 = new short[] { (short) -1 };
        short short12 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray8, shortArray11);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray4, shortArray11);
        short short15 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        short[] shortArray18 = new short[] { (short) -1, (short) -1 };
        short short19 = org.apache.commons.lang.math.NumberUtils.min(shortArray18);
        short[] shortArray23 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short24 = org.apache.commons.lang.math.NumberUtils.max(shortArray23);
        short[] shortArray28 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(shortArray23, shortArray28);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray23);
        short[] shortArray32 = new short[] { (short) 100 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray32);
        short short34 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(shortArray11, shortArray32);
        short short36 = org.apache.commons.lang.math.NumberUtils.max(shortArray11);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) -1 + "'", short5 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 1 + "'", short9 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) -1 + "'", short12 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) -1 + "'", short19 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 10 + "'", short24 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 100 + "'", short34 == (short) 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -1 + "'", short36 == (short) -1);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (short) 0, (int) '4', 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte4 = org.apache.commons.lang.math.NumberUtils.max(byteArray3);
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray7);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        boolean boolean18 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray13);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte23 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        byte[] byteArray24 = null;
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(byteArray24, byteArray31);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(byteArray31, byteArray37);
        byte byte39 = org.apache.commons.lang.math.NumberUtils.max(byteArray31);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(byteArray22, byteArray31);
        boolean boolean41 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray22);
        byte byte42 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte byte43 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte48 = org.apache.commons.lang.math.NumberUtils.max(byteArray47);
        byte[] byteArray49 = null;
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(byteArray49, byteArray56);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(byteArray56, byteArray62);
        byte byte64 = org.apache.commons.lang.math.NumberUtils.max(byteArray56);
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(byteArray47, byteArray56);
        byte byte66 = org.apache.commons.lang.math.NumberUtils.max(byteArray47);
        byte byte67 = org.apache.commons.lang.math.NumberUtils.max(byteArray47);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray47);
        byte[] byteArray69 = null;
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(byteArray69, byteArray76);
        byte[] byteArray82 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean83 = org.apache.commons.lang.math.NumberUtils.equals(byteArray76, byteArray82);
        byte byte84 = org.apache.commons.lang.math.NumberUtils.min(byteArray82);
        byte byte85 = org.apache.commons.lang.math.NumberUtils.min(byteArray82);
        byte byte86 = org.apache.commons.lang.math.NumberUtils.min(byteArray82);
        boolean boolean87 = org.apache.commons.lang.math.NumberUtils.equals(byteArray47, byteArray82);
        byte byte88 = org.apache.commons.lang.math.NumberUtils.min(byteArray82);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 10 + "'", byte4 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 10 + "'", byte15 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) -1 + "'", byte16 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 10 + "'", byte23 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 100 + "'", byte39 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) -1 + "'", byte42 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 10 + "'", byte43 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 10 + "'", byte48 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 100 + "'", byte64 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + byte66 + "' != '" + (byte) 10 + "'", byte66 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) 10 + "'", byte67 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + byte84 + "' != '" + (byte) -1 + "'", byte84 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte85 + "' != '" + (byte) -1 + "'", byte85 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte86 + "' != '" + (byte) -1 + "'", byte86 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + byte88 + "' != '" + (byte) -1 + "'", byte88 == (byte) -1);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        float[] floatArray4 = new float[] { 0.0f, 35, (-1), 35 };
        float[] floatArray5 = new float[] {};
        float[] floatArray9 = new float[] { 0, 1.0f, 100 };
        float[] floatArray11 = new float[] { (-1L) };
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(floatArray9, floatArray11);
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(floatArray5, floatArray9);
        float float14 = org.apache.commons.lang.math.NumberUtils.max(floatArray9);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray9);
        float float16 = org.apache.commons.lang.math.NumberUtils.max(floatArray9);
        float[] floatArray17 = new float[] {};
        float[] floatArray21 = new float[] { 0, 1.0f, 100 };
        float[] floatArray23 = new float[] { (-1L) };
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(floatArray21, floatArray23);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(floatArray17, floatArray21);
        float[] floatArray29 = new float[] { 0, 1.0f, 100 };
        float[] floatArray31 = new float[] { (-1L) };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(floatArray29, floatArray31);
        float[] floatArray36 = new float[] { 0, ' ', 100.0f };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(floatArray31, floatArray36);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray17, floatArray31);
        float float39 = org.apache.commons.lang.math.NumberUtils.min(floatArray31);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(floatArray9, floatArray31);
        float[] floatArray44 = new float[] { 0, 1.0f, 100 };
        float[] floatArray46 = new float[] { (-1L) };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(floatArray44, floatArray46);
        float[] floatArray51 = new float[] { 0, 1.0f, 100 };
        float[] floatArray53 = new float[] { (-1L) };
        boolean boolean54 = org.apache.commons.lang.math.NumberUtils.equals(floatArray51, floatArray53);
        float float55 = org.apache.commons.lang.math.NumberUtils.max(floatArray51);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(floatArray46, floatArray51);
        float float57 = org.apache.commons.lang.math.NumberUtils.max(floatArray51);
        float[] floatArray58 = new float[] {};
        float[] floatArray62 = new float[] { 0, 1.0f, 100 };
        float[] floatArray64 = new float[] { (-1L) };
        boolean boolean65 = org.apache.commons.lang.math.NumberUtils.equals(floatArray62, floatArray64);
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(floatArray58, floatArray62);
        float[] floatArray70 = new float[] { 0, 1.0f, 100 };
        float[] floatArray72 = new float[] { (-1L) };
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(floatArray70, floatArray72);
        float[] floatArray77 = new float[] { 0, ' ', 100.0f };
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(floatArray72, floatArray77);
        float float79 = org.apache.commons.lang.math.NumberUtils.min(floatArray72);
        boolean boolean80 = org.apache.commons.lang.math.NumberUtils.equals(floatArray62, floatArray72);
        float float81 = org.apache.commons.lang.math.NumberUtils.max(floatArray62);
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(floatArray51, floatArray62);
        float[] floatArray83 = new float[] {};
        float[] floatArray87 = new float[] { 0, 1.0f, 100 };
        float[] floatArray89 = new float[] { (-1L) };
        boolean boolean90 = org.apache.commons.lang.math.NumberUtils.equals(floatArray87, floatArray89);
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(floatArray83, floatArray87);
        float float92 = org.apache.commons.lang.math.NumberUtils.max(floatArray87);
        boolean boolean93 = org.apache.commons.lang.math.NumberUtils.equals(floatArray62, floatArray87);
        boolean boolean94 = org.apache.commons.lang.math.NumberUtils.equals(floatArray9, floatArray87);
        float float95 = org.apache.commons.lang.math.NumberUtils.min(floatArray9);
        float float96 = org.apache.commons.lang.math.NumberUtils.max(floatArray9);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 35.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 100.0f + "'", float14 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 100.0f + "'", float16 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-1.0f) + "'", float39 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 100.0f + "'", float55 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 100.0f + "'", float57 == 100.0f);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-1.0f) + "'", float79 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 100.0f + "'", float81 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[]");
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + 100.0f + "'", float92 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + float95 + "' != '" + 0.0f + "'", float95 == 0.0f);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + 100.0f + "'", float96 == 100.0f);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 35.0f, (double) (byte) 0, (double) 32.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray7 = new long[] { 52L, (short) 1 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray7);
        long[] longArray9 = new long[] {};
        long[] longArray11 = new long[] { (byte) -1 };
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray11);
        long[] longArray13 = new long[] {};
        long[] longArray15 = new long[] { (byte) -1 };
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(longArray13, longArray15);
        long long17 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        long long18 = org.apache.commons.lang.math.NumberUtils.max(longArray15);
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(longArray11, longArray15);
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray15);
        long long21 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long long22 = org.apache.commons.lang.math.NumberUtils.min(longArray2);
        long[] longArray23 = new long[] {};
        long[] longArray25 = new long[] { (byte) -1 };
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(longArray23, longArray25);
        long[] longArray27 = new long[] {};
        long[] longArray29 = new long[] { (byte) -1 };
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(longArray27, longArray29);
        long long31 = org.apache.commons.lang.math.NumberUtils.max(longArray29);
        long long32 = org.apache.commons.lang.math.NumberUtils.max(longArray29);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(longArray25, longArray29);
        long long34 = org.apache.commons.lang.math.NumberUtils.min(longArray25);
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray25);
        long long36 = org.apache.commons.lang.math.NumberUtils.max(longArray25);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte[] byteArray15 = null;
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(byteArray15, byteArray22);
        byte byte24 = org.apache.commons.lang.math.NumberUtils.min(byteArray22);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        byte byte26 = org.apache.commons.lang.math.NumberUtils.min(byteArray22);
        byte byte27 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray22);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray13);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte35 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte byte36 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte byte37 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte[] byteArray38 = null;
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(byteArray38, byteArray45);
        byte byte47 = org.apache.commons.lang.math.NumberUtils.min(byteArray45);
        byte byte48 = org.apache.commons.lang.math.NumberUtils.max(byteArray45);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray34, byteArray45);
        byte byte50 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte byte51 = org.apache.commons.lang.math.NumberUtils.min(byteArray34);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray34);
        byte byte53 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) -1 + "'", byte24 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 100 + "'", byte25 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) -1 + "'", byte26 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 100 + "'", byte27 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 10 + "'", byte35 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 10 + "'", byte36 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 10 + "'", byte37 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) -1 + "'", byte47 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 100 + "'", byte48 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 10 + "'", byte50 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte51 + "' != '" + (byte) -1 + "'", byte51 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) 10 + "'", byte53 == (byte) 10);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short short15 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray18 = new short[] { (short) -1, (short) -1 };
        short short19 = org.apache.commons.lang.math.NumberUtils.min(shortArray18);
        short[] shortArray23 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short24 = org.apache.commons.lang.math.NumberUtils.max(shortArray23);
        short[] shortArray28 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(shortArray23, shortArray28);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray23);
        short[] shortArray32 = new short[] { (short) 100 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray18, shortArray32);
        short short34 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short short35 = org.apache.commons.lang.math.NumberUtils.max(shortArray32);
        short short36 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short short37 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short[] shortArray41 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short42 = org.apache.commons.lang.math.NumberUtils.max(shortArray41);
        short[] shortArray46 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean47 = org.apache.commons.lang.math.NumberUtils.equals(shortArray41, shortArray46);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(shortArray32, shortArray41);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray32);
        short short50 = org.apache.commons.lang.math.NumberUtils.min(shortArray32);
        short[] shortArray55 = new short[] { (byte) -1, (short) 100, (byte) -1, (byte) -1 };
        short short56 = org.apache.commons.lang.math.NumberUtils.max(shortArray55);
        short[] shortArray59 = new short[] { (short) -1, (short) -1 };
        short short60 = org.apache.commons.lang.math.NumberUtils.min(shortArray59);
        short[] shortArray64 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short65 = org.apache.commons.lang.math.NumberUtils.max(shortArray64);
        short[] shortArray69 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(shortArray64, shortArray69);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(shortArray59, shortArray64);
        short[] shortArray73 = new short[] { (short) 100 };
        boolean boolean74 = org.apache.commons.lang.math.NumberUtils.equals(shortArray59, shortArray73);
        short short75 = org.apache.commons.lang.math.NumberUtils.min(shortArray73);
        short short76 = org.apache.commons.lang.math.NumberUtils.max(shortArray73);
        short short77 = org.apache.commons.lang.math.NumberUtils.min(shortArray73);
        short short78 = org.apache.commons.lang.math.NumberUtils.min(shortArray73);
        short[] shortArray82 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short83 = org.apache.commons.lang.math.NumberUtils.max(shortArray82);
        short[] shortArray87 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(shortArray82, shortArray87);
        boolean boolean89 = org.apache.commons.lang.math.NumberUtils.equals(shortArray73, shortArray82);
        boolean boolean90 = org.apache.commons.lang.math.NumberUtils.equals(shortArray55, shortArray73);
        boolean boolean91 = org.apache.commons.lang.math.NumberUtils.equals(shortArray32, shortArray73);
        short short92 = org.apache.commons.lang.math.NumberUtils.min(shortArray73);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 10 + "'", short15 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) -1 + "'", short19 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 10 + "'", short24 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 100 + "'", short34 == (short) 100);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 100 + "'", short35 == (short) 100);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 100 + "'", short36 == (short) 100);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 100 + "'", short37 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) 10 + "'", short42 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 100 + "'", short50 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[-1, 100, -1, -1]");
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 100 + "'", short56 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) -1 + "'", short60 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 10 + "'", short65 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) 100 + "'", short75 == (short) 100);
        org.junit.Assert.assertTrue("'" + short76 + "' != '" + (short) 100 + "'", short76 == (short) 100);
        org.junit.Assert.assertTrue("'" + short77 + "' != '" + (short) 100 + "'", short77 == (short) 100);
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 100 + "'", short78 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) 10 + "'", short83 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + short92 + "' != '" + (short) 100 + "'", short92 == (short) 100);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) ' ', 0, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray8 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray9 = new long[] {};
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(longArray8, longArray9);
        long long11 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        long long12 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        long long13 = org.apache.commons.lang.math.NumberUtils.min(longArray8);
        long long14 = org.apache.commons.lang.math.NumberUtils.min(longArray8);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray8);
        long long16 = org.apache.commons.lang.math.NumberUtils.max(longArray8);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte[] byteArray15 = null;
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(byteArray15, byteArray22);
        byte byte24 = org.apache.commons.lang.math.NumberUtils.min(byteArray22);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        byte byte26 = org.apache.commons.lang.math.NumberUtils.min(byteArray22);
        byte byte27 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray22);
        boolean boolean29 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray13);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte35 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte byte36 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte byte37 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte[] byteArray38 = null;
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(byteArray38, byteArray45);
        byte byte47 = org.apache.commons.lang.math.NumberUtils.min(byteArray45);
        byte byte48 = org.apache.commons.lang.math.NumberUtils.max(byteArray45);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray34, byteArray45);
        byte byte50 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte byte51 = org.apache.commons.lang.math.NumberUtils.min(byteArray34);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray34);
        byte[] byteArray53 = null;
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(byteArray53, byteArray60);
        byte byte62 = org.apache.commons.lang.math.NumberUtils.min(byteArray60);
        byte byte63 = org.apache.commons.lang.math.NumberUtils.max(byteArray60);
        byte byte64 = org.apache.commons.lang.math.NumberUtils.max(byteArray60);
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte70 = org.apache.commons.lang.math.NumberUtils.max(byteArray69);
        byte byte71 = org.apache.commons.lang.math.NumberUtils.max(byteArray69);
        byte byte72 = org.apache.commons.lang.math.NumberUtils.min(byteArray69);
        byte byte73 = org.apache.commons.lang.math.NumberUtils.min(byteArray69);
        byte byte74 = org.apache.commons.lang.math.NumberUtils.min(byteArray69);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(byteArray60, byteArray69);
        boolean boolean76 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray69);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte81 = org.apache.commons.lang.math.NumberUtils.max(byteArray80);
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(byteArray80, byteArray84);
        byte[] byteArray90 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte91 = org.apache.commons.lang.math.NumberUtils.max(byteArray90);
        byte byte92 = org.apache.commons.lang.math.NumberUtils.max(byteArray90);
        byte byte93 = org.apache.commons.lang.math.NumberUtils.min(byteArray90);
        byte byte94 = org.apache.commons.lang.math.NumberUtils.min(byteArray90);
        boolean boolean95 = org.apache.commons.lang.math.NumberUtils.equals(byteArray84, byteArray90);
        byte byte96 = org.apache.commons.lang.math.NumberUtils.min(byteArray84);
        boolean boolean97 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray84);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) -1 + "'", byte24 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 100 + "'", byte25 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) -1 + "'", byte26 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 100 + "'", byte27 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 10 + "'", byte35 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 10 + "'", byte36 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 10 + "'", byte37 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) -1 + "'", byte47 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 100 + "'", byte48 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 10 + "'", byte50 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte51 + "' != '" + (byte) -1 + "'", byte51 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) -1 + "'", byte62 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 100 + "'", byte63 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 100 + "'", byte64 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte70 + "' != '" + (byte) 10 + "'", byte70 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) 10 + "'", byte71 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte72 + "' != '" + (byte) -1 + "'", byte72 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte73 + "' != '" + (byte) -1 + "'", byte73 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte74 + "' != '" + (byte) -1 + "'", byte74 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte81 + "' != '" + (byte) 10 + "'", byte81 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte91 + "' != '" + (byte) 10 + "'", byte91 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte92 + "' != '" + (byte) 10 + "'", byte92 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte93 + "' != '" + (byte) -1 + "'", byte93 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte94 + "' != '" + (byte) -1 + "'", byte94 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + byte96 + "' != '" + (byte) 0 + "'", byte96 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        long[] longArray0 = new long[] {};
        long[] longArray2 = new long[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.lang.math.NumberUtils.equals(longArray0, longArray2);
        long long4 = org.apache.commons.lang.math.NumberUtils.max(longArray2);
        long[] longArray9 = new long[] { 0, (short) 1, 52, (byte) 1 };
        long long10 = org.apache.commons.lang.math.NumberUtils.max(longArray9);
        boolean boolean11 = org.apache.commons.lang.math.NumberUtils.equals(longArray2, longArray9);
        long[] longArray15 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray16 = new long[] {};
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray16);
        long long18 = org.apache.commons.lang.math.NumberUtils.min(longArray15);
        long long19 = org.apache.commons.lang.math.NumberUtils.min(longArray15);
        long[] longArray20 = new long[] {};
        long[] longArray22 = new long[] { (byte) -1 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(longArray20, longArray22);
        long[] longArray24 = new long[] {};
        long[] longArray26 = new long[] { (byte) -1 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(longArray24, longArray26);
        long long28 = org.apache.commons.lang.math.NumberUtils.max(longArray26);
        long long29 = org.apache.commons.lang.math.NumberUtils.max(longArray26);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(longArray22, longArray26);
        long[] longArray34 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray35 = new long[] {};
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(longArray34, longArray35);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(longArray26, longArray34);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(longArray15, longArray34);
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(longArray9, longArray34);
        long[] longArray40 = new long[] {};
        long[] longArray42 = new long[] { (byte) -1 };
        boolean boolean43 = org.apache.commons.lang.math.NumberUtils.equals(longArray40, longArray42);
        long long44 = org.apache.commons.lang.math.NumberUtils.max(longArray42);
        long[] longArray47 = new long[] { 52L, (short) 1 };
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(longArray42, longArray47);
        long[] longArray49 = new long[] {};
        long[] longArray51 = new long[] { (byte) -1 };
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(longArray49, longArray51);
        long[] longArray53 = new long[] {};
        long[] longArray55 = new long[] { (byte) -1 };
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(longArray53, longArray55);
        long long57 = org.apache.commons.lang.math.NumberUtils.max(longArray55);
        long long58 = org.apache.commons.lang.math.NumberUtils.max(longArray55);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(longArray51, longArray55);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(longArray42, longArray55);
        long[] longArray64 = new long[] { ' ', '4', (byte) -1 };
        long[] longArray65 = new long[] {};
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(longArray64, longArray65);
        long long67 = org.apache.commons.lang.math.NumberUtils.min(longArray64);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(longArray42, longArray64);
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(longArray34, longArray42);
        long long70 = org.apache.commons.lang.math.NumberUtils.min(longArray34);
        long long71 = org.apache.commons.lang.math.NumberUtils.max(longArray34);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 52, 1]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[52, 1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 52, -1]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) (byte) 0, (float) 1, 100.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) 0, (short) -1, (short) 100);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) 52L, (float) (byte) 10, (float) (-1L));
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) (-1), 97L, (long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) (-1.0f), (double) 1, (double) 97);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) (byte) -1, (float) (short) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) 35.0f, (double) 32.0f, (double) (-1.0f));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 10, (byte) -1, (byte) 0);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) (byte) -1, (short) 10, (short) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        int int3 = org.apache.commons.lang.math.NumberUtils.max(35, 35, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte6 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte7 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte8 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte byte10 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte byte11 = org.apache.commons.lang.math.NumberUtils.min(byteArray4);
        byte[] byteArray12 = null;
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(byteArray12, byteArray19);
        byte byte21 = org.apache.commons.lang.math.NumberUtils.min(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte26 = org.apache.commons.lang.math.NumberUtils.max(byteArray25);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(byteArray19, byteArray25);
        byte byte28 = org.apache.commons.lang.math.NumberUtils.min(byteArray25);
        byte byte29 = org.apache.commons.lang.math.NumberUtils.min(byteArray25);
        boolean boolean30 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray25);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte35 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean39 = org.apache.commons.lang.math.NumberUtils.equals(byteArray34, byteArray38);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte45 = org.apache.commons.lang.math.NumberUtils.max(byteArray44);
        byte byte46 = org.apache.commons.lang.math.NumberUtils.max(byteArray44);
        byte byte47 = org.apache.commons.lang.math.NumberUtils.min(byteArray44);
        byte byte48 = org.apache.commons.lang.math.NumberUtils.min(byteArray44);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray38, byteArray44);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte54 = org.apache.commons.lang.math.NumberUtils.max(byteArray53);
        byte[] byteArray55 = null;
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(byteArray55, byteArray62);
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean69 = org.apache.commons.lang.math.NumberUtils.equals(byteArray62, byteArray68);
        byte byte70 = org.apache.commons.lang.math.NumberUtils.max(byteArray62);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(byteArray53, byteArray62);
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(byteArray44, byteArray53);
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray53);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 10 + "'", byte6 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 10 + "'", byte10 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) -1 + "'", byte11 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) -1 + "'", byte21 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 10 + "'", byte26 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) -1 + "'", byte28 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) -1 + "'", byte29 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 10 + "'", byte35 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 10 + "'", byte45 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte46 + "' != '" + (byte) 10 + "'", byte46 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) -1 + "'", byte47 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) -1 + "'", byte48 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte54 + "' != '" + (byte) 10 + "'", byte54 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + byte70 + "' != '" + (byte) 100 + "'", byte70 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        short short3 = org.apache.commons.lang.math.NumberUtils.min((short) (byte) 10, (short) -1, (short) 0);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 97, (float) 0L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 52, (float) ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 10, (short) 100, (short) (byte) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) (byte) -1, (long) ' ', (long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short short18 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short short19 = org.apache.commons.lang.math.NumberUtils.max(shortArray16);
        short short20 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short[] shortArray22 = new short[] { (byte) 1 };
        short short23 = org.apache.commons.lang.math.NumberUtils.min(shortArray22);
        short[] shortArray25 = new short[] { (short) -1 };
        short short26 = org.apache.commons.lang.math.NumberUtils.max(shortArray25);
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(shortArray22, shortArray25);
        short[] shortArray31 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short32 = org.apache.commons.lang.math.NumberUtils.max(shortArray31);
        short[] shortArray36 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(shortArray31, shortArray36);
        short[] shortArray39 = new short[] { (byte) 1 };
        short short40 = org.apache.commons.lang.math.NumberUtils.min(shortArray39);
        short[] shortArray42 = new short[] { (short) -1 };
        short short43 = org.apache.commons.lang.math.NumberUtils.max(shortArray42);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(shortArray39, shortArray42);
        boolean boolean45 = org.apache.commons.lang.math.NumberUtils.equals(shortArray36, shortArray39);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(shortArray25, shortArray36);
        short[] shortArray48 = new short[] { (short) -1 };
        short short49 = org.apache.commons.lang.math.NumberUtils.max(shortArray48);
        short[] shortArray52 = new short[] { (short) -1, (short) -1 };
        short short53 = org.apache.commons.lang.math.NumberUtils.min(shortArray52);
        short[] shortArray57 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short58 = org.apache.commons.lang.math.NumberUtils.max(shortArray57);
        short[] shortArray62 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(shortArray57, shortArray62);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(shortArray52, shortArray57);
        short[] shortArray66 = new short[] { (short) 100 };
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(shortArray52, shortArray66);
        short short68 = org.apache.commons.lang.math.NumberUtils.max(shortArray52);
        short[] shortArray71 = new short[] { (short) -1, (short) -1 };
        short short72 = org.apache.commons.lang.math.NumberUtils.min(shortArray71);
        short[] shortArray76 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short77 = org.apache.commons.lang.math.NumberUtils.max(shortArray76);
        short[] shortArray81 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean82 = org.apache.commons.lang.math.NumberUtils.equals(shortArray76, shortArray81);
        boolean boolean83 = org.apache.commons.lang.math.NumberUtils.equals(shortArray71, shortArray76);
        short[] shortArray85 = new short[] { (short) 100 };
        boolean boolean86 = org.apache.commons.lang.math.NumberUtils.equals(shortArray71, shortArray85);
        boolean boolean87 = org.apache.commons.lang.math.NumberUtils.equals(shortArray52, shortArray71);
        boolean boolean88 = org.apache.commons.lang.math.NumberUtils.equals(shortArray48, shortArray52);
        boolean boolean89 = org.apache.commons.lang.math.NumberUtils.equals(shortArray25, shortArray52);
        boolean boolean90 = org.apache.commons.lang.math.NumberUtils.equals(shortArray16, shortArray25);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 100 + "'", short18 == (short) 100);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 100 + "'", short20 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 1 + "'", short23 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) -1 + "'", short26 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 10 + "'", short32 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 1 + "'", short40 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) -1 + "'", short43 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) -1 + "'", short49 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) -1 + "'", short53 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) 10 + "'", short58 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) -1 + "'", short68 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) -1 + "'", short72 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray76), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short77 + "' != '" + (short) 10 + "'", short77 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray85), "[100]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) (byte) 100, (float) (byte) 1, (float) 1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((double) (short) 1, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        byte byte3 = org.apache.commons.lang.math.NumberUtils.max((byte) 100, (byte) 100, (byte) 0);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((-1.0d), 10.0d, (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        double[] doubleArray2 = new double[] { 100L, 1.0f };
        double[] doubleArray6 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray6);
        double[] doubleArray10 = new double[] { 100L, 1.0f };
        double[] doubleArray14 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray14);
        boolean boolean16 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray6, doubleArray10);
        double double17 = org.apache.commons.lang.math.NumberUtils.max(doubleArray10);
        double[] doubleArray18 = null;
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray10, doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        double double3 = org.apache.commons.lang.math.NumberUtils.max((double) 1.0f, (double) 0, (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 32, (float) (short) 100, 0.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) 'a', (int) 'a', (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        int int3 = org.apache.commons.lang.math.NumberUtils.min(10, (int) '#', 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) 10, (short) (byte) -1, (short) (byte) 0);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        double double3 = org.apache.commons.lang.math.NumberUtils.min((double) (-1.0f), (-1.0d), 32.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte14 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray13);
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte23 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        byte byte24 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        byte byte25 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte30 = org.apache.commons.lang.math.NumberUtils.max(byteArray29);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean34 = org.apache.commons.lang.math.NumberUtils.equals(byteArray29, byteArray33);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte40 = org.apache.commons.lang.math.NumberUtils.max(byteArray39);
        byte byte41 = org.apache.commons.lang.math.NumberUtils.max(byteArray39);
        byte byte42 = org.apache.commons.lang.math.NumberUtils.min(byteArray39);
        byte byte43 = org.apache.commons.lang.math.NumberUtils.min(byteArray39);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(byteArray33, byteArray39);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte49 = org.apache.commons.lang.math.NumberUtils.max(byteArray48);
        byte[] byteArray50 = null;
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean58 = org.apache.commons.lang.math.NumberUtils.equals(byteArray50, byteArray57);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(byteArray57, byteArray63);
        byte byte65 = org.apache.commons.lang.math.NumberUtils.max(byteArray57);
        boolean boolean66 = org.apache.commons.lang.math.NumberUtils.equals(byteArray48, byteArray57);
        boolean boolean67 = org.apache.commons.lang.math.NumberUtils.equals(byteArray39, byteArray48);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(byteArray22, byteArray39);
        byte byte69 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray22);
        byte byte71 = org.apache.commons.lang.math.NumberUtils.min(byteArray22);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 10 + "'", byte14 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 100 + "'", byte16 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 100 + "'", byte17 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 10 + "'", byte23 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 10 + "'", byte24 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 10 + "'", byte25 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 10 + "'", byte30 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) 10 + "'", byte40 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 10 + "'", byte41 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) -1 + "'", byte42 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) -1 + "'", byte43 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 10 + "'", byte49 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 100 + "'", byte65 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + byte69 + "' != '" + (byte) 10 + "'", byte69 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) -1 + "'", byte71 == (byte) -1);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        float float3 = org.apache.commons.lang.math.NumberUtils.min((float) (byte) 10, (float) 0L, (float) (byte) 0);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((-1), (int) '#', 97);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(byteArray0, byteArray7);
        byte byte9 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte byte10 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte16 = org.apache.commons.lang.math.NumberUtils.max(byteArray15);
        byte byte17 = org.apache.commons.lang.math.NumberUtils.max(byteArray15);
        byte byte18 = org.apache.commons.lang.math.NumberUtils.max(byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte23 = org.apache.commons.lang.math.NumberUtils.max(byteArray22);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(byteArray22, byteArray26);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte33 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte byte34 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte byte35 = org.apache.commons.lang.math.NumberUtils.min(byteArray32);
        byte byte36 = org.apache.commons.lang.math.NumberUtils.min(byteArray32);
        boolean boolean37 = org.apache.commons.lang.math.NumberUtils.equals(byteArray26, byteArray32);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte42 = org.apache.commons.lang.math.NumberUtils.max(byteArray41);
        byte[] byteArray43 = null;
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(byteArray43, byteArray50);
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(byteArray50, byteArray56);
        byte byte58 = org.apache.commons.lang.math.NumberUtils.max(byteArray50);
        boolean boolean59 = org.apache.commons.lang.math.NumberUtils.equals(byteArray41, byteArray50);
        boolean boolean60 = org.apache.commons.lang.math.NumberUtils.equals(byteArray32, byteArray41);
        boolean boolean61 = org.apache.commons.lang.math.NumberUtils.equals(byteArray15, byteArray32);
        byte byte62 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        byte byte63 = org.apache.commons.lang.math.NumberUtils.max(byteArray32);
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(byteArray7, byteArray32);
        byte byte65 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte66 = org.apache.commons.lang.math.NumberUtils.max(byteArray7);
        byte byte67 = org.apache.commons.lang.math.NumberUtils.min(byteArray7);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) -1 + "'", byte10 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 10 + "'", byte16 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 10 + "'", byte17 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 10 + "'", byte18 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 10 + "'", byte23 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 10 + "'", byte33 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 10 + "'", byte34 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) -1 + "'", byte35 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) -1 + "'", byte36 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 10 + "'", byte42 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) 100 + "'", byte58 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 10 + "'", byte62 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 10 + "'", byte63 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 100 + "'", byte65 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte66 + "' != '" + (byte) 100 + "'", byte66 == (byte) 100);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) -1 + "'", byte67 == (byte) -1);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        short short3 = org.apache.commons.lang.math.NumberUtils.max((short) (byte) 0, (short) (byte) 10, (short) (byte) 10);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int12 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(intArray9, intArray17);
        int int25 = org.apache.commons.lang.math.NumberUtils.max(intArray9);
        int int26 = org.apache.commons.lang.math.NumberUtils.min(intArray9);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        int int3 = org.apache.commons.lang.math.NumberUtils.min((int) (short) 10, (int) (byte) 0, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        long long2 = org.apache.commons.lang.math.NumberUtils.toLong("", (long) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) (byte) 10, 0L, (long) (short) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        int[] intArray5 = new int[] { (-1), (-1), 1, 52, ' ' };
        int int6 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int int7 = org.apache.commons.lang.math.NumberUtils.max(intArray5);
        int int8 = org.apache.commons.lang.math.NumberUtils.min(intArray5);
        int[] intArray13 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray18 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(intArray13, intArray18);
        int int20 = org.apache.commons.lang.math.NumberUtils.max(intArray18);
        int int21 = org.apache.commons.lang.math.NumberUtils.max(intArray18);
        int[] intArray26 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(intArray26, intArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(intArray18, intArray26);
        int int34 = org.apache.commons.lang.math.NumberUtils.min(intArray26);
        int int35 = org.apache.commons.lang.math.NumberUtils.max(intArray26);
        int int36 = org.apache.commons.lang.math.NumberUtils.max(intArray26);
        int int37 = org.apache.commons.lang.math.NumberUtils.max(intArray26);
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray26);
        int[] intArray43 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(intArray43, intArray48);
        int int50 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int int51 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int[] intArray56 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean62 = org.apache.commons.lang.math.NumberUtils.equals(intArray56, intArray61);
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(intArray48, intArray56);
        int int64 = org.apache.commons.lang.math.NumberUtils.min(intArray56);
        int int65 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        int int66 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        int int67 = org.apache.commons.lang.math.NumberUtils.max(intArray56);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(intArray5, intArray56);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, -1, 1, 52, 32]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        int int2 = org.apache.commons.lang.math.NumberUtils.compare((float) 100L, (float) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        short[] shortArray2 = new short[] { (short) -1, (short) -1 };
        short short3 = org.apache.commons.lang.math.NumberUtils.min(shortArray2);
        short[] shortArray7 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short8 = org.apache.commons.lang.math.NumberUtils.max(shortArray7);
        short[] shortArray12 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(shortArray7, shortArray12);
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray7);
        short[] shortArray16 = new short[] { (short) 100 };
        boolean boolean17 = org.apache.commons.lang.math.NumberUtils.equals(shortArray2, shortArray16);
        short short18 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short short19 = org.apache.commons.lang.math.NumberUtils.max(shortArray16);
        short short20 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short short21 = org.apache.commons.lang.math.NumberUtils.min(shortArray16);
        short[] shortArray25 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short26 = org.apache.commons.lang.math.NumberUtils.max(shortArray25);
        short[] shortArray30 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(shortArray25, shortArray30);
        boolean boolean32 = org.apache.commons.lang.math.NumberUtils.equals(shortArray16, shortArray25);
        short short33 = org.apache.commons.lang.math.NumberUtils.max(shortArray25);
        short short34 = org.apache.commons.lang.math.NumberUtils.max(shortArray25);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 100 + "'", short18 == (short) 100);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 100 + "'", short20 == (short) 100);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 100 + "'", short21 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 10 + "'", short26 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 10 + "'", short33 == (short) 10);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 10 + "'", short34 == (short) 10);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) (byte) 100, 97L, (long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        double[] doubleArray2 = new double[] { (-1.0f), 100L };
        double double3 = org.apache.commons.lang.math.NumberUtils.min(doubleArray2);
        double double4 = org.apache.commons.lang.math.NumberUtils.min(doubleArray2);
        double[] doubleArray7 = new double[] { 100L, 1.0f };
        double[] doubleArray11 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean12 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray7, doubleArray11);
        double[] doubleArray15 = new double[] { 100L, 1.0f };
        double[] doubleArray19 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray15, doubleArray19);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray11, doubleArray15);
        double double22 = org.apache.commons.lang.math.NumberUtils.min(doubleArray15);
        double double23 = org.apache.commons.lang.math.NumberUtils.max(doubleArray15);
        double double24 = org.apache.commons.lang.math.NumberUtils.min(doubleArray15);
        boolean boolean25 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray15);
        double[] doubleArray28 = new double[] { 100L, 1.0f };
        double[] doubleArray32 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray28, doubleArray32);
        double double34 = org.apache.commons.lang.math.NumberUtils.max(doubleArray28);
        double[] doubleArray37 = new double[] { 100L, 1.0f };
        double[] doubleArray41 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray37, doubleArray41);
        double[] doubleArray45 = new double[] { 100L, 1.0f };
        double[] doubleArray49 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean50 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray49);
        boolean boolean51 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray41, doubleArray45);
        double double52 = org.apache.commons.lang.math.NumberUtils.min(doubleArray45);
        double double53 = org.apache.commons.lang.math.NumberUtils.min(doubleArray45);
        double double54 = org.apache.commons.lang.math.NumberUtils.max(doubleArray45);
        double double55 = org.apache.commons.lang.math.NumberUtils.min(doubleArray45);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray28, doubleArray45);
        double[] doubleArray59 = new double[] { 100L, 1.0f };
        double[] doubleArray63 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean64 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray59, doubleArray63);
        double[] doubleArray67 = new double[] { 100L, 1.0f };
        double[] doubleArray71 = new double[] { (short) 100, 10.0f, (byte) 1 };
        boolean boolean72 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray67, doubleArray71);
        boolean boolean73 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray63, doubleArray67);
        double double74 = org.apache.commons.lang.math.NumberUtils.min(doubleArray63);
        double double75 = org.apache.commons.lang.math.NumberUtils.max(doubleArray63);
        double double76 = org.apache.commons.lang.math.NumberUtils.max(doubleArray63);
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray45, doubleArray63);
        boolean boolean78 = org.apache.commons.lang.math.NumberUtils.equals(doubleArray2, doubleArray45);
        double double79 = org.apache.commons.lang.math.NumberUtils.max(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        int int3 = org.apache.commons.lang.math.NumberUtils.max((int) (short) 100, (-1), 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte4 = org.apache.commons.lang.math.NumberUtils.max(byteArray3);
        byte[] byteArray5 = null;
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean13 = org.apache.commons.lang.math.NumberUtils.equals(byteArray5, byteArray12);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean19 = org.apache.commons.lang.math.NumberUtils.equals(byteArray12, byteArray18);
        byte byte20 = org.apache.commons.lang.math.NumberUtils.max(byteArray12);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray12);
        byte byte22 = org.apache.commons.lang.math.NumberUtils.min(byteArray3);
        byte byte23 = org.apache.commons.lang.math.NumberUtils.min(byteArray3);
        byte byte24 = org.apache.commons.lang.math.NumberUtils.min(byteArray3);
        byte[] byteArray25 = null;
        boolean boolean26 = org.apache.commons.lang.math.NumberUtils.equals(byteArray3, byteArray25);
        byte[] byteArray27 = null;
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean35 = org.apache.commons.lang.math.NumberUtils.equals(byteArray27, byteArray34);
        byte byte36 = org.apache.commons.lang.math.NumberUtils.min(byteArray34);
        byte byte37 = org.apache.commons.lang.math.NumberUtils.max(byteArray34);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte42 = org.apache.commons.lang.math.NumberUtils.max(byteArray41);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(byteArray41, byteArray45);
        byte byte47 = org.apache.commons.lang.math.NumberUtils.min(byteArray45);
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(byteArray34, byteArray45);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(byteArray25, byteArray45);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte55 = org.apache.commons.lang.math.NumberUtils.max(byteArray54);
        byte byte56 = org.apache.commons.lang.math.NumberUtils.max(byteArray54);
        byte byte57 = org.apache.commons.lang.math.NumberUtils.min(byteArray54);
        byte byte58 = org.apache.commons.lang.math.NumberUtils.min(byteArray54);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte64 = org.apache.commons.lang.math.NumberUtils.max(byteArray63);
        byte byte65 = org.apache.commons.lang.math.NumberUtils.max(byteArray63);
        byte byte66 = org.apache.commons.lang.math.NumberUtils.min(byteArray63);
        byte byte67 = org.apache.commons.lang.math.NumberUtils.min(byteArray63);
        boolean boolean68 = org.apache.commons.lang.math.NumberUtils.equals(byteArray54, byteArray63);
        byte[] byteArray69 = null;
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean77 = org.apache.commons.lang.math.NumberUtils.equals(byteArray69, byteArray76);
        byte[] byteArray82 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean83 = org.apache.commons.lang.math.NumberUtils.equals(byteArray76, byteArray82);
        byte byte84 = org.apache.commons.lang.math.NumberUtils.max(byteArray76);
        boolean boolean85 = org.apache.commons.lang.math.NumberUtils.equals(byteArray63, byteArray76);
        byte byte86 = org.apache.commons.lang.math.NumberUtils.min(byteArray63);
        boolean boolean87 = org.apache.commons.lang.math.NumberUtils.equals(byteArray45, byteArray63);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 10 + "'", byte4 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 100 + "'", byte20 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) -1 + "'", byte22 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) -1 + "'", byte23 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) -1 + "'", byte24 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) -1 + "'", byte36 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 100 + "'", byte37 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 10 + "'", byte42 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 0 + "'", byte47 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte55 + "' != '" + (byte) 10 + "'", byte55 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 10 + "'", byte56 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) -1 + "'", byte57 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) -1 + "'", byte58 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 10 + "'", byte64 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 10 + "'", byte65 == (byte) 10);
        org.junit.Assert.assertTrue("'" + byte66 + "' != '" + (byte) -1 + "'", byte66 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) -1 + "'", byte67 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + byte84 + "' != '" + (byte) 100 + "'", byte84 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + byte86 + "' != '" + (byte) -1 + "'", byte86 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        short[] shortArray3 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short4 = org.apache.commons.lang.math.NumberUtils.max(shortArray3);
        short[] shortArray8 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean9 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray8);
        short[] shortArray12 = new short[] { (short) -1, (short) -1 };
        short short13 = org.apache.commons.lang.math.NumberUtils.min(shortArray12);
        short[] shortArray17 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short18 = org.apache.commons.lang.math.NumberUtils.max(shortArray17);
        short[] shortArray22 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(shortArray17, shortArray22);
        boolean boolean24 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray17);
        short[] shortArray26 = new short[] { (short) 100 };
        boolean boolean27 = org.apache.commons.lang.math.NumberUtils.equals(shortArray12, shortArray26);
        boolean boolean28 = org.apache.commons.lang.math.NumberUtils.equals(shortArray3, shortArray26);
        short[] shortArray31 = new short[] { (short) -1, (short) -1 };
        short short32 = org.apache.commons.lang.math.NumberUtils.min(shortArray31);
        boolean boolean33 = org.apache.commons.lang.math.NumberUtils.equals(shortArray26, shortArray31);
        short short34 = org.apache.commons.lang.math.NumberUtils.min(shortArray26);
        short[] shortArray37 = new short[] { (short) -1, (short) -1 };
        short short38 = org.apache.commons.lang.math.NumberUtils.min(shortArray37);
        short[] shortArray42 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short43 = org.apache.commons.lang.math.NumberUtils.max(shortArray42);
        short[] shortArray47 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean48 = org.apache.commons.lang.math.NumberUtils.equals(shortArray42, shortArray47);
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(shortArray37, shortArray42);
        short[] shortArray51 = new short[] { (short) 100 };
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(shortArray37, shortArray51);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(shortArray26, shortArray51);
        short[] shortArray57 = new short[] { (byte) 1, (byte) 1, (short) 10 };
        short short58 = org.apache.commons.lang.math.NumberUtils.max(shortArray57);
        short[] shortArray62 = new short[] { (byte) 1, (short) 10, (short) 10 };
        boolean boolean63 = org.apache.commons.lang.math.NumberUtils.equals(shortArray57, shortArray62);
        short[] shortArray65 = new short[] { (byte) 1 };
        short short66 = org.apache.commons.lang.math.NumberUtils.min(shortArray65);
        short[] shortArray68 = new short[] { (short) -1 };
        short short69 = org.apache.commons.lang.math.NumberUtils.max(shortArray68);
        boolean boolean70 = org.apache.commons.lang.math.NumberUtils.equals(shortArray65, shortArray68);
        boolean boolean71 = org.apache.commons.lang.math.NumberUtils.equals(shortArray62, shortArray65);
        short short72 = org.apache.commons.lang.math.NumberUtils.max(shortArray65);
        short short73 = org.apache.commons.lang.math.NumberUtils.min(shortArray65);
        short short74 = org.apache.commons.lang.math.NumberUtils.max(shortArray65);
        boolean boolean75 = org.apache.commons.lang.math.NumberUtils.equals(shortArray26, shortArray65);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) -1 + "'", short13 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 10 + "'", short18 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) -1 + "'", short32 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 100 + "'", short34 == (short) 100);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) -1 + "'", short38 == (short) -1);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 10 + "'", short43 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) 10 + "'", short58 == (short) 10);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[1]");
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) 1 + "'", short66 == (short) 1);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) -1 + "'", short69 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) 1 + "'", short72 == (short) 1);
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) 1 + "'", short73 == (short) 1);
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) 1 + "'", short74 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        long long3 = org.apache.commons.lang.math.NumberUtils.min((long) (byte) 0, 1L, (long) (short) -1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        byte byte5 = org.apache.commons.lang.math.NumberUtils.max(byteArray4);
        byte[] byteArray6 = null;
        byte[] byteArray13 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean14 = org.apache.commons.lang.math.NumberUtils.equals(byteArray6, byteArray13);
        byte byte15 = org.apache.commons.lang.math.NumberUtils.min(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte20 = org.apache.commons.lang.math.NumberUtils.max(byteArray19);
        boolean boolean21 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray19);
        byte byte22 = org.apache.commons.lang.math.NumberUtils.max(byteArray13);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte27 = org.apache.commons.lang.math.NumberUtils.max(byteArray26);
        byte[] byteArray28 = null;
        byte[] byteArray35 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 0, (byte) -1, (byte) 0 };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(byteArray28, byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(byteArray35, byteArray41);
        byte byte43 = org.apache.commons.lang.math.NumberUtils.max(byteArray35);
        boolean boolean44 = org.apache.commons.lang.math.NumberUtils.equals(byteArray26, byteArray35);
        byte byte45 = org.apache.commons.lang.math.NumberUtils.max(byteArray35);
        boolean boolean46 = org.apache.commons.lang.math.NumberUtils.equals(byteArray13, byteArray35);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        byte byte51 = org.apache.commons.lang.math.NumberUtils.max(byteArray50);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 0 };
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(byteArray50, byteArray54);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(byteArray35, byteArray50);
        boolean boolean57 = org.apache.commons.lang.math.NumberUtils.equals(byteArray4, byteArray35);
        byte byte58 = org.apache.commons.lang.math.NumberUtils.min(byteArray35);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 10 + "'", byte5 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) -1 + "'", byte15 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 10 + "'", byte20 == (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 100 + "'", byte22 == (byte) 100);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 10 + "'", byte27 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100, 100, -1, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 100 + "'", byte43 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 100 + "'", byte45 == (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + byte51 + "' != '" + (byte) 10 + "'", byte51 == (byte) 10);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) -1 + "'", byte58 == (byte) -1);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 100L, (float) (short) 1, (float) 97);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        int[] intArray4 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray9 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean10 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray9);
        int int11 = org.apache.commons.lang.math.NumberUtils.min(intArray4);
        int int12 = org.apache.commons.lang.math.NumberUtils.min(intArray4);
        int[] intArray17 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean23 = org.apache.commons.lang.math.NumberUtils.equals(intArray17, intArray22);
        int int24 = org.apache.commons.lang.math.NumberUtils.max(intArray22);
        int int25 = org.apache.commons.lang.math.NumberUtils.max(intArray22);
        int[] intArray30 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean36 = org.apache.commons.lang.math.NumberUtils.equals(intArray30, intArray35);
        int int37 = org.apache.commons.lang.math.NumberUtils.min(intArray35);
        int int38 = org.apache.commons.lang.math.NumberUtils.min(intArray35);
        int[] intArray43 = new int[] { (byte) 1, 100, (byte) 100, (byte) 100 };
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        boolean boolean49 = org.apache.commons.lang.math.NumberUtils.equals(intArray43, intArray48);
        int int50 = org.apache.commons.lang.math.NumberUtils.max(intArray48);
        int int51 = org.apache.commons.lang.math.NumberUtils.min(intArray48);
        boolean boolean52 = org.apache.commons.lang.math.NumberUtils.equals(intArray35, intArray48);
        boolean boolean53 = org.apache.commons.lang.math.NumberUtils.equals(intArray22, intArray35);
        int[] intArray54 = null;
        boolean boolean55 = org.apache.commons.lang.math.NumberUtils.equals(intArray22, intArray54);
        boolean boolean56 = org.apache.commons.lang.math.NumberUtils.equals(intArray4, intArray22);
        int int57 = org.apache.commons.lang.math.NumberUtils.max(intArray4);
        java.lang.Class<?> wildcardClass58 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        float[] floatArray0 = new float[] {};
        float[] floatArray4 = new float[] { 0, 1.0f, 100 };
        float[] floatArray6 = new float[] { (-1L) };
        boolean boolean7 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray6);
        boolean boolean8 = org.apache.commons.lang.math.NumberUtils.equals(floatArray0, floatArray4);
        float[] floatArray12 = new float[] { 0, 1.0f, 100 };
        float[] floatArray14 = new float[] { (-1L) };
        boolean boolean15 = org.apache.commons.lang.math.NumberUtils.equals(floatArray12, floatArray14);
        float[] floatArray19 = new float[] { 0, ' ', 100.0f };
        boolean boolean20 = org.apache.commons.lang.math.NumberUtils.equals(floatArray14, floatArray19);
        float float21 = org.apache.commons.lang.math.NumberUtils.min(floatArray14);
        boolean boolean22 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray14);
        float float23 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float float24 = org.apache.commons.lang.math.NumberUtils.min(floatArray4);
        float[] floatArray28 = new float[] { 0, 1.0f, 100 };
        float[] floatArray30 = new float[] { (-1L) };
        boolean boolean31 = org.apache.commons.lang.math.NumberUtils.equals(floatArray28, floatArray30);
        float[] floatArray35 = new float[] { 0, 1.0f, 100 };
        float[] floatArray37 = new float[] { (-1L) };
        boolean boolean38 = org.apache.commons.lang.math.NumberUtils.equals(floatArray35, floatArray37);
        float float39 = org.apache.commons.lang.math.NumberUtils.max(floatArray35);
        boolean boolean40 = org.apache.commons.lang.math.NumberUtils.equals(floatArray30, floatArray35);
        float float41 = org.apache.commons.lang.math.NumberUtils.max(floatArray30);
        boolean boolean42 = org.apache.commons.lang.math.NumberUtils.equals(floatArray4, floatArray30);
        float float43 = org.apache.commons.lang.math.NumberUtils.max(floatArray4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 32.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 100.0f + "'", float39 == 100.0f);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-1.0f) + "'", float41 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 100.0f + "'", float43 == 100.0f);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        float float3 = org.apache.commons.lang.math.NumberUtils.max((float) 10, (float) (-1L), (float) (short) 1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 10.0f + "'", float3 == 10.0f);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        long long3 = org.apache.commons.lang.math.NumberUtils.max((long) 1, (long) 'a', (long) (short) 10);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L);
    }
}


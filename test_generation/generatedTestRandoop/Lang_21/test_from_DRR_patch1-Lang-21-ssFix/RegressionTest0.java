import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.util.Date date0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date0, date1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.truncate(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 1L, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setYears(date0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        long long0 = org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 3600000L + "'", long0 == 3600000L);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(calendar0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        int int0 = org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addHours(date0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(obj0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addWeeks(date0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) (-1.0f), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round -1.0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        int int0 = org.apache.commons.lang3.time.DateUtils.SEMI_MONTH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1001 + "'", int0 == 1001);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray1);
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unable to parse the date: hi!");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar0, calendar1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        long long0 = org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 86400000L + "'", long0 == 86400000L);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar0, calendar1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMonths(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMinutes(date0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        long long0 = org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 60000L + "'", long0 == 60000L);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addYears(date0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addHours(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        int int0 = org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        int int0 = org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar0, calendar1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMonths(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar0, calendar1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addYears(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addHours(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addYears(date0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setSeconds(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 0.0d, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0.0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 2");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setHours(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.round(calendar0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) (-1.0f), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round -1.0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMinutes(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        int int0 = org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        int int0 = org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 6 + "'", int0 == 6);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar0, calendar1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMinutes(date0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.util.Date date0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.lang3.time.DateUtils.isSameDay(date0, date1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMinutes(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setDays(date0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        int int0 = org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar1 = org.apache.commons.lang3.time.DateUtils.toCalendar(date0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 10L, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Long");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addWeeks(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Short");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(calendar0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(date0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.util.Date date0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date0, date1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setYears(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMonths(date0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMinutes(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMinutes(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar0, calendar1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) "", 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round ");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.truncate(calendar0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.util.Date date0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date0, date1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar0, calendar1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.util.Date date0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date0, date1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar0, calendar1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMinutes(date0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        int int0 = org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 0L, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMonths(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addDays(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.Date date0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date0, date1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(date0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.util.Date date0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date0, date1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(calendar0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        long long0 = org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1000L + "'", long0 == 1000L);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setHours(date0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(date0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setYears(date0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setSeconds(date0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addWeeks(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMinutes(date0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        int int0 = org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 5 + "'", int0 == 5);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addHours(date0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setSeconds(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setSeconds(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "", "", "hi!", "" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addHours(date0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMonths(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.truncate(calendar0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.lang3.time.DateUtils dateUtils0 = new org.apache.commons.lang3.time.DateUtils();
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 100L, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        int int0 = org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addSeconds(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addYears(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMonths(date0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.util.Date date0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date0, date1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar0, calendar1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling(date0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 1001, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar0, calendar1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date7, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMonths(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date7, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date7, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date13, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar0, calendar1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date9, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar0, calendar1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addYears(date0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date4 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.truncate(calendar0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling(date13, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar0, calendar1, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor15 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date17, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date7, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMonths(date23, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date23, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Dec 01 00:00:00 CET 1972");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.truncate(date9, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate(date13, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date13, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setHours(date0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.util.TimeZone timeZone0 = org.apache.commons.lang3.time.DateUtils.UTC_TIME_ZONE;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) timeZone0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor13 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date9, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date19, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar33 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling(date11, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        java.util.Date date22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor21);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.lang.Class<?> wildcardClass16 = date13.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addWeeks(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMonths(date15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 16:40:59 CET 1970");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.round(date9, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.Class<?> wildcardClass14 = date11.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar29, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date9, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date26, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date11, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar29, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date30, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Feb 11 23:59:59 CET 1970");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date15, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) (-1.0f), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Float");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor11 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round(date26, (int) (byte) 10);
        java.lang.Class<?> wildcardClass38 = date37.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar80, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray31);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addSeconds(date32, (int) (short) -1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addHours(date34, (int) (short) 1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date36, (int) (byte) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, 1001);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date7, date40, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Feb 11 17:59:59 CET 1970");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date7, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar48, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date19, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.round(calendar63, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.truncate(date9, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date16, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 8783L + "'", long18 == 8783L);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.round(calendar48, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date15, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.ceiling(date19, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:31:59 CET 1970");
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date21, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 01 02:00:00 CET 1001");
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH: 1 -> 2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) "", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.String");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date15, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date15, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 32");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date19, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date13, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addWeeks(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date7, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar29, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date15, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar31, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addWeeks(date0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor36 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date24, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.lang.Class<?> wildcardClass33 = calendar14.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date9, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor30 = org.apache.commons.lang3.time.DateUtils.iterator(date27, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor19 = org.apache.commons.lang3.time.DateUtils.iterator(date17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar31, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "", "" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar48, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date7, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor13 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 2, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 2");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar29, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor19 = org.apache.commons.lang3.time.DateUtils.iterator(date17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 01 02:00:00 CET 1001");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, 100);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date27, 0);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date31, 1001);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date33, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 5, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date17, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling(date11, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) 0);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date59);
        java.util.Iterator<java.util.Calendar> calendarItor66 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 2);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar49, calendar64, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar31, calendar64, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) '4');
        java.lang.Class<?> wildcardClass20 = date19.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Jan 03 04:01:39 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date28, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri May 01 00:00:00 CET 1970");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date23, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date26, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 06:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 06:10:00 CET 1970");
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMonths(date15, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar34, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling(date0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor36 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor36 = org.apache.commons.lang3.time.DateUtils.iterator(calendar34, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round(date26, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 06:00:00 CET 1980");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setSeconds(date25, (int) (short) 0);
        java.util.Calendar calendar30 = org.apache.commons.lang3.time.DateUtils.toCalendar(date25);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(calendar30, 2);
        boolean boolean34 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar15, calendar30, (int) (byte) 10);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) 0);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date59);
        java.util.Iterator<java.util.Calendar> calendarItor66 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 2);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar49, calendar64, (int) (byte) 10);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar30, calendar49);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray76);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addSeconds(date77, (int) (short) -1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addHours(date79, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.setSeconds(date79, (int) (short) 0);
        java.util.Calendar calendar84 = org.apache.commons.lang3.time.DateUtils.toCalendar(date79);
        long long86 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar84, 1);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar30, calendar84);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.round(calendar30, 0);
        long long91 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar89, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar0, calendar89, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 527039L + "'", long86 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 86400000L + "'", long91 == 86400000L);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setDays(date9, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date9, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 2);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date7, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor13 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date7, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(date9, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.setHours(date18, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar83, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar80, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar80, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor19 = org.apache.commons.lang3.time.DateUtils.iterator(date13, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date15, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) calendar20, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date4 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date15, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1440L + "'", long15 == 1440L);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar38 = org.apache.commons.lang3.time.DateUtils.round(calendar36, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        java.util.Calendar calendar87 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) boolean32, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addHours(date21, (int) (byte) 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int42 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date7, date21, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 2005");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMonths(date15, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH: 1 -> 2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Feb 11 23:59:59 CET 1970");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date13, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:00:00 CET 97");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMonths(date0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        java.lang.Class<?> wildcardClass16 = calendarItor15.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor92 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor30 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date28, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.util.Date date29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date28, date29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.util.Date date0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addMonths(date8, (int) '#');
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setYears(date12, (int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date24, (int) (byte) 10);
        boolean boolean29 = org.apache.commons.lang3.time.DateUtils.isSameDay(date12, date28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date28, 1001);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setDays(date41, 2);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date31, date41);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date0, date41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor36 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date7, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate(date13, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1974");
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date11, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addHours(date19, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date19, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:59:59 CET 1969");
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setYears(date31, (int) (byte) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (byte) 0);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date45, (int) (byte) 10);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setYears(date49, (int) (byte) 1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addDays(date51, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date51, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date55, (int) (byte) 1);
        boolean boolean58 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date35, date55);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date35, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.round(date21, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:59:59 CET 2");
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(date15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 16:40:59 CET 1970");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar29, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar31, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar31, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 23L + "'", long34 == 23L);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date11, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, 2);
        java.util.Date date35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date34, date35, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 02:35:00 CET 1970");
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor19 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date15, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(calendar0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date23, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate(date13, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date7, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date26, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date30, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 1001, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar80, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar80, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) boolean28, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Boolean");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor23 = org.apache.commons.lang3.time.DateUtils.iterator(date13, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor21);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date21, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:09:59 CET 1969");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date32, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 01 00:01:36 CET 2");
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 0);
        java.lang.Class<?> wildcardClass26 = date25.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date7, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date7, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1974");
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setDays(date19, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor28 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 4, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date13, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Jun 01 00:00:00 CET 100");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.util.Date date0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date12, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addHours(date14, 1001);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        boolean boolean27 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date16, date26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date26, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date0, date29, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 07 23:59:59 CET 1970");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date16, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Jun 01 00:00:00 CET 100");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) 0);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date59);
        java.util.Iterator<java.util.Calendar> calendarItor66 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 2);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar49, calendar64, (int) (byte) 10);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(calendar83, 2);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar83, (int) (byte) 0);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar49, calendar87);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar31, calendar87, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor2 = org.apache.commons.lang3.time.DateUtils.iterator(date0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date11, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar40 = org.apache.commons.lang3.time.DateUtils.round(calendar34, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date39, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar87 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar83, calendar87, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMinutes(date25, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, 2);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) 0);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date59);
        java.util.Iterator<java.util.Calendar> calendarItor66 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 2);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar49, calendar64, (int) (byte) 10);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(calendar83, 2);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar83, (int) (byte) 0);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar49, calendar87);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar31, calendar49, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMonths(date15, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setDays(date13, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:00:00 CET 97");
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date34, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 02:35:00 CET 1970");
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar29, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardItor90);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray1);
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unable to parse the date: ");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date26, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date24, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setDays(date26, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date15, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1001");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date9, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) strArray6, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round [Ljava.lang.String;@39d45abf");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate(date11, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date17, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 01 00:10:00 CET 1972");
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date19, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:01:39 CET 1974");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1974");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling(date15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMinutes(date49, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date21, 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) '4');
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date33, 5);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date21, date39, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:09:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (-1));
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setHours(date21, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setHours(date23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:58:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 10 05:58:59 CET 2");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date21, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 2, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 2");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date28, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri May 01 00:00:00 CET 1970");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) '4');
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date19, (int) '4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Jan 03 04:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Jan 05 08:01:39 CET 1969");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor40 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date9, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 16:40:59 CET 1970");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar36, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date40, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date11, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMinutes(date21, 4);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setHours(date40, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date40, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar48, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Iterator<java.util.Calendar> calendarItor35 = org.apache.commons.lang3.time.DateUtils.iterator(calendar33, 2);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar33, calendar50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar50, 0);
        long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, 6);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar53, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar72, (int) (short) 1);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar72, (int) (byte) 1);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar53, calendar72);
        boolean boolean96 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            long long98 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar53, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date45, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Oct 27 23:59:59 CET 1972");
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) "", (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on ");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Iterator<java.util.Calendar> calendarItor35 = org.apache.commons.lang3.time.DateUtils.iterator(calendar33, 2);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar33, calendar50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar50, 0);
        long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, 6);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar53, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar72, (int) (short) 1);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar72, (int) (byte) 1);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar53, calendar72);
        boolean boolean96 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            long long98 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar53, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date7, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setHours(date11, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 100.0d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 100.0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar31, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 5);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date39, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date39, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor34 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date9, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 31 23:59:59 CET 1969");
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 527039L + "'", long22 == 527039L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2764799000L + "'", long24 == 2764799000L);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Iterator<java.util.Calendar> calendarItor35 = org.apache.commons.lang3.time.DateUtils.iterator(calendar33, 2);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar33, calendar50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar50, 0);
        long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, 6);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar53, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar72, (int) (short) 1);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar72, (int) (byte) 1);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar53, calendar72);
        boolean boolean96 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar98 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar53, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling(obj0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(calendar15, 2);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setSeconds(date27, (int) (short) 0);
        java.util.Calendar calendar32 = org.apache.commons.lang3.time.DateUtils.toCalendar(date27);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar15, calendar32);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.round(calendar15, (int) (short) 1);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.truncate(calendar15, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar0, calendar37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round(date15, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Apr 30 23:59:59 CET 1970");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar48);
        java.lang.Class<?> wildcardClass51 = calendar48.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, 2);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar49, 2);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setSeconds(date61, (int) (short) 0);
        java.util.Calendar calendar66 = org.apache.commons.lang3.time.DateUtils.toCalendar(date61);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar49, calendar66);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.round(calendar66, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar34, calendar66, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.lang.Class<?> wildcardClass14 = date13.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar29, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar29, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardItor90);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date15, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 31 23:59:59 CET 97");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.util.Calendar calendar54 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(date15, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar88, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar31, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date21, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 46079L + "'", long23 == 46079L);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date11, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate(date13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar31, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling(date9, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Iterator<java.util.Calendar> calendarItor35 = org.apache.commons.lang3.time.DateUtils.iterator(calendar33, 2);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar33, calendar50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar50, 0);
        long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, 6);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar53, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar72, (int) (short) 1);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar72, (int) (byte) 1);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar53, calendar72);
        boolean boolean96 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        long long98 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 23L + "'", long98 == 23L);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addHours(date19, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.ceiling(date19, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:59:59 CET 1969");
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar36, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.truncate(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling(date13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addSeconds(date11, (int) ' ');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date25);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date21, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMinutes(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar29, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date39, (int) (byte) 10);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setYears(date43, (int) (byte) 1);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) 'a');
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date48);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Jan 01 00:01:36 CET 2");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.round(date25, 0);
        java.util.Date date35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling(date11, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, 4);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date31, (int) '4');
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMinutes(date31, 1);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMinutes(date21, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar29, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.Class<?> wildcardClass22 = date19.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round(date17, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMinutes(date17, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 01 00:00:00 CET 1971");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar52, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        java.util.Calendar calendar37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar37, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 10);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date28, date45, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date18, date28);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.toCalendar(date18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar58 = org.apache.commons.lang3.time.DateUtils.truncate(calendar56, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-90000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar73, 6);
        long long77 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) calendar73, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar88, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date9, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 31622399000L + "'", long15 == 31622399000L);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date15, 5);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date17, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon May 01 00:00:00 CEST 1978");
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 527039L, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 527039");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addYears(date21, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 31 23:59:59 CET 2066");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Mar 18 04:59:59 CET 100");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar29, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardItor90);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar52, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar52, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date21, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, (int) (short) 100);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date28, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar52, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.truncate(date21, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400010L + "'", long23 == 86400010L);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date9, (int) (short) 0);
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date13, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setDays(date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 31622399L + "'", long15 == 31622399L);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date7, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date34, 0);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date26, date34);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date26, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.ceiling(date43, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:05 CET 1970");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date11, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date17, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMonths(date26, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar14, calendar19, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date17, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 22:59:59 CET 1969");
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addMonths(date8, (int) '#');
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.truncate(date8, 1);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date14);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar0, calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar38 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date30, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date27, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date23, (int) (short) 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.round(date50, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date23, date50, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 31622399L + "'", long28 == 31622399L);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setHours(date11, 2);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate(date13, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Dec 01 02:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Dec 01 00:00:00 CET 1972");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addDays(date25, 2);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date17, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:35 CET 1970");
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.ceiling(date23, 1001);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addDays(date15, 1001);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Sep 28 00:01:39 CET 1972");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:01:39 CET 1970");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMonths(date19, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 100);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMonths(date33, (int) (short) 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date33, 0);
        java.util.Iterator<java.util.Calendar> calendarItor41 = org.apache.commons.lang3.time.DateUtils.iterator(date33, 2);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addSeconds(date49, (int) (short) -1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date51, (int) (short) 100);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addWeeks(date51, 4);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameDay(date33, date51);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date33, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date25, date33);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date33);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addYears(date11, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 86400000L + "'", long58 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Dec 02 23:59:59 CET 1969");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date26, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (byte) 10);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date26, date40);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameDay(date16, date26);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date16, 2);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Mon Nov 30 23:00:00 CET 100");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.setMinutes(date16, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, 1001);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addWeeks(date24, (int) (byte) 100);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date26, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Nov 30 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat May 31 23:00:00 CEST 2053");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat May 01 23:00:00 CEST 2055");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 82800L + "'", long28 == 82800L);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, (int) (short) 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 30 23:04:59 CET 1972");
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, (int) (byte) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setDays(date13, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 28 23:58:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 29 00:00:34 CET 1970");
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        long long73 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar69, 5);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar69, (int) (byte) 1);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar69, 1);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar48, calendar77);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar48, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 86399000L + "'", long73 == 86399000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 527039L + "'", long75 == 527039L);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date7, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date7, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date23, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 3);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (byte) 10);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setYears(date44, (int) (byte) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date44, (int) (byte) 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addDays(date48, (int) (byte) 10);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addDays(date48, 100);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date23, date52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addMonths(date61, (int) '#');
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setHours(date65, 2);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date23, date67, (int) (byte) 10);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setHours(date67, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 31622399L + "'", long28 == 31622399L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Fri Apr 10 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Fri Dec 01 02:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Fri Dec 01 01:00:00 CET 1972");
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) '#');
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date46, 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (short) 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar70, 2);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addHours(date82, (int) (short) 1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.setSeconds(date82, (int) (short) 0);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.toCalendar(date82);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar70, calendar87);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar70, (int) (short) 1);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar70, (int) (byte) 1);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar53, calendar70, 0);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar53);
        java.util.Calendar calendar97 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long99 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(calendar97);
        org.junit.Assert.assertEquals(calendar97.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:00 CET 100");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date9, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) 0);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date59);
        java.util.Iterator<java.util.Calendar> calendarItor66 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 2);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar49, calendar64, (int) (byte) 10);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(calendar83, 2);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar64, calendar83, (int) (byte) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.truncate(calendar83, (int) (byte) 0);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar34, calendar83);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date25, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Apr 10 23:59:59 CET 1970");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (-1));
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:03:00 CET 1970");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 3);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date11, 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 01 00:02:59 CET 2070");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:59 CET 2070");
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date19, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 08 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 01 00:00:00 CET 1969");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 10);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMinutes(date37, 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setSeconds(date37, (int) (short) 10);
        java.util.Iterator<java.util.Calendar> calendarItor45 = org.apache.commons.lang3.time.DateUtils.iterator(date43, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Nov 30 23:01:59 CET 1972");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 08 23:01:59 CET 1973");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Nov 30 23:02:59 CET 1972");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Nov 30 23:01:10 CET 1972");
        org.junit.Assert.assertNotNull(calendarItor45);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (-1));
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMinutes(date15, (int) (byte) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, 4);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 22:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 22:58:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 22:58:58 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 22:59:03 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 01 22:58:59 CET 1971");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (int) (short) 0);
        java.util.Iterator<?> wildcardItor21 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date19, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(wildcardItor21);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date13, (int) (short) 10);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date13, 1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addHours(date19, (int) (short) 1);
        long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date23, (int) (short) 1);
        long long27 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date23, 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.truncate(date23, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 335L + "'", long25 == 335L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 482459L + "'", long27 == 482459L);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.truncate(date11, 10);
        java.util.Calendar calendar19 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) '4');
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) (byte) 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date35, (int) (byte) 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date37, 10);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 100");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 5);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 4);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (short) 100);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date17, 6);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) '4');
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 5);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date35, 4);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date35, (int) ' ');
        int int41 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date17, date35, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 31 05:59:59 CET 100");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 21599L + "'", long19 == 21599L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date32, (int) (short) 0);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar37, calendar52, (int) (byte) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.util.Iterator<java.util.Calendar> calendarItor73 = org.apache.commons.lang3.time.DateUtils.iterator(calendar71, 2);
        boolean boolean74 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar37, calendar71);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar37);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray37);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray37);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray37);
        int int44 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date7, date42, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar36, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 4);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:04:00 CET 2072");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 01 00:00:00 CET 2072");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addSeconds(date51, (int) (short) -1);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addMonths(date51, (int) '#');
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.setYears(date55, (int) (short) 100);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setYears(date57, 1001);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.setHours(date59, 2);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addYears(date59, (int) (byte) 100);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addDays(date59, (int) '#');
        boolean boolean66 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date65);
        // The following exception was thrown during execution in test generation
        try {
            long long68 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date65, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Dec 01 02:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 01 00:00:00 CET 1101");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Mon Jan 05 00:00:00 CET 1002");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addDays(date25, 2);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) 'a');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.truncate(date32, 0);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addDays(date36, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMinutes(date36, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Jan 02 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 11 00:00:00 CET 1");
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, 0);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) 'a');
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) '#');
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addDays(date60, (int) '4');
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date60, 5);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addYears(date66, 4);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addMonths(date66, (int) ' ');
        int int72 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date50, date66, 0);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date82, (int) (short) 100);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.setHours(date82, 5);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date50, date82);
        int int89 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date36, date82, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long91 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date82, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:05:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, 0);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (-1));
        long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date26, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 86400L + "'", long30 == 86400L);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date13, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Dec 01 10:00:00 CET 100");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date7, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Apr 08 00:00:00 CET 1970");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round(date26, (int) (byte) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addDays(date26, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor41 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date39, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar29, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addDays(date56, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Apr 11 10:00:00 CET 1970");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date17, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Mar 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Mar 11 23:10:59 CET 1970");
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date27, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date27, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor32);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date21, 5);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) '#');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.truncate(date27, 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.round(date27, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Dec 06 00:00:34 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 5);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date39, 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Jan 01 00:00:00 CET 2");
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, 4);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setYears(date21, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addWeeks(date35, (int) (byte) 100);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date23, date37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.truncate(date23, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Apr 15 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) (short) 100);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date34);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Iterator<java.util.Calendar> calendarItor52 = org.apache.commons.lang3.time.DateUtils.iterator(calendar50, 2);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar50, (int) (byte) 0);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar50, 1);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar50, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar50);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar20, calendar50);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.round(calendar62, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor52);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31622399L + "'", long58 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 2);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray16);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date17, (int) '#');
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setYears(date21, (int) (short) 100);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) (byte) 100);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMinutes(date21, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.truncate(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 1001);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date29);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date9, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Dec 01 00:10:00 CET 1972");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:16:41 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date21, 5);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMonths(date25, (int) 'a');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addYears(date25, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setMonths(date29, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 05 23:59:59 CET 1978");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Dec 05 23:59:59 CET 1972");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, 6);
        java.lang.Class<?> wildcardClass62 = date11.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) wildcardClass62, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate class java.util.Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Jun 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        java.util.Iterator<java.util.Calendar> calendarItor18 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 3);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addWeeks(date13, (int) (short) 100);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendarItor18);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Nov 01 00:00:00 CET 102");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Dec 01 00:00:02 CET 100");
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 0);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar70, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor72);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) boolean68, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMinutes(date21, 3);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setHours(date21, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400010L + "'", long23 == 86400010L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:03:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) (short) 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.truncate(date31, 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 1001);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) '#');
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addSeconds(date51, (int) (short) -1);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date53, (int) (short) 1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.setSeconds(date53, (int) (short) 0);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date53, 2);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameDay(date43, date53);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addYears(date43, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:16:40 CET 2005");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2764799000L + "'", long59 == 2764799000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sat Jan 01 00:16:40 CET 2005");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.lang.Class<?> wildcardClass38 = date9.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) '#');
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setYears(date50, (int) (short) 100);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date62, (int) (byte) 10);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameDay(date50, date66);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date50);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar34, calendar68, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.truncate(calendar68, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray74);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addSeconds(date75, (int) (short) -1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addHours(date77, (int) (short) 1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.setSeconds(date77, (int) (short) 0);
        java.util.Calendar calendar82 = org.apache.commons.lang3.time.DateUtils.toCalendar(date77);
        java.util.Iterator<java.util.Calendar> calendarItor84 = org.apache.commons.lang3.time.DateUtils.iterator(calendar82, 2);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar82, (int) (byte) 0);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.truncate(calendar82, 1);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar67, calendar82, 0);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar29, calendar67);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor93 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar82);
        org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor84);
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setHours(date43, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date49, (int) (byte) 1);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date51);
        long long54 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar52, 6);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar29, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar52, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, 4);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) (byte) 10);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, 100);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date42, 0);
        long long48 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date46, (int) (byte) 10);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date50, (int) 'a');
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date23, date52);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 365L + "'", long48 == 365L);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date40, (int) (short) -1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addHours(date42, (int) (short) 1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setSeconds(date42, (int) (short) 0);
        java.util.Calendar calendar47 = org.apache.commons.lang3.time.DateUtils.toCalendar(date42);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray54);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addSeconds(date55, (int) (short) -1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date57, (int) (short) 1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.setSeconds(date57, (int) (short) 0);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.toCalendar(date57);
        java.util.Iterator<java.util.Calendar> calendarItor64 = org.apache.commons.lang3.time.DateUtils.iterator(calendar62, 2);
        boolean boolean66 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar47, calendar62, (int) (byte) 10);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray73);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addSeconds(date74, (int) (short) -1);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addHours(date76, (int) (short) 1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.setSeconds(date76, (int) (short) 0);
        java.util.Calendar calendar81 = org.apache.commons.lang3.time.DateUtils.toCalendar(date76);
        java.util.Iterator<java.util.Calendar> calendarItor83 = org.apache.commons.lang3.time.DateUtils.iterator(calendar81, 2);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar81, (int) (byte) 0);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar47, calendar85);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar85, 1);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar31, calendar85);
        long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar31, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar31, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor83);
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 365L + "'", long93 == 365L);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date32, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 00:04:00 CET 1970");
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) 'a');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (byte) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:10:10 CET 1970");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 5);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        java.util.Calendar calendar24 = org.apache.commons.lang3.time.DateUtils.round(calendar22, 5);
        java.lang.Class<?> wildcardClass25 = calendar22.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86399000L + "'", long18 == 86399000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 527039L + "'", long20 == 527039L);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 03 04:35:00 CET 1970");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) 'a');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, 2);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round(date17, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date19, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Apr 08 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar46);
        java.util.Iterator<java.util.Calendar> calendarItor49 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 5);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar29);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.util.Iterator<java.util.Calendar> calendarItor67 = org.apache.commons.lang3.time.DateUtils.iterator(calendar65, 2);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar65, (int) (byte) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.truncate(calendar65, 1);
        long long73 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar65, (int) (short) 1);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray80);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addSeconds(date81, (int) (short) -1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.addHours(date83, (int) (short) 1);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.setSeconds(date83, (int) (short) 0);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.toCalendar(date83);
        java.util.Iterator<java.util.Calendar> calendarItor90 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, 2);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (int) (byte) 0);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar88, 1);
        long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, (int) (short) 1);
        boolean boolean97 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar65, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar65, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(calendarItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor67);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 31622399L + "'", long73 == 31622399L);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor90);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 31622399L + "'", long96 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(calendar83, 2);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar83, (int) (byte) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.round(calendar83, 0);
        java.util.Calendar calendar91 = org.apache.commons.lang3.time.DateUtils.truncate(calendar83, 2);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar63, calendar91, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar91, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar91);
        org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendarItor24, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round org.apache.commons.lang3.time.DateUtils$DateIterator@299786a1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) ' ');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round(date15, (int) (byte) 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date15, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.ceiling(date15, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:32:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 01 00:01:00 CET 97");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Jan 01 01:00:00 CET 97");
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (-1));
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMinutes(date15, (int) (byte) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date15, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 22:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 22:58:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Jan 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Dec 01 00:04:00 CET 1972");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addDays(date30, 6);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(date30, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date30, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 06:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 06:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Jan 07 06:10:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor34);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) (short) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setHours(date13, 4);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.ceiling(date13, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 16 00:00:00 CET 1970");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addYears(date29, (int) (byte) 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) (byte) 10);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date35, 5);
        int int39 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date35, (int) (byte) 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMinutes(date35, (int) 'a');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1440L + "'", long15 == 1440L);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399010L + "'", long37 == 86399010L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Jan 11 01:36:59 CET 1970");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar21 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date21, 5);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) '#');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.truncate(date27, 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setDays(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date31, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Dec 06 00:00:34 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 04 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Jan 04 00:00:00 CET 1969");
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar48);
        long long53 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 23L + "'", long53 == 23L);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1001);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, (int) '#');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate(date24, 1);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.round(calendar33, 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar35);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar35, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) (short) 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.truncate(date31, 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 1001);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setHours(date21, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date23, 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, (int) (byte) 10);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMinutes(date32, 4);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date34, 3);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addDays(date36, (int) 'a');
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMonths(date36, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:09:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Mar 12 00:09:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Mar 12 00:04:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Mar 12 00:04:59 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Jun 17 00:04:59 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Feb 12 00:04:59 CET 1970");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date19, 6);
        java.util.Iterator<java.util.Calendar> calendarItor25 = org.apache.commons.lang3.time.DateUtils.iterator(date23, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor27 = org.apache.commons.lang3.time.DateUtils.iterator(date23, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor25);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendar48, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date9, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date39, 0);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setYears(date39, 1001);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date46, (int) (short) 1);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setMonths(date56, (int) (short) 0);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date56, 0);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, 100);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date48, date66);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Mar 18 23:59:00 CET 21");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Mar 18 23:59:59 CET 1001");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Mar 18 23:59:59 CET 1001");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:01:41 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date7);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setYears(date31, (int) (byte) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date37, (int) (byte) 1);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date37);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date37, 5);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date52, (int) (byte) 10);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setYears(date56, (int) (byte) 1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addDays(date58, (int) (short) 10);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addWeeks(date60, 1001);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addMinutes(date60, (-1));
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setHours(date64, 5);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addSeconds(date66, 2);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.ceiling(date68, (int) (short) 0);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(date37, date70);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Jan 01 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 10 23:58:59 CET 2");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Tue Jan 10 05:58:59 CET 2");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Tue Jan 10 05:59:01 CET 2");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setHours(date11, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Apr 30 23:59:59 CEST 1978");
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date15, (int) ' ');
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMonths(date27, (int) '#');
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setYears(date31, (int) (short) 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date43, (int) (byte) 10);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.isSameDay(date31, date47);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addYears(date66, (int) (short) 0);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(date56, date70);
        java.util.Iterator<java.util.Calendar> calendarItor73 = org.apache.commons.lang3.time.DateUtils.iterator(date70, 4);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date31, date70, 0);
        boolean boolean76 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.ceiling(date70, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 32");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(calendarItor73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar35, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar69);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar35, calendar69);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar69, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar75 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 527039L + "'", long37 == 527039L);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) (byte) 100);
        java.util.Calendar calendar40 = org.apache.commons.lang3.time.DateUtils.toCalendar(date39);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Dec 31 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-58980013201000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=366,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date11, 3);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date15, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Apr 01 00:00:00 CET 1972");
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) '#');
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date46, 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (short) 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar70, 2);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addHours(date82, (int) (short) 1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.setSeconds(date82, (int) (short) 0);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.toCalendar(date82);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar70, calendar87);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar70, (int) (short) 1);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar70, (int) (byte) 1);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar53, calendar70, 0);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar97 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar67, calendar86, (int) (byte) 0);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar86, (int) (byte) 0);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar92);
        java.util.Date date95 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar29, 1);
        java.util.Calendar calendar97 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Wed Jan 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar97);
        org.junit.Assert.assertEquals(calendar97.toString(), "java.util.GregorianCalendar[time=-7200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, 2);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, 3);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) '4');
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date37, (int) (short) 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray46);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, (int) (short) -1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addHours(date49, (int) (short) 1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date49, (int) (byte) 10);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.setYears(date53, (int) (byte) 1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addDays(date55, (int) (short) 10);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addWeeks(date57, 1001);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date59);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray67);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addSeconds(date68, (int) (short) -1);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addHours(date70, (int) (short) 1);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date70, (int) (byte) 10);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addSeconds(date74, 100);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addHours(date74, 0);
        long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date78, (int) (byte) 10);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addMinutes(date78, (int) '#');
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date84, (int) (byte) 0);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.isSameDay(date37, date86);
        java.util.Date date89 = org.apache.commons.lang3.time.DateUtils.addHours(date37, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date89, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Apr 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 149");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 365L + "'", long80 == 365L);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setDays(date9, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar29, (int) (short) 1);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar29, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardItor90);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.round(date9, 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date15, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 CET 2");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addYears(date29, (int) (byte) 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) (byte) 10);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date35, 5);
        int int39 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date35, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1440L + "'", long15 == 1440L);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399010L + "'", long37 == 86399010L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round(date26, (int) (byte) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addDays(date26, (int) (short) 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 1);
        long long43 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date26, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 365L + "'", long43 == 365L);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (-1));
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 22:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addDays(date37, (int) (short) 1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.setDays(date37, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date37, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Nov 30 23:01:59 CET 1972");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Dec 01 23:01:59 CET 1972");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Nov 01 23:01:59 CET 1972");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, 2);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round(date17, 5);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date17, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon May 01 06:00:00 CEST 1978");
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date26, 2);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 18 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1465200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=18,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 100);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date31, 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addMonths(date31, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date37, (int) (short) 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date37, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date41, 1001);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date15, date43);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Mon Dec 01 01:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.util.Iterator<java.util.Calendar> calendarItor40 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(calendarItor40);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setHours(date13, 0);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 00:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 00:59:59 CET 1969");
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date13, (int) (short) 10);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addYears(date29, (int) (byte) 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) (byte) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date33, 100);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date15, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMinutes(date15, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Fri Apr 10 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 10:01:00 CET 1970");
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date49, (int) (byte) 0);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addHours(date51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date53, date63);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date63);
        java.util.Iterator<?> wildcardItor67 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date37, 3);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMonths(date37, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor71 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardItor67);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Apr 30 23:59:59 CET 1970");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 0);
        long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date11, (int) (byte) 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMinutes(date21, 4);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) 'a');
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, (int) (short) 100);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addWeeks(date52, 4);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date66, (int) (byte) 10);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.setYears(date70, (int) (byte) 1);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.isSameDay(date52, date72);
        boolean boolean74 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date52);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date11, date52);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addDays(date52, (int) (byte) 0);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray84);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.addSeconds(date85, (int) (short) -1);
        java.util.Date date89 = org.apache.commons.lang3.time.DateUtils.addMinutes(date85, 2);
        java.util.Date date91 = org.apache.commons.lang3.time.DateUtils.addMonths(date85, 100);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date77, date85);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 8783L + "'", long13 == 8783L);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date21, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date25, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Dec 05 23:59:59 CET 1969");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Mar 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Feb 09 23:59:59 CET 1972");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.truncate(date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Nov 30 23:01:59 CET 1972");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setSeconds(date25, (int) (short) 0);
        java.util.Calendar calendar30 = org.apache.commons.lang3.time.DateUtils.toCalendar(date25);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(calendar30, 2);
        boolean boolean34 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar15, calendar30, (int) (byte) 10);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar49, 2);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar30, calendar49, (int) (byte) 0);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(calendar83, 2);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar83, (int) (byte) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.truncate(calendar83, 1);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar68, calendar83, 0);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar30, calendar68);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar0, calendar30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.truncate(date11, 10);
        java.util.Calendar calendar19 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) '4');
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 03 04:00:00 CET 1970");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Iterator<java.util.Calendar> calendarItor35 = org.apache.commons.lang3.time.DateUtils.iterator(calendar33, 2);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar33, calendar50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar50, 0);
        long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, 6);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar53, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar72, (int) (short) 1);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar72, (int) (byte) 1);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar53, calendar72);
        boolean boolean96 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar98 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 5);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar68, (int) (short) 1);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar90);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date93 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendar52, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Iterator<?> wildcardItor17 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date15, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardItor17);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Nov 16 00:00:00 CET 2067");
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) ' ');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 02 08:00:00 CET 1970");
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date13, (int) (short) 10);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (int) (byte) 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.truncate(date15, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 5);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date39, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.round(date19, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Nov 30 23:59:59 CET 1969");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setDays(date32, (int) (byte) 10);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addHours(date54, (int) (short) 1);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addYears(date54, (int) (short) 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(date44, date58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date44, 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setHours(date61, 6);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setDays(date61, (int) (byte) 1);
        boolean boolean66 = org.apache.commons.lang3.time.DateUtils.isSameDay(date32, date61);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Dec 10 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addYears(date25, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date34, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 31 23:59:59 CET 2066");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-3599000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar31, 0);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1440L + "'", long57 == 1440L);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date32, (int) (short) 0);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar37, calendar52, (int) (byte) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar71, calendar86, (int) (byte) 10);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar71);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar22, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar22, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addYears(date48, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, 1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.setMinutes(date38, 4);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date57, 2);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date30, date57, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date57, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 06:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 06:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 86640000L + "'", long59 == 86640000L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 5);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date39, 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date39, (int) '#');
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setYears(date47, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.truncate(date49, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Nov 30 23:59:59 CET 10");
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.truncate(date17, (int) (short) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMonths(date23, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.truncate(date25, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Jan 01 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu May 01 00:00:00 CET 10");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar24 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (int) (short) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setYears(date19, 6);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, 10);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Jan 01 00:00:01 CET 6");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 09 00:00:01 CET 1971");
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) (byte) 10);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMinutes(date38, 1001);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date28, date44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setYears(date44, 4);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date44, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 16:40:59 CET 4");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=56459000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=40,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 16:40:59 CET 1974");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round(date26, (int) (byte) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date26, (int) (byte) 1);
        java.util.Calendar calendar40 = org.apache.commons.lang3.time.DateUtils.toCalendar(date39);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date44, date52);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date52, (int) (short) 0);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addWeeks(date15, 5);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) '4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 05 00:00:00 CET 2073");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 05 00:00:52 CET 2073");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) '#');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date31, (int) (byte) 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.ceiling(date31, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addHours(date37, 3);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMinutes(date39, 10);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:35 CET 1970");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Jan 01 03:00:00 CET 1");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 01 03:10:00 CET 1");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar67, calendar86, (int) (byte) 0);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar86, (int) (byte) 0);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar92);
        java.util.Date date95 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar29, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long97 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar29, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 5);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor56 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.util.Iterator<java.util.Calendar> calendarItor73 = org.apache.commons.lang3.time.DateUtils.iterator(calendar71, 2);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray80);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addSeconds(date81, (int) (short) -1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.addHours(date83, (int) (short) 1);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.setSeconds(date83, (int) (short) 0);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.toCalendar(date83);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar71, calendar88);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(calendarItor56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, 2);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date15, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 01:00:00 CET 97");
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, 2);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 01 02:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 01 00:00:00 CET 1101");
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date39, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date39, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 00:00:00 CET 21");
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date32, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.round(date36, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Dec 31 00:04:02 CET 1970");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, 2);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round(date17, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) '4');
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round(date29, 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date37, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Jan 01 00:00:00 CET 2");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 2);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date9, 0);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date23, (int) (short) 100);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addYears(date23, (int) (byte) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date27, 0);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addYears(date47, (int) (short) 0);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameDay(date37, date51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date37, 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, 6);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setMonths(date64, (int) (short) 0);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date64, 0);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date56, date64);
        int int73 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date27, date64, (int) (short) 0);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addWeeks(date27, 5);
        int int77 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 2);
        java.util.Iterator<java.util.Calendar> calendarItor81 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 05 00:00:00 CET 2073");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor81);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date15, 5);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, 2);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date17, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Iterator<java.util.Calendar> calendarItor35 = org.apache.commons.lang3.time.DateUtils.iterator(calendar33, 2);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar33, (int) (byte) 0);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.round(calendar33, 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray46);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, (int) (short) -1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addHours(date49, (int) (short) 1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setSeconds(date49, (int) (short) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.toCalendar(date49);
        long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar54, 1);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.util.Iterator<java.util.Calendar> calendarItor73 = org.apache.commons.lang3.time.DateUtils.iterator(calendar71, 2);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray80);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addSeconds(date81, (int) (short) -1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.addHours(date83, (int) (short) 1);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.setSeconds(date83, (int) (short) 0);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.toCalendar(date83);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar71, calendar88);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar54, calendar88);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar33, calendar88, (int) (byte) 10);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar33);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor35);
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 527039L + "'", long56 == 527039L);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) (byte) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 01:40:00 CET 1970");
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(obj0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (byte) 10);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 1);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date23);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) (byte) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addYears(date45, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 00:00:00 CET 1975");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date17, (int) ' ');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 01 00:32:39 CET 1969");
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, (int) ' ');
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) ' ');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Sep 01 00:00:09 CET 1972");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 31 23:59:59 CET 32");
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) 0);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date59);
        java.util.Iterator<java.util.Calendar> calendarItor66 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 2);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar49, calendar64, (int) (byte) 10);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(calendar83, 2);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar64, calendar83, (int) (byte) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.truncate(calendar83, (int) (byte) 0);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar34, calendar83);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar34, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 86400L + "'", long92 == 86400L);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setMonths(date16, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Mar 31 23:00:00 CET 1969");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date13, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date15, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Jun 05 00:00:00 CEST 1978");
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.setMinutes(date16, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, 1001);
        java.util.Calendar calendar25 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Nov 30 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat May 31 23:00:00 CEST 2053");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=2632338000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2053,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=151,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=3600000]");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date34, 0);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date26, date34);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date26, (int) (short) 0);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date43, 5);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setMonths(date45, 5);
        long long49 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date45, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 6, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Jun 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round(date7, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar49, 2);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setSeconds(date61, (int) (short) 0);
        java.util.Calendar calendar66 = org.apache.commons.lang3.time.DateUtils.toCalendar(date61);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar49, calendar66);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.truncate(calendar66, 2);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar66);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        java.util.Iterator<java.util.Calendar> calendarItor87 = org.apache.commons.lang3.time.DateUtils.iterator(calendar85, 2);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar85, (int) (byte) 0);
        java.util.Calendar calendar91 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        java.util.Calendar calendar93 = org.apache.commons.lang3.time.DateUtils.truncate(calendar85, 2);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date96 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) boolean94, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor87);
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar91);
        org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar93);
        org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar18, 6);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Iterator<java.util.Calendar> calendarItor37 = org.apache.commons.lang3.time.DateUtils.iterator(calendar35, 2);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar35, (int) (byte) 0);
        java.util.Calendar calendar41 = org.apache.commons.lang3.time.DateUtils.round(calendar35, 0);
        java.util.Calendar calendar43 = org.apache.commons.lang3.time.DateUtils.truncate(calendar35, 2);
        int int45 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar18, calendar43, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar43, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor37);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar88, 1001);
        java.util.Date date96 = org.apache.commons.lang3.time.DateUtils.round(date94, (int) (short) 0);
        java.util.Date date98 = org.apache.commons.lang3.time.DateUtils.setHours(date94, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date98);
        org.junit.Assert.assertEquals(date98.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) ' ');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:32 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:32 CET 1969");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 6);
        long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar88, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date17, 5);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, 4);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:05 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:01:45 CET 1970");
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.util.Date date0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.addDays(date10, (int) '4');
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date10, 5);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addWeeks(date16, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date0, date16, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Sep 02 23:59:59 CET 1970");
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        long long54 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar48, (int) (short) 1);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar69, calendar86);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.round(calendar69, (int) (short) 1);
        java.util.Calendar calendar91 = org.apache.commons.lang3.time.DateUtils.truncate(calendar69, (int) (byte) 1);
        long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar69, 1);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar69, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 8783L + "'", long54 == 8783L);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar91);
        org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 8783L + "'", long93 == 8783L);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date17, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:59:59 CET 2");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date49, (int) (byte) 0);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addHours(date51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date53, date63);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date63);
        java.util.Iterator<?> wildcardItor67 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date37, 3);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMonths(date37, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setHours(date37, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardItor67);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Apr 30 23:59:59 CET 1970");
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1001);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, (int) '#');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate(date24, 1);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.round(calendar33, 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setSeconds(date46, (int) (short) 0);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.toCalendar(date46);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setSeconds(date61, (int) (short) 0);
        java.util.Calendar calendar66 = org.apache.commons.lang3.time.DateUtils.toCalendar(date61);
        java.util.Iterator<java.util.Calendar> calendarItor68 = org.apache.commons.lang3.time.DateUtils.iterator(calendar66, 2);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar51, calendar66, (int) (byte) 10);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        java.util.Iterator<java.util.Calendar> calendarItor87 = org.apache.commons.lang3.time.DateUtils.iterator(calendar85, 2);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar85, (int) (byte) 0);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar51, calendar89);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar89, 5);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar35, calendar89, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor87);
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date36, 1);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.setHours(date53, 6);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setMonths(date63, (int) (short) 0);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date63, 0);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date55, date63);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date55, (int) (short) 0);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date72, 5);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.setMonths(date74, 5);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date7, date76, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Jun 01 00:00:00 CET 1");
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, (int) (byte) 10);
        long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date21, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 23L + "'", long25 == 23L);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date23, 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, (int) (byte) 10);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMinutes(date32, 4);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date34, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMinutes(date34, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:09:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Mar 12 00:09:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Mar 12 00:04:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Mar 12 00:04:59 CET 1970");
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray37);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray37);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray37);
        int int44 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date7, date42, 0);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setMinutes(date42, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:01:00 CET 1970");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setMinutes(date31, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setMinutes(date31, 4);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date13, date31, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) '4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 10 23:00:59 CET 2");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 10 23:04:59 CET 2");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Nov 30 23:59:59 CET 1972");
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, (int) (short) 10);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date31, (int) (short) 100);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addWeeks(date31, 4);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date45, (int) (byte) 10);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setYears(date49, (int) (byte) 1);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameDay(date31, date51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date51, (int) 'a');
        java.util.Iterator<java.util.Calendar> calendarItor56 = org.apache.commons.lang3.time.DateUtils.iterator(date51, 3);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addWeeks(date51, 1001);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date21, date58, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:10 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Jan 01 00:01:36 CET 2");
        org.junit.Assert.assertNotNull(calendarItor56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Mar 08 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(date0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, (int) (short) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date21, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date21, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:10 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jun 30 23:59:10 CET 1970");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date15, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 16 00:00:00 CET 1");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 4);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date21, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.ceiling(date26, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Dec 31 23:59:59 CET 6");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar18, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor22 = org.apache.commons.lang3.time.DateUtils.iterator(calendar18, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar16, 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar16, (int) (short) 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Iterator<java.util.Calendar> calendarItor37 = org.apache.commons.lang3.time.DateUtils.iterator(calendar35, 2);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar52);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar16, calendar35);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1001);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addHours(date9, 0);
        java.util.Calendar calendar21 = org.apache.commons.lang3.time.DateUtils.toCalendar(date20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addDays(date20, (int) ' ');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.truncate(date23, 10);
        long long27 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date25, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 01 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 01 23:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 47460L + "'", long27 == 47460L);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, 2);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round(date17, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 11 17:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 09 17:00:00 CET 99");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Feb 16 00:00:00 CET 97");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) (short) 100);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date34);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Iterator<java.util.Calendar> calendarItor52 = org.apache.commons.lang3.time.DateUtils.iterator(calendar50, 2);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar50, (int) (byte) 0);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar50, 1);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar50, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar20, calendar50, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor52);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31622399L + "'", long58 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) (byte) 0);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date15, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) ' ');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round(date15, (int) (byte) 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date15, 2);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMonths(date15, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:32:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 01 00:32:00 CET 2");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Jan 01 00:32:00 CET 97");
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date45, (int) (short) 100);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setHours(date45, 5);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date45);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addDays(date60, (int) '4');
        java.lang.String[] strArray71 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray71);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addSeconds(date72, (int) (short) -1);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addHours(date74, (int) (short) 1);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.setSeconds(date74, (int) (short) 0);
        boolean boolean79 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date60, date74);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addWeeks(date60, 6);
        java.util.Iterator<java.util.Calendar> calendarItor83 = org.apache.commons.lang3.time.DateUtils.iterator(date60, (int) (short) 1);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(date60, (int) (byte) 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date45, date60);
        java.lang.Class<?> wildcardClass87 = date45.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Feb 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor83);
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) 'a');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date15);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setSeconds(date15, (int) (short) 10);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addMinutes(date18, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=3061062000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2067,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Jan 01 00:00:10 CET 2067");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Jan 01 00:01:10 CET 2067");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) (byte) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date13, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Jan 02 08:00:00 CET 1970");
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, 0);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Sep 02 23:59:59 CET 1970");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 3);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addHours(date11, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:02:59 CET 1970");
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addYears(date7, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray31);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addSeconds(date32, (int) (short) -1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addMonths(date32, (int) '#');
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setYears(date36, (int) (short) 100);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setYears(date38, 1001);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date38);
        java.lang.Class<?> wildcardClass42 = date38.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Fri Jan 01 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addYears(date48, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date55, 2);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setMonths(date58, (int) (short) 0);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 10:00:04 CET 1970");
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar29, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar46);
        java.util.Iterator<java.util.Calendar> calendarItor49 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 5);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar29);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar29, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(calendarItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date44, date52);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date52, (int) (short) 0);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addWeeks(date15, 5);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addYears(date63, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 05 00:00:00 CET 2073");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 05 00:00:00 CET 2072");
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Iterator<java.util.Calendar> calendarItor37 = org.apache.commons.lang3.time.DateUtils.iterator(calendar35, 2);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar35, (int) (short) 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.truncate(calendar35, (int) (byte) 1);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar35, 1);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray66);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addSeconds(date67, (int) (short) -1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addHours(date69, (int) (short) 1);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.setSeconds(date69, (int) (short) 0);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.toCalendar(date69);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar35, calendar74);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar35, (int) (short) 0);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar77);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 8783L + "'", long59 == 8783L);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date49, (int) (byte) 0);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addHours(date51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date53, date63);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date63);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) 'a');
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar68, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:01:36 CET 1970");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3503996,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=36,MILLISECOND=4,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar16, 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, (int) '#');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date30, (int) (short) 100);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar33, 1001);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.util.Iterator<java.util.Calendar> calendarItor67 = org.apache.commons.lang3.time.DateUtils.iterator(calendar65, 2);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar50, calendar65, (int) (byte) 10);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray76);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addSeconds(date77, (int) (short) -1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addHours(date79, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.setSeconds(date79, (int) (short) 0);
        java.util.Calendar calendar84 = org.apache.commons.lang3.time.DateUtils.toCalendar(date79);
        java.util.Iterator<java.util.Calendar> calendarItor86 = org.apache.commons.lang3.time.DateUtils.iterator(calendar84, 2);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar84, (int) (byte) 0);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar50, calendar88);
        java.util.Iterator<java.util.Calendar> calendarItor91 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, 1);
        long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar33, calendar88);
        long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, (int) (short) 1);
        boolean boolean97 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar18, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor99 = org.apache.commons.lang3.time.DateUtils.iterator(calendar18, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor86);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(calendarItor91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date19, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 22");
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 6);
        java.util.Iterator<java.util.Calendar> calendarItor30 = org.apache.commons.lang3.time.DateUtils.iterator(date28, 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date9, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round(date17, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date27, 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date27, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 23:59:59 CET 100");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (short) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 02 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar80, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar80, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date40, (int) (short) -1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addHours(date42, (int) (short) 1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addDays(date42, (int) '4');
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date42, 5);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date48, 4);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addMonths(date48, (int) ' ');
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date32, date48, 0);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date17, date48);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date48, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date11, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date11, 4);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date11, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 4");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, (int) (byte) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setDays(date13, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date30, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 28 23:58:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 10 23:59:59 CET 1970");
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date21, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:59:02 CET 2");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date13, (int) (short) 10);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (short) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 02 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.setMinutes(date16, (int) (short) 10);
        java.lang.Class<?> wildcardClass23 = date22.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Nov 30 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:10:00 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addDays(date52, (int) '4');
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date52, 5);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addYears(date58, 4);
        boolean boolean61 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date39, date60);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date60, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date11, 1001);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date61, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Dec 01 00:16:41 CET 1972");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Dec 01 00:16:41 CET 1972");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, 0);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setHours(date26, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 01:04:00 CET 1970");
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, (int) (short) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addYears(date17, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:10 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.round(date13, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 31 23:00:00 CET 2004");
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date32, (int) (short) 0);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setHours(date32, 1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) (byte) 1);
        java.util.Calendar calendar41 = org.apache.commons.lang3.time.DateUtils.toCalendar(date40);
        java.util.Calendar calendar43 = org.apache.commons.lang3.time.DateUtils.truncate(calendar41, (int) (byte) 10);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar20, calendar41);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date56, (int) '4');
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addMinutes(date56, (int) '#');
        java.util.Calendar calendar61 = org.apache.commons.lang3.time.DateUtils.toCalendar(date56);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.truncate(date56, 10);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date56);
        boolean boolean66 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar20, calendar64, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1001);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addHours(date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor22 = org.apache.commons.lang3.time.DateUtils.iterator(date20, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar40 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar34, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date25);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date25, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 1);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date34);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.round(calendar35, (int) (short) 0);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.round(calendar37, 0);
        long long41 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar39, (int) (byte) 1);
        boolean boolean42 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar39);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 10);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMinutes(date37, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date37, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Nov 30 23:01:59 CET 1972");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 08 23:01:59 CET 1973");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Nov 30 23:02:59 CET 1972");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendar16, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar16, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 10);
        long long33 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar29, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date15, (int) ' ');
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date19, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:31:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1471L + "'", long21 == 1471L);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, 0);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) 'a');
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date36, 1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMonths(date36, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:05:37 CET 1970");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1445L + "'", long38 == 1445L);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jul 01 00:05:37 CET 1970");
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar67, calendar86, (int) (byte) 0);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar86, (int) (byte) 0);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar92);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar95 = org.apache.commons.lang3.time.DateUtils.round(calendar92, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date11, 1001);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addWeeks(date61, 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addWeeks(date63, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setMonths(date63, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Dec 01 00:16:41 CET 1972");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Dec 08 00:16:41 CET 1972");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Fri Feb 16 00:16:41 CET 1973");
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) (byte) -1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 2);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date7, 6);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 08 06:00:00 CET 1970");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, 0);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date44, (int) (short) 0);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(date34, date48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date34, 10);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date34, 0);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addMinutes(date53, (-1));
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date7, date55, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar18, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=60476400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1971,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=336,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, (int) (byte) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setDays(date13, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 28 23:58:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 10 23:59:59 CET 1970");
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (byte) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) '4');
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date29, date43);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, 6);
        java.util.Iterator<java.util.Calendar> calendarItor52 = org.apache.commons.lang3.time.DateUtils.iterator(date29, (int) (short) 1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addMinutes(date29, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date19, date54);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 15 03:59:59 CET 2");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Feb 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor52);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:03:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date49, (int) (byte) 0);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addHours(date51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date53, date63);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date63);
        java.util.Iterator<?> wildcardItor67 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date37, 3);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMonths(date37, (int) (byte) 10);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addHours(date37, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor73 = org.apache.commons.lang3.time.DateUtils.iterator(date71, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardItor67);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Oct 31 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 05:59:59 CET 1970");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon May 01 00:00:00 CEST 1978");
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) 'a');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, 2);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round(date17, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date19, (int) ' ');
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setDays(date21, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Apr 08 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Jan 10 00:00:00 CET 1");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) (short) 1);
        java.util.Calendar calendar24 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar26 = org.apache.commons.lang3.time.DateUtils.truncate(calendar24, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31622399000L + "'", long22 == 31622399000L);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date50, 2);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.ceiling(date50, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 10:03:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 6);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.truncate(date9, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Feb 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:03:59 CET 1970");
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) (byte) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, 100);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addWeeks(date13, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 08 00:00:00 CET 1970");
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, (int) (byte) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date28, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date30, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Feb 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 25 00:00:00 CET 100");
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setSeconds(date25, (int) (short) 0);
        java.util.Calendar calendar30 = org.apache.commons.lang3.time.DateUtils.toCalendar(date25);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(calendar30, 2);
        boolean boolean34 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar15, calendar30, (int) (byte) 10);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar49, 2);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar49, (int) (byte) 0);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar15, calendar53);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar69, calendar86);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.round(calendar86, 0);
        long long91 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar89, 6);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar15, calendar89);
        long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar89, 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar0, calendar89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1L + "'", long94 == 1L);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date40, (int) (short) -1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addHours(date42, (int) (short) 1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addDays(date42, (int) '4');
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date42, 5);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(date30, date42);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addMinutes(date42, 100);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addMinutes(date51, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor55 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date51, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 01:39:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 02:11:59 CET 1970");
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray34);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addSeconds(date35, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addHours(date37, (int) (short) 1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addYears(date37, (int) (short) 0);
        boolean boolean42 = org.apache.commons.lang3.time.DateUtils.isSameDay(date27, date41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date27, 10);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, 0);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date46, 0);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date19, date48);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 5);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, 2);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setSeconds(date35, (int) (short) 0);
        java.util.Calendar calendar40 = org.apache.commons.lang3.time.DateUtils.toCalendar(date35);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.truncate(date35, 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setSeconds(date52, (int) (short) 0);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.toCalendar(date52);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.truncate(date52, 10);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date35, date52, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date35, 4);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray70);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.addSeconds(date71, (int) (short) -1);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addHours(date73, (int) (short) 1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date75, (int) (byte) 0);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addHours(date77, 1001);
        java.lang.String[] strArray86 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray86);
        java.util.Date date89 = org.apache.commons.lang3.time.DateUtils.addSeconds(date87, (int) (short) -1);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date79, date89);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date63, date89);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date63);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date25);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1439L + "'", long15 == 1439L);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) 0);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date59);
        java.util.Iterator<java.util.Calendar> calendarItor66 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 2);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray73);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addSeconds(date74, (int) (short) -1);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addHours(date76, (int) (short) 1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.setSeconds(date76, (int) (short) 0);
        java.util.Calendar calendar81 = org.apache.commons.lang3.time.DateUtils.toCalendar(date76);
        boolean boolean82 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar64, calendar81);
        java.util.Iterator<java.util.Calendar> calendarItor84 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 5);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar49, calendar64);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar34, calendar64);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(calendarItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date7, 4);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1974");
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.ceiling(date23, 1001);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addDays(date15, 1001);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addSeconds(date53, (int) (short) -1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addHours(date55, (int) (short) 1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date55, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, 100);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addHours(date59, 0);
        long long65 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date63, (int) (byte) 10);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date67, (int) 'a');
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setDays(date67, 5);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date67, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date45, date73, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Sep 28 00:01:39 CET 1972");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 365L + "'", long65 == 365L);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor19 = org.apache.commons.lang3.time.DateUtils.iterator(date17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:01:59 CET 1969");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setHours(date0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar16, calendar53);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setMonths(date62, (int) (short) 0);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date62, 0);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(date62, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date80, (int) (short) 100);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addWeeks(date80, 4);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameDay(date62, date80);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar16, calendar86, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 5);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 4);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (short) 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 31 05:59:59 CET 100");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 31 05:59:00 CET 100");
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 23500799010L, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 23500799010");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 10);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date28, date45, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date18, date28);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addHours(date28, 100);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addYears(date75, (int) (short) 0);
        boolean boolean80 = org.apache.commons.lang3.time.DateUtils.isSameDay(date65, date79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date65, 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.ceiling(date65, 1001);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addYears(date84, (int) 'a');
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.addYears(date86, (int) (short) 0);
        java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.setYears(date88, (int) (byte) 1);
        java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.addDays(date90, (int) '4');
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date57, date90, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Jan 05 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Jan 16 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Wed Mar 09 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (short) 0);
        java.util.Calendar calendar58 = org.apache.commons.lang3.time.DateUtils.round(calendar56, 2);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar56, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.lang.String[] strArray13 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray13);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray13);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray13);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray13);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray13);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray13);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray13);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.ceiling(date19, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Jan 03 04:01:39 CET 1969");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date21, 5);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) '#');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date25, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Dec 06 00:00:34 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date30, (int) (short) 100);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addSeconds(date32, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:40:00 CET 1970");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) (short) 10);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Mar 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 4);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.round(date21, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setYears(date21, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round(date21, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 31 23:59:59 CET 97");
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, 4);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addDays(date19, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setSeconds(date19, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 14 23:59:59 CET 23");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:01 CET 1980");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.setMinutes(date16, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMonths(date22, 1);
        long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date24, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Nov 30 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Jan 31 23:10:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray47);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addSeconds(date48, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addHours(date50, (int) (short) 1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date50, (int) (byte) 10);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addSeconds(date54, 100);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addHours(date54, 0);
        long long60 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date58, (int) (byte) 10);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addMinutes(date58, (int) '#');
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date64, (int) (byte) 0);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameDay(date17, date66);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date66, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 365L + "'", long60 == 365L);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date25);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) '4');
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMinutes(date38, (int) '#');
        java.util.Calendar calendar43 = org.apache.commons.lang3.time.DateUtils.toCalendar(date38);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.truncate(date38, 10);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date38);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) '4');
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) -1);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date25, date38);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (short) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, 6);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date17, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 02 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 6");
        org.junit.Assert.assertNotNull(calendarItor21);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (short) 0);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray48);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addYears(date59, (int) (short) 0);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameDay(date49, date63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date49, 1);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date41, date49);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setMonths(date49, 2);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addYears(date69, (int) '#');
        boolean boolean72 = org.apache.commons.lang3.time.DateUtils.isSameDay(date17, date71);
        // The following exception was thrown during execution in test generation
        try {
            long long74 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date71, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 01 00:10:00 CET 1972");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Dec 01 00:10:00 CET 1972");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Mar 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Mar 01 00:00:00 CET 2005");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (byte) 10);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 1);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date23);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date13, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date26, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Jan 16 00:00:00 CET 1970");
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date28, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date45, (int) (short) 100);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setHours(date45, 5);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date45);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addDays(date60, (int) '4');
        java.lang.String[] strArray71 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray71);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addSeconds(date72, (int) (short) -1);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addHours(date74, (int) (short) 1);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.setSeconds(date74, (int) (short) 0);
        boolean boolean79 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date60, date74);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addWeeks(date60, 6);
        java.util.Iterator<java.util.Calendar> calendarItor83 = org.apache.commons.lang3.time.DateUtils.iterator(date60, (int) (short) 1);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(date60, (int) (byte) 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date45, date60);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date45, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Feb 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor83);
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.lang.String[] strArray12 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray12);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.truncate(date27, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 5);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) '#');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.truncate(date30, 1);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date36);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.round(calendar37, (int) (short) 0);
        java.util.Calendar calendar41 = org.apache.commons.lang3.time.DateUtils.round(calendar37, 0);
        java.util.Calendar calendar43 = org.apache.commons.lang3.time.DateUtils.round(calendar41, (int) (byte) 10);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar22, calendar43);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addHours(date54, (int) (short) 1);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setSeconds(date54, (int) (short) 0);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setHours(date54, 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date60, (int) (byte) 1);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        long long65 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar63, 6);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        java.util.Calendar calendar84 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar80, (int) (byte) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.round(calendar80, 0);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.truncate(calendar80, 2);
        int int90 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar63, calendar88, 0);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar22, calendar63);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86399000L + "'", long18 == 86399000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 527039L + "'", long20 == 527039L);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) 'a');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setSeconds(date15, (int) (byte) 10);
        java.lang.Class<?> wildcardClass18 = date15.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Apr 08 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar34, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMonths(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date25, (int) 'a');
        long long33 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date31, 2);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date31, 1001);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) 'a');
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date37);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Feb 11 17:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Jan 01 00:01:37 CET 97");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date19, (int) (byte) 1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMinutes(date19, (int) '4');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addWeeks(date23, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1440L + "'", long21 == 1440L);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:52:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Feb 12 00:52:00 CET 1970");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar29, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 1);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) (short) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) '#');
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addSeconds(date51, (int) (short) -1);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date53, (int) (short) 1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addDays(date53, (int) '4');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date53, 5);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addYears(date59, 4);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addMonths(date59, (int) ' ');
        int int65 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date43, date59, 0);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date75, (int) (short) 100);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setHours(date75, 5);
        boolean boolean80 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date43, date75);
        int int82 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date11, date75, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor84 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) int82, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar48);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date61, (int) (byte) 10);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setYears(date65, (int) (byte) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addDays(date67, (int) (short) 10);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.ceiling(date69, (int) (byte) 10);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date69);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.round(calendar72, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar14, calendar72, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date19, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:00:02 CET 1969");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor25 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date21, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 31 23:59:59 CET 2066");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar90, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date28, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date30, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 16 00:00:00 CET 2067");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar63);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 1001, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1001");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date36, (int) (short) 100);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addWeeks(date36, 4);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray47);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addSeconds(date48, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addHours(date50, (int) (short) 1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date50, (int) (byte) 10);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setYears(date54, (int) (byte) 1);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setMonths(date36, 0);
        boolean boolean61 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date26, date36, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date36, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date19, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date27, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMinutes(date27, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor32);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date7, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date19, 0);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:00:09 CET 1969");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addDays(date52, (int) '4');
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date52, 5);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addYears(date58, 4);
        boolean boolean61 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date39, date60);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setHours(date60, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addHours(date19, (int) (short) 1);
        long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date23, (int) (short) 1);
        long long27 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date23, 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray34);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addSeconds(date35, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setMonths(date35, (int) (short) 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date35, 0);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (byte) 0);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setHours(date43, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date23, date47, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 335L + "'", long25 == 335L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 482459L + "'", long27 == 482459L);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date32, (int) (short) 0);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar37, calendar52, (int) (byte) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar71, calendar86, (int) (byte) 10);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar71);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar22, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar22, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(obj0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date27, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Dec 31 00:00:00 CET 1");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar24 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 527039L + "'", long22 == 527039L);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMonths(date32, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:35:00 CET 1970");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setHours(date9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, 10);
        java.lang.Class<?> wildcardClass16 = date15.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate(date0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date40, (int) (short) -1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addHours(date42, (int) (short) 1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setSeconds(date42, (int) (short) 0);
        java.util.Calendar calendar47 = org.apache.commons.lang3.time.DateUtils.toCalendar(date42);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray54);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addSeconds(date55, (int) (short) -1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date57, (int) (short) 1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.setSeconds(date57, (int) (short) 0);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.toCalendar(date57);
        java.util.Iterator<java.util.Calendar> calendarItor64 = org.apache.commons.lang3.time.DateUtils.iterator(calendar62, 2);
        boolean boolean66 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar47, calendar62, (int) (byte) 10);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray73);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addSeconds(date74, (int) (short) -1);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addHours(date76, (int) (short) 1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.setSeconds(date76, (int) (short) 0);
        java.util.Calendar calendar81 = org.apache.commons.lang3.time.DateUtils.toCalendar(date76);
        java.util.Iterator<java.util.Calendar> calendarItor83 = org.apache.commons.lang3.time.DateUtils.iterator(calendar81, 2);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar81, (int) (byte) 0);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar47, calendar85);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar85, 1);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar31, calendar85);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar85, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor83);
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date9, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling(date9, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setDays(date13, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date30, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 5, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Sep 27 23:59:59 CET 1972");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date13, date27, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date36, (int) (short) 100);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addWeeks(date36, 4);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray47);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addSeconds(date48, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addHours(date50, (int) (short) 1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date50, (int) (byte) 10);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setYears(date54, (int) (byte) 1);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setMonths(date36, 0);
        boolean boolean61 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date26, date36, 0);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, (int) 'a');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Feb 01 00:04:00 CET 1978");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setDays(date9, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.round(calendar0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar90, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-7200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor13 = org.apache.commons.lang3.time.DateUtils.iterator(date11, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 6);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date30, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, 4);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date19, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Mar 19 00:00:00 CET 21");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 05:59:59 CET 1969");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor38 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 100);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMonths(date36, (int) (short) 0);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date36, 0);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date42, (int) (short) 1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (byte) 0);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setHours(date44, (int) (short) 0);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date48, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addYears(date29, (int) (short) 0);
        boolean boolean34 = org.apache.commons.lang3.time.DateUtils.isSameDay(date19, date33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date19, 1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMinutes(date19, 4);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setHours(date38, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addYears(date52, (int) (short) 0);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date56, (int) (short) 1);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date40, date56, 0);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (short) -1);
        boolean boolean63 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date7, date62);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31622399L + "'", long58 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 10:03:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar58 = org.apache.commons.lang3.time.DateUtils.truncate(calendar56, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:00:00 CET 97");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.round(calendar52, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar59 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar57, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.ceiling(date9, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date15, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 17:40:59 CET 1970");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 5);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar68, (int) (short) 1);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar90);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar90, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar73, 6);
        long long77 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar73);
        long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar82 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar73, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 100);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date7, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:00:00 CET 97");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.ceiling(date23, 1001);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.round(date42, (int) (short) 0);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addSeconds(date53, (int) (short) -1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addHours(date55, (int) (short) 1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date55, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMinutes(date55, 1001);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date45, date55, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 16:40:59 CET 1970");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setDays(date29, 2);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) (short) 0);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date45, (int) (byte) 0);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date33, date47);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date19, date33, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 00:59:59 CET 1969");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setMonths(date57, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.round(calendar52, 0);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar57, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, 4);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date30, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri May 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date23, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date23, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 31622399L + "'", long28 == 31622399L);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date49, (int) (byte) 0);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addHours(date51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date53, date63);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date63);
        java.util.Iterator<?> wildcardItor67 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date37, 3);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray74);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray82);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.addSeconds(date83, (int) (short) -1);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.addHours(date85, (int) (short) 1);
        java.util.Date date89 = org.apache.commons.lang3.time.DateUtils.addYears(date85, (int) (short) 0);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(date75, date89);
        java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date75, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date37, date75, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardItor67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 5);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar68, (int) (short) 1);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar90);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar90, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date42, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 22:59:59 CET 1969");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date19, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:04:00 CET 2072");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setMinutes(date23, 4);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date44, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date46, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 10:04:00 CET 1970");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addYears(date48, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date58, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 31 23:59:59 CET 52");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) calendarItor15, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class org.apache.commons.lang3.time.DateUtils$DateIterator");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addYears(date48, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date30, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 31 23:59:59 CET 52");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMonths(date36, (int) '#');
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date40, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (byte) 100);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date44, 0);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addMinutes(date46, 4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date23, date46, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Dec 01 00:04:00 CET 2072");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date9, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date28, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar73, 6);
        long long77 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor80 = org.apache.commons.lang3.time.DateUtils.iterator(calendar34, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addDays(date0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date9, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date28, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date30, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Nov 10 23:59:59 CET 1971");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, 100);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date27, 0);
        long long33 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date31, (int) (byte) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date35, (int) 'a');
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setDays(date35, 5);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) boolean40, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 365L + "'", long33 == 365L);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date32, (int) (short) 0);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar37, calendar52, (int) (byte) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar71, calendar86, (int) (byte) 10);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar71);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar22, calendar52);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar52, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor93 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Short");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date26, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate(date26, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 86640000L + "'", long28 == 86640000L);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date17, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 4, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:04:00 CET 2072");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar22, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date34, 0);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date26, date34);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date26, (int) (short) 0);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date43, 5);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addSeconds(date53, (int) (short) -1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addSeconds(date55, 1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMonths(date55, (int) '#');
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameDay(date43, date59);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31622399L + "'", long22 == 31622399L);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addYears(date0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1292400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=16,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor18 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date11, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date15, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar73, 6);
        long long77 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar73);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar73, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Nov 10 23:59:59 CET 1971");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addHours(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray7);
        java.util.Iterator<java.util.Calendar> calendarItor11 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor11);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 'a', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 31 23:59:59 CET 2066");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addHours(date21, (int) (byte) 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date21, (int) '4');
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setSeconds(date40, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Short");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 6, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 6");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) 'a');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date32, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 01 00:01:36 CET 2");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Jan 01 10:01:36 CET 2");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date32, (int) (short) 0);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar37, calendar52, (int) (byte) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar71, calendar86, (int) (byte) 10);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar71);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar22, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar22, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) (short) 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.truncate(date31, 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 1001);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setSeconds(date21, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addHours(date19, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor25 = org.apache.commons.lang3.time.DateUtils.iterator(date23, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:59:59 CET 1969");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        java.lang.Class<?> wildcardClass36 = date29.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date29, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (-1));
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addDays(date21, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:58:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 10 23:58:59 CET 2");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) (short) 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.truncate(date31, 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 1001);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) '#');
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setYears(date40, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:16:40 CET 2005");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Jan 01 00:16:40 CET 1");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar73, 6);
        long long77 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar73);
        long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar73, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addDays(date0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addWeeks(date13, 4);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addYears(date41, (int) (short) 0);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameDay(date31, date45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date31, 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setMinutes(date31, 4);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date31, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date23, date31, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date17, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 31 23:59:59 CET 1973");
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar80, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar80, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date30, 5);
        long long47 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date30, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 23500799010L + "'", long47 == 23500799010L);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date49, (int) (byte) 0);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addHours(date51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date53, date63);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date63);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setYears(date67, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:01:36 CET 1970");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator(obj0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date28, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor32 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Nov 10 23:59:59 CET 1971");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.round(date21, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 46079L + "'", long23 == 46079L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMonths(date23, (int) '#');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date23, (int) 'a');
        long long31 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date29, 2);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 1001);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date33, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1440L + "'", long15 == 1440L);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Feb 11 17:00:00 CET 97");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar35, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar69);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar35, calendar69);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar69, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar69, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 527039L + "'", long37 == 527039L);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor13 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) strArray8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on [Ljava.lang.String;@12708c66");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addYears(date30, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date32, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date11, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMonths(date11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Feb 02 00:00:00 CET 1970");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor30 = org.apache.commons.lang3.time.DateUtils.iterator(date28, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 03 05:40:00 CET 1970");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (byte) 10);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 1);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor45 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date13, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor18 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) '#');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date7, 10);
        java.lang.Class<?> wildcardClass31 = date30.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 35");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        java.lang.Class<?> wildcardClass87 = calendar80.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date28, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 10:03:59 CET 1970");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round(date17, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 01 00:00:00 CET 1971");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date32, (int) (short) 0);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar37, calendar52, (int) (byte) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar71, calendar86, (int) (byte) 10);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar71);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar22, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor94 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date17, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:59:02 CET 2");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 100);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date28, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 03 05:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 14 05:40:00 CET 1970");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, (int) 'a');
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:01:36 CET 1970");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 46079L + "'", long21 == 46079L);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long31 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date27, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMonths(date38, (int) '#');
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setYears(date42, (int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addHours(date54, (int) (short) 1);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date54, (int) (byte) 10);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(date42, date58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date58, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addYears(date61, 0);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addDays(date63, (int) (short) 1);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray80);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addSeconds(date81, (int) (short) -1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.addHours(date83, (int) (short) 1);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.addYears(date83, (int) (short) 0);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(date73, date87);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameDay(date65, date73);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.setMonths(date25, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 23:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addWeeks(date0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (short) 1);
        java.util.Calendar calendar75 = org.apache.commons.lang3.time.DateUtils.truncate(calendar53, (int) (byte) 1);
        boolean boolean76 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar34, calendar53);
        long long78 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 8783L + "'", long78 == 8783L);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 30 23:59:59 CET 1969");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) 'a');
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date38, (int) (short) 100);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addWeeks(date38, 4);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date52, (int) (byte) 10);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setYears(date56, (int) (byte) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date58);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date7, date38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.truncate(date38, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 31 23:59:59 CET 1973");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date29, (int) (short) 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, 4);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date33, date43);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date43, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addHours(date0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date15);
        java.util.Calendar calendar21 = org.apache.commons.lang3.time.DateUtils.toCalendar(date15);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62104237200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-62104237200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (-1));
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.toCalendar(date21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar24 = org.apache.commons.lang3.time.DateUtils.truncate(calendar22, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:59:59 CET 1968");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-31539600990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1968,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=366,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar48, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date43, (int) (short) 100);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameDay(date31, date43);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date31);
        java.util.Date date48 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date17, date48, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, 10);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling(date15, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setSeconds(date21, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:58:59 CET 2");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(date0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar31, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 23L + "'", long34 == 23L);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 10);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date28, date45, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date18, date28);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.toCalendar(date18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar58 = org.apache.commons.lang3.time.DateUtils.truncate(calendar56, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-90000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 2, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 2");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 02 00:00:00 CET 1970");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date7, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1440L + "'", long26 == 1440L);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMonths(date23, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar52, calendar86);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar52, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addWeeks(date23, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date7, date25);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (byte) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date27);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date27, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date9, (int) (short) 0);
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date13, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) (short) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Short");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 31622399L + "'", long15 == 31622399L);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setSeconds(date29, 10);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Jan 01 00:00:00 CET 100");
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date9, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 31622399L + "'", long19 == 31622399L);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar31, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar31, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 23L + "'", long34 == 23L);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date17, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.truncate(calendar0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar18, 6);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date30, (int) (byte) 10);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setMonths(date30, (int) (short) 0);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar18, calendar37, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.truncate(date29, 5);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) boolean32, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Boolean");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar35, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar69);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar35, calendar69);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar69, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar75 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 527039L + "'", long37 == 527039L);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date11, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setYears(date31, (int) (byte) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date37, (int) (byte) 1);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date37);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (int) (short) 0);
        java.util.Calendar calendar93 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar92, calendar93, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor19 = org.apache.commons.lang3.time.DateUtils.iterator(date15, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.lang.Class<?> wildcardClass35 = calendarItor34.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 01 00:01:39 CET 1969");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.ceiling(date26, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date21, (int) '4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Apr 30 23:59:59 CET 1974");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar88, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) '#');
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addSeconds(date51, (int) (short) -1);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date53, (int) (short) 1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addDays(date53, (int) '4');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date53, 5);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addYears(date59, 4);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addMonths(date59, (int) ' ');
        int int65 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date43, date59, 0);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date75, (int) (short) 100);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setHours(date75, 5);
        boolean boolean80 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date43, date75);
        int int82 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date11, date75, 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setMinutes(date75, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:03:59 CET 1969");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addSeconds(date0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setDays(date17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor92 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date28, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor21 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date32, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date32, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 00:04:00 CET 1970");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date21, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date21, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:09:59 CET 1969");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 6);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor34 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendarItor32, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on org.apache.commons.lang3.time.DateUtils$DateIterator@d26929a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Feb 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor32);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor36 = org.apache.commons.lang3.time.DateUtils.iterator(date34, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 02:35:00 CET 1970");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 4);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date19, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:04:00 CET 2072");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 240000L + "'", long21 == 240000L);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 3, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 3");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date34, 0);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date26, date34);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date26, (int) (short) 0);
        long long45 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date26, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor47 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date26, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 6L + "'", long45 == 6L);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate(obj0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date28, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor19 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 2, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 2");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 01 02:00:00 CET 1001");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date28, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date30, (int) (byte) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date32, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.ceiling(date32, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 16 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Mar 09 00:00:00 CET 1");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 10);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date28, date45, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date18, date28);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.toCalendar(date18);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date18, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-90000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date27, 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setMonths(date27, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH: 10 -> 11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 23:59:59 CET 100");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar16, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar16, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.truncate(date29, 5);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date31);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (byte) 10);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setHours(date11, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:10:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 04:59:59 CET 1970");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.round(calendar92, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1439L + "'", long15 == 1439L);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date7, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:35:00 CET 1970");
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar31, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (byte) 10);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date25);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addDays(date25, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Apr 11 00:00:00 CET 1970");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(obj0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date23, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addYears(date30, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date30, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.ceiling(date16, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (short) 10);
        java.util.Date date18 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date17, date18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 01 00:10:00 CET 1972");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar16, calendar53);
        long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar16, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 8783L + "'", long56 == 8783L);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addMonths(date44, (int) '#');
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setYears(date48, (int) (short) 100);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.toCalendar(date50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addMonths(date61, (int) '#');
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.truncate(date61, 1);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.round(calendar68, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar51, calendar72);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar72, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date17, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMinutes(date17, 4);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 10 23:00:59 CET 2");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:04:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Feb 10 23:04:59 CET 2");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 100);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date26, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMinutes(date30, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 03 05:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 03 00:00:00 CET 1970");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date50, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 10:03:59 CET 1970");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (int) (short) 0);
        java.util.Calendar calendar93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int95 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar92, calendar93, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMonths(date59, (int) (byte) 0);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date61, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Dec 05 04:00:00 CET 1972");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date21, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:09:59 CET 1969");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor2 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) "hi!", (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on hi!");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date28, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date30, (int) (byte) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMonths(date32, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date34, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 16 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Feb 16 00:00:00 CET 1");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date19);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Iterator<java.util.Calendar> calendarItor37 = org.apache.commons.lang3.time.DateUtils.iterator(calendar35, 2);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar35, (int) (short) 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.truncate(calendar35, (int) (byte) 1);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar35, 1);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray66);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addSeconds(date67, (int) (short) -1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addHours(date69, (int) (short) 1);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.setSeconds(date69, (int) (short) 0);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.toCalendar(date69);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar35, calendar74);
        boolean boolean76 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar20, calendar35);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 8783L + "'", long59 == 8783L);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date13, (int) (short) 10);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setHours(date39, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Mar 18 05:59:59 CET 21");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar34, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        long long39 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 527039L + "'", long39 == 527039L);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) '4');
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date26, date40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor43 = org.apache.commons.lang3.time.DateUtils.iterator(date40, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date11, 1001);
        long long63 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date61, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Dec 01 00:16:41 CET 1972");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date35, (int) (byte) 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date37, 10);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date21, date39, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Dec 31 00:01:39 CET 1968");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.truncate(date13, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date21, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor27 = org.apache.commons.lang3.time.DateUtils.iterator(date25, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Dec 05 23:59:59 CET 1969");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 5);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date39, 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.truncate(date39, (int) (short) 1);
        long long47 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date45, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 86400000L + "'", long47 == 86400000L);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, 4);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date28, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri May 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setDays(date13, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date15, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 31 23:59:59 CET 2066");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 10);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date28, date45, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date18, date28);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor18 = org.apache.commons.lang3.time.DateUtils.iterator(calendar16, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date7, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor15 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1974");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar29, (int) (short) 1);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) calendar29, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardItor90);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.util.Date date0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date10, (int) (byte) 10);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addSeconds(date14, 100);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addYears(date16, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int20 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date0, date16, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Jan 01 00:01:39 CET 1969");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date65, (int) (byte) 10);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addSeconds(date69, 100);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.addYears(date71, (-1));
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addHours(date71, 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date50, date75, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Mon Jan 05 04:01:39 CET 1970");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date25);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMonths(date25, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date30, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Mar 31 23:59:59 CET 1969");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date39, 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date39, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Mar 18 23:59:00 CET 21");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 86399L + "'", long46 == 86399L);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) (byte) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Jun 01 00:00:00 CET 1970");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:59:02 CET 2");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addMonths(date8, (int) '#');
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.truncate(date8, 1);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date14);
        java.util.Calendar calendar17 = org.apache.commons.lang3.time.DateUtils.round(calendar15, (int) (short) 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setSeconds(date27, (int) (short) 0);
        java.util.Calendar calendar32 = org.apache.commons.lang3.time.DateUtils.toCalendar(date27);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar32, 2);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar32, calendar49);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.round(calendar32, (int) (short) 1);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar32, (int) (byte) 1);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar15, calendar32, 0);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar15, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar0, calendar15, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar67, calendar86, (int) (byte) 0);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar86, (int) (byte) 0);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar92);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor95 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar29, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMonths(date0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date21, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 46079L + "'", long23 == 46079L);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1001);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, (int) '#');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate(date24, 1);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.round(calendar33, 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar35);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar16, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar20, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar18, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar18, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar35, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar69);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar35, calendar69);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar69, (int) (byte) 10);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar69, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 527039L + "'", long37 == 527039L);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 86399L + "'", long75 == 86399L);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, 0);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.ceiling(date36, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:05:37 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Fri Jan 01 00:00:00 CET 1971");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date15, 100);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date19, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 05 04:01:39 CET 1970");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) 'a');
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(date29, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendarItor34, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round org.apache.commons.lang3.time.DateUtils$DateIterator@22379718");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 01 00:01:36 CET 2");
        org.junit.Assert.assertNotNull(calendarItor34);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(date15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setDays(date17, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date15, 100);
        java.lang.Class<?> wildcardClass20 = date15.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 05 04:01:39 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) '#');
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addSeconds(date51, (int) (short) -1);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date53, (int) (short) 1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addDays(date53, (int) '4');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date53, 5);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addYears(date59, 4);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addMonths(date59, (int) ' ');
        int int65 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date43, date59, 0);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date75, (int) (short) 100);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setHours(date75, 5);
        boolean boolean80 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date43, date75);
        int int82 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date11, date75, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long84 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date75, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date25);
        long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date25, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 31622399000L + "'", long30 == 31622399000L);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addHours(date21, (int) (byte) 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) '#');
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (-1));
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date52, (int) (byte) 10);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addMinutes(date52, 1001);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(date42, date58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.setMinutes(date42, 0);
        boolean boolean63 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date13, date42, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:00:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.truncate(calendar80, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar35, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar69);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar35, calendar69);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar69, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar75 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar69, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 527039L + "'", long37 == 527039L);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.round(calendar53, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date26, 2);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setDays(date30, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 86640000L + "'", long28 == 86640000L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '4');
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setMinutes(date23, 4);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, 0);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date23);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:52 CET 100");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, 5);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMonths(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (short) 100);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date41, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date45);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray53);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addYears(date64, (int) (short) 0);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.isSameDay(date54, date68);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(date68, 4);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date29, date68, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date68, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jun 16 00:00:00 CEST 2067");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.ceiling(date50, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 10:03:59 CET 1970");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date44, date52);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date52, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) int61, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) 'a');
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date16, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Nov 10 23:59:59 CET 1971");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 27215999L + "'", long18 == 27215999L);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar31, 0);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) (byte) 1);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMonths(date65, (int) '#');
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setYears(date69, (int) (short) 100);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date71);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addHours(date82, (int) (short) 1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.setSeconds(date82, (int) (short) 0);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.toCalendar(date82);
        java.util.Iterator<java.util.Calendar> calendarItor89 = org.apache.commons.lang3.time.DateUtils.iterator(calendar87, 2);
        java.util.Calendar calendar91 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar87, (int) (byte) 0);
        java.util.Calendar calendar93 = org.apache.commons.lang3.time.DateUtils.truncate(calendar87, 1);
        long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar87, (int) (short) 1);
        boolean boolean96 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar87);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar87, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor89);
        org.junit.Assert.assertNotNull(calendar91);
        org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar93);
        org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 31622399L + "'", long95 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setMonths(date29, 2);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addYears(date49, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor53 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date49, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Mar 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Tue Mar 01 00:00:00 CET 2005");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor58 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date44, date52);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date52, (int) (short) 0);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addWeeks(date15, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Feb 09 00:00:00 CET 2073");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date15, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar53, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 46079L + "'", long56 == 46079L);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Date and Patterns must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 6);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 10);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray39);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray47);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addSeconds(date48, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addHours(date50, (int) (short) 1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addYears(date50, (int) (short) 0);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date40, date54);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, 1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.ceiling(date40, 1001);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addYears(date59, (int) 'a');
        boolean boolean63 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date32, date61, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Feb 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:10 CET 1969");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar67, calendar86, (int) (byte) 0);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar86, (int) (byte) 0);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar92);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar95 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date23, 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.ceiling(date29, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:09:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:09:59 CET 35");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addHours(date21, (int) (byte) 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date21, (int) '4');
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.round(date40, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date58 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date57, date58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar88, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardItor90);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar38 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar36, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar73, 6);
        long long77 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar73);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar73, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar18, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar20, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 5);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar31, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMonths(date23, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH: 1 -> 2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor30 = org.apache.commons.lang3.time.DateUtils.iterator(date7, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addWeeks(date31, 1001);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addWeeks(date33, 4);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setYears(date35, (int) (byte) 10);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addWeeks(date49, (int) (byte) 100);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setMinutes(date51, 3);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date9, date51, 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Apr 15 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Dec 02 00:03:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date34, 0);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date26, date34);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date26, (int) (short) 0);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date43, 5);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date43, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Jan 05 04:00:00 CET 1");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 1001);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setSeconds(date27, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.truncate(date32, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 16:40:59 CET 1969");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 1001);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addMonths(date44, (int) '#');
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setYears(date48, (int) (short) 100);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.toCalendar(date50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addMonths(date61, (int) '#');
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.truncate(date61, 1);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.round(calendar68, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar51, calendar72);
        boolean boolean74 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar72);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addYears(date0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setDays(date15, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Feb 11 17:59:59 CET 1970");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1001);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date9, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) long20, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Long");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 527039L + "'", long20 == 527039L);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setHours(date23, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:00 CET 1969");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 6);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setYears(date34, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:06 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 01:39:59 CET 1970");
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Iterator<java.util.Calendar> calendarItor37 = org.apache.commons.lang3.time.DateUtils.iterator(calendar35, 2);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar35, (int) (short) 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.truncate(calendar35, (int) (byte) 1);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar35, 1);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray66);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addSeconds(date67, (int) (short) -1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addHours(date69, (int) (short) 1);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.setSeconds(date69, (int) (short) 0);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.toCalendar(date69);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar35, calendar74);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar35, (int) (short) 0);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar77);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar77, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 8783L + "'", long59 == 8783L);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date34, 0);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date26, date34);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setMinutes(date26, (int) (byte) 0);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setMonths(date26, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Mar 01 06:00:00 CET 1970");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 4);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:04:00 CET 2072");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 01 00:00:00 CET 2072");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.truncate(date44, 5);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setMonths(date58, (int) (short) 0);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date62, (int) '4');
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addMinutes(date62, (int) '#');
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addWeeks(date62, (int) (byte) 100);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addDays(date68, (int) (byte) 0);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.round(date68, 2);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addYears(date68, 10);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date74, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date44, date76, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 01 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 02 00:00:00 CET 1981");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 02 00:00:00 CET 1981");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date9, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:06 CET 1969");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.ceiling(date15, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setDays(date9, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date23, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 08 23:59:59 CET 1970");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar20, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date7, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) long26, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1440");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1440L + "'", long26 == 1440L);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date15, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling(date13, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 5);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        java.util.Iterator<?> wildcardItor22 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar14, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86399000L + "'", long18 == 86399000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 527039L + "'", long20 == 527039L);
        org.junit.Assert.assertNotNull(wildcardItor22);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 06:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 01 06:00:00 CET 1969");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date21, 5);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor57 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray11);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addDays(date0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.truncate(date30, 1001);
        long long49 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date47, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Sep 16 00:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1382400L + "'", long49 == 1382400L);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date26, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 06:00:00 CET 1970");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (-1));
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date17, 5);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setSeconds(date33, (int) (short) 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setHours(date33, 1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date39, (int) (byte) 1);
        boolean boolean42 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:58:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jun 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 01:59:59 CET 1969");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar52, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate(date28, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 06:00:00 CET 1980");
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date44, (int) (short) 0);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(date34, date48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date34, 10);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date34, 0);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addMinutes(date53, (-1));
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameDay(date24, date55);
        java.lang.Class<?> wildcardClass57 = date24.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addYears(date25, (int) 'a');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addMonths(date34, 6);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setYears(date34, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 31 23:59:59 CET 2066");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jun 30 23:59:59 CEST 2067");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Dec 31 23:59:59 CET 100");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date26, (int) (byte) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, 100);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date30, 0);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date16, date36, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Nov 30 23:59:59 CET 1969");
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (byte) 100);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 15 03:59:59 CET 2");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:59:59 CET 2");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 16:41:00 CET 1970");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.round(date11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addWeeks(date31, 1001);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addWeeks(date33, 4);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setYears(date35, (int) (byte) 10);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addWeeks(date49, (int) (byte) 100);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setMinutes(date51, 3);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date9, date51, 0);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date9, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Apr 15 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Dec 02 00:03:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 46079L + "'", long58 == 46079L);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date21, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.round(date21, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:09:59 CET 1969");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar18, (int) (short) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Iterator<java.util.Calendar> calendarItor37 = org.apache.commons.lang3.time.DateUtils.iterator(calendar35, 2);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar35, (int) (short) 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.truncate(calendar35, (int) (byte) 1);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar35, 1);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray66);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addSeconds(date67, (int) (short) -1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addHours(date69, (int) (short) 1);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.setSeconds(date69, (int) (short) 0);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.toCalendar(date69);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar35, calendar74);
        int int77 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar18, calendar74, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 8783L + "'", long59 == 8783L);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date33, 1001);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date33, 5);
        boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date33, 3);
        java.lang.Class<?> wildcardClass42 = date33.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 03 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setSeconds(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, 100);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setSeconds(date21, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Apr 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Apr 10 23:59:01 CET 1970");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling(date13, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 01 00:00:00 CET 1971");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMonths(date0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) (byte) 1);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Jan 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date23, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 3);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (byte) 10);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setYears(date44, (int) (byte) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date44, (int) (byte) 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addDays(date48, (int) (byte) 10);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addDays(date48, 100);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date23, date52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addMonths(date61, (int) '#');
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setHours(date65, 2);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date23, date67, (int) (byte) 10);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addSeconds(date67, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 31622399L + "'", long28 == 31622399L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Fri Apr 10 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Fri Dec 01 02:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Fri Dec 01 02:00:01 CET 1972");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 31 23:59:59 CET 97");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.truncate(date17, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.truncate(date19, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 01 00:10:00 CET 1972");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1972");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar80, 1);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setHours(date43, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date49, (int) (byte) 1);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date51);
        long long54 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar52, 6);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar29, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.round(calendar29, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.lang.Class<?> wildcardClass27 = date24.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.setYears(date39, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Mar 18 23:59:59 CET 1001");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        long long73 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar69, 5);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar69, (int) (byte) 1);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar69, 1);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar48, calendar77);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar48, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 86399000L + "'", long73 == 86399000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 527039L + "'", long75 == 527039L);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setHours(date50, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 10:03:59 CET 1970");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setHours(date11, 2);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setMinutes(date31, 0);
        boolean boolean34 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addMinutes(date33, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Dec 01 02:00:00 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 10 23:00:59 CET 2");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 10 23:06:59 CET 2");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date21, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date23, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setSeconds(date25, (int) (short) 0);
        java.util.Calendar calendar30 = org.apache.commons.lang3.time.DateUtils.toCalendar(date25);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(calendar30, 2);
        boolean boolean34 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar15, calendar30, (int) (byte) 10);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, (int) (short) -1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addHours(date59, (int) (short) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) 0);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.toCalendar(date59);
        java.util.Iterator<java.util.Calendar> calendarItor66 = org.apache.commons.lang3.time.DateUtils.iterator(calendar64, 2);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar49, calendar64, (int) (byte) 10);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar30, calendar49);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray76);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addSeconds(date77, (int) (short) -1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addHours(date79, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.setSeconds(date79, (int) (short) 0);
        java.util.Calendar calendar84 = org.apache.commons.lang3.time.DateUtils.toCalendar(date79);
        long long86 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar84, 1);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar30, calendar84);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.round(calendar30, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar0, calendar30, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 527039L + "'", long86 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar73, 6);
        long long77 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar73);
        long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar73, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long82 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar73, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date23, 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setDays(date32, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:09:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:09:59 CET 35");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Jan 10 00:09:59 CET 35");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date23, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 3);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date23, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 31622399L + "'", long28 == 31622399L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar20, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar20, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addWeeks(date0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date9, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor94 = org.apache.commons.lang3.time.DateUtils.iterator(calendar92, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        long long45 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date30, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 23500799010L + "'", long45 == 23500799010L);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date30, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 16:40:59 CET 1970");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 1001);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setSeconds(date27, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor32 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date29, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar36, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 8783L + "'", long16 == 8783L);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setHours(date56, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) 'a');
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date21, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Fri Dec 31 23:59:59 CET 2066");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Dec 31 23:59:59 CET 2069");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date33, 1001);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date33, 5);
        boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date33, 3);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addSeconds(date49, (int) (short) -1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addMonths(date49, (int) '#');
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.setYears(date53, (int) (short) 100);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date65, (int) (byte) 10);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(date53, date69);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addDays(date69, 1001);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setDays(date82, 2);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date72, date82);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.addMonths(date72, (int) (short) 1);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date33, date87);
        java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.round(date87, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.setDays(date90, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 03 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (int) (short) 0);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar88, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar96 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar94, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendar16, (int) (byte) 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar33, calendar48, (int) (byte) 10);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar67, (int) (byte) 0);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.truncate(calendar67, (int) (byte) 0);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray80);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addSeconds(date81, (int) (short) -1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.addHours(date83, (int) (short) 1);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.setSeconds(date83, (int) (short) 0);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.toCalendar(date83);
        java.util.Iterator<java.util.Calendar> calendarItor90 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, 2);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar88, 5);
        long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, (int) (byte) 1);
        java.util.Calendar calendar96 = org.apache.commons.lang3.time.DateUtils.truncate(calendar88, 1);
        boolean boolean97 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar67, calendar96);
        boolean boolean98 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar16, calendar67);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 86399000L + "'", long92 == 86399000L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 527039L + "'", long94 == 527039L);
        org.junit.Assert.assertNotNull(calendar96);
        org.junit.Assert.assertEquals(calendar96.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date11, 3);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addDays(date31, (int) (short) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setMinutes(date33, 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date33);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Apr 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 10 23:00:59 CET 2");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar29, (int) (short) 1);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) boolean38, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31622399L + "'", long37 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) '4');
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date29, date43);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) '4');
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date19, date29);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        long long45 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date30, 1);
        java.util.Date date46 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 23500799010L + "'", long45 == 23500799010L);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setHours(date11, 2);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Dec 01 02:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Dec 01 00:00:00 CET 1972");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar92, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar52, calendar86);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar52, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date7, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1974");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, 100);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date11, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor18 = org.apache.commons.lang3.time.DateUtils.iterator(date13, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Mar 01 00:00:00 CET 101");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, (int) '#');
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date19, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Apr 30 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Apr 30 23:59:59 CET 35");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Apr 30 23:59:59 CET 35");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling(date13, 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMinutes(date15, (int) (short) 100);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date15, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 01:40:00 CET 1");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date28, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Jan 01 00:00:00 CET 2010");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) '#');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date7, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.round(date7, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 35");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMonths(date59, (int) (byte) 0);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray68);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray76);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addSeconds(date77, (int) (short) -1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addHours(date79, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addYears(date79, (int) (short) 0);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.isSameDay(date69, date83);
        java.util.Iterator<java.util.Calendar> calendarItor86 = org.apache.commons.lang3.time.DateUtils.iterator(date83, 4);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setYears(date83, 6);
        java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.setMinutes(date88, (int) '#');
        java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.setMinutes(date88, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date61, date88, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(calendarItor86);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Fri Dec 31 23:59:59 CET 6");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Fri Dec 31 23:35:59 CET 6");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Fri Dec 31 23:01:59 CET 6");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.truncate(date29, 5);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date31);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date34, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:10:59 CET 1970");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendarItor15, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate org.apache.commons.lang3.time.DateUtils$DateIterator@18734bf3");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jul 01 00:00:00 CET 1970");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) '#');
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date46, 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (short) 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar70, 2);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addHours(date82, (int) (short) 1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.setSeconds(date82, (int) (short) 0);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.toCalendar(date82);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar70, calendar87);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar70, (int) (short) 1);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar70, (int) (byte) 1);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar53, calendar70, 0);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar97 = org.apache.commons.lang3.time.DateUtils.round(calendar53, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.ceiling(date59, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 1973");
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 4);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setYears(date44, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Mar 18 04:59:59 CET 100");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Mar 18 04:59:59 CET 6");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 5);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date39, 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setDays(date45, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Nov 06 23:59:59 CET 1969");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) '#');
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date46, 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (short) 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar70, 2);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addHours(date82, (int) (short) 1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.setSeconds(date82, (int) (short) 0);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.toCalendar(date82);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar70, calendar87);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar70, (int) (short) 1);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar70, (int) (byte) 1);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar53, calendar70, 0);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar34, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            long long97 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setMinutes(date31, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setMinutes(date31, 4);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date13, date31, 0);
        java.util.Iterator<?> wildcardItor39 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date13, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 10 23:00:59 CET 2");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 10 23:04:59 CET 2");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(wildcardItor39);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) 'a');
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date7, date38, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Fri Dec 31 23:59:59 CET 2066");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.truncate(date21, 0);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date24, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 0);
        long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date11, (int) (byte) 1);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date11, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 8783L + "'", long13 == 8783L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 16:59:59 CET 1970");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date11, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date11, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        long long73 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar69, 5);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar69, (int) (byte) 1);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar69, 1);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar48, calendar77);
        java.util.Calendar calendar79 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar77, calendar79, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 86399000L + "'", long73 == 86399000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 527039L + "'", long75 == 527039L);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date23, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 3);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMinutes(date30, (int) ' ');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 31622399L + "'", long28 == 31622399L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:32:59 CET 1969");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date39, 0);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date39, (-1));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Mar 18 23:59:00 CET 21");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Fri Apr 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Mar 18 23:59:59 CET 21");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 4);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date21, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMinutes(date26, (int) '#');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date26, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Dec 31 23:59:59 CET 6");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 31 23:35:59 CET 6");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMonths(date29, 10);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addWeeks(date51, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date53, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Jan 07 00:00:00 CET 1990");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) 'a');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setSeconds(date15, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Apr 08 00:00:10 CET 1970");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        long long26 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date7, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1440L + "'", long26 == 1440L);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date29, (int) (short) 100);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date31);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Jan 20 23:59:59 CET 2");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar22, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar29, (int) (short) 1);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar29);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31622399L + "'", long37 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar67, calendar86, (int) (byte) 0);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar86, (int) (byte) 0);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar92);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar92, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar48, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 10);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date19, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setHours(date19, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86399010L + "'", long21 == 86399010L);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 10 10:59:59 CET 1970");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setDays(date19, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Mar 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Feb 09 23:59:59 CET 1972");
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Oct 16 00:00:00 CET 1972");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar29, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date29, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 08 00:00:00 CET 1970");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(calendar15, 2);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar15, 5);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar15, (int) (byte) 1);
        java.util.Calendar calendar23 = org.apache.commons.lang3.time.DateUtils.truncate(calendar15, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addMonths(date31, (int) '#');
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.truncate(date31, 1);
        java.util.Calendar calendar38 = org.apache.commons.lang3.time.DateUtils.toCalendar(date37);
        java.util.Calendar calendar40 = org.apache.commons.lang3.time.DateUtils.round(calendar38, (int) (short) 0);
        java.util.Calendar calendar42 = org.apache.commons.lang3.time.DateUtils.round(calendar38, 0);
        java.util.Calendar calendar44 = org.apache.commons.lang3.time.DateUtils.round(calendar42, (int) (byte) 10);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar23, calendar44);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar0, calendar44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86399000L + "'", long19 == 86399000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 527039L + "'", long21 == 527039L);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling(date13, 0);
        java.util.Iterator<?> wildcardItor17 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date15, 3);
        java.util.Date date18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardItor17);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) '#');
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setDays(date25, 2);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addYears(date25, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date7, date25, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 35");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setHours(date25, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:34:59 CET 1970");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-62134477200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=16,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar53, 2);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar70);
        java.util.Calendar calendar73 = org.apache.commons.lang3.time.DateUtils.round(calendar53, (int) (short) 1);
        java.util.Calendar calendar75 = org.apache.commons.lang3.time.DateUtils.truncate(calendar53, (int) (byte) 1);
        boolean boolean76 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar34, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            long long78 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar53, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setDays(date28, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 10 10:04:00 CET 1970");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar18, (int) (short) 1);
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar20, calendar21, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) strArray9, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate [Ljava.lang.String;@50f5c0a9");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date27, 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 100);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setMonths(date42, (int) (short) 0);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date42, 0);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(date42, 2);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date60, (int) (short) 100);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addWeeks(date60, 4);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameDay(date42, date60);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) '4');
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date27, date67);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date80, (int) (byte) 0);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addYears(date82, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date27, date82, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Jan 01 00:59:59 CET 1969");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 1001, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-62134477200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=16,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMonths(date29, 10);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addMonths(date59, (int) '#');
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setYears(date63, (int) (short) 100);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setYears(date65, 1001);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setHours(date67, 2);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addYears(date67, (int) (byte) 100);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.addDays(date67, (int) '#');
        boolean boolean74 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date51, date67);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.truncate(date51, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Mon Dec 01 02:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Dec 01 00:00:00 CET 1101");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Mon Jan 05 00:00:00 CET 1002");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
    }
}


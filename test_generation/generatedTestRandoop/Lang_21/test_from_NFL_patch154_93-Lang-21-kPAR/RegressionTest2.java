import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor22 = org.apache.commons.lang3.time.DateUtils.iterator(calendar20, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date39, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date44, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Mar 18 23:59:00 CET 21");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date26, 3);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date19, (int) (byte) -1);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setMonths(date29, (int) (short) 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date33, (int) '4');
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addMinutes(date33, (int) '#');
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date19, date37);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setSeconds(date46, (int) (short) 0);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.toCalendar(date46);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(calendar51, 2);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar51, (int) (byte) 0);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.truncate(calendar51, 1);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar51, (int) (byte) 1);
        long long61 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar51, 2);
        boolean boolean62 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar51);
        java.util.Calendar calendar64 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 527039L + "'", long59 == 527039L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2764799000L + "'", long61 == 2764799000L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.setMinutes(date16, (int) (short) 10);
        long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date22, (int) (byte) 1);
        java.lang.Class<?> wildcardClass25 = date22.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Nov 30 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:10:00 CET 1969");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 526990L + "'", long24 == 526990L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 4);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.round(date21, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setYears(date21, (int) 'a');
        long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date28, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 31 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 527039L + "'", long30 == 527039L);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date44, (int) (short) 0);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(date34, date48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date34, 10);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date34, 0);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addMinutes(date53, (-1));
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameDay(date24, date55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addWeeks(date24, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar29, (int) (short) 1);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar29, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardItor90);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date43, (int) (short) 100);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameDay(date31, date43);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date31);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addDays(date31, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 03 23:59:59 CET 1970");
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, (int) '4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 31 23:59:59 CET 52");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) long16, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Long");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date29, (int) (short) 100);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date31);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date40, (int) (short) -1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addHours(date42, (int) (short) 1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addDays(date42, (int) '4');
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray53);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addSeconds(date54, (int) (short) -1);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addHours(date56, (int) (short) 1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setSeconds(date56, (int) (short) 0);
        boolean boolean61 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date42, date56);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setYears(date42, (int) '4');
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setSeconds(date42, 6);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setMinutes(date42, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date31, date67, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:06 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:03:59 CET 1969");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addWeeks(date31, 1001);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addWeeks(date33, 4);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setYears(date35, (int) (byte) 10);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addWeeks(date49, (int) (byte) 100);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setMinutes(date51, 3);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date9, date51, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Apr 15 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Dec 02 00:03:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.setDays(date39, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Dec 31 23:59:59 CET 100");
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date10, 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date10, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date10, 0);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.toCalendar(date21);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar0, calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) '4');
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.round(date17, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date17, 6);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 06 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 07 00:01:39 CET 1969");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Iterator<java.util.Calendar> calendarItor35 = org.apache.commons.lang3.time.DateUtils.iterator(calendar33, 2);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar33, calendar50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar50, 0);
        long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, 6);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar53, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar72, (int) (short) 1);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar72, (int) (byte) 1);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar53, calendar72);
        boolean boolean96 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        java.util.Iterator<?> wildcardItor98 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar53, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardItor98);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMonths(date19, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 100);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMonths(date33, (int) (short) 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date33, 0);
        java.util.Iterator<java.util.Calendar> calendarItor41 = org.apache.commons.lang3.time.DateUtils.iterator(date33, 2);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addSeconds(date49, (int) (short) -1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date51, (int) (short) 100);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addWeeks(date51, 4);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameDay(date33, date51);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date33, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date25, date33);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) boolean60, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 86400000L + "'", long58 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 5);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar24 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86399000L + "'", long18 == 86399000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 527039L + "'", long20 == 527039L);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.truncate(obj0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMonths(date29, 10);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addWeeks(date51, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor55 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date51, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Jan 07 00:00:00 CET 1990");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMonths(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setDays(date11, 2);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Jan 02 00:00:00 CET 1970");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (byte) 10);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) (byte) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addDays(date34, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date34, 0);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.toCalendar(date34);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray46);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, (int) (short) -1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addHours(date49, (int) (short) 1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setSeconds(date49, (int) (short) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.toCalendar(date49);
        java.util.Iterator<java.util.Calendar> calendarItor56 = org.apache.commons.lang3.time.DateUtils.iterator(calendar54, 2);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        boolean boolean72 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar54, calendar71);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.round(calendar54, (int) (short) 1);
        java.util.Calendar calendar76 = org.apache.commons.lang3.time.DateUtils.round(calendar54, 1001);
        int int78 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar39, calendar54, 1001);
        int int80 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar14, calendar39, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-62104237200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 10);
        java.util.Date date20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date17, date20, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 10 23:59:59 CET 1970");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.round(date21, 1001);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addYears(date23, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 01 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Feb 01 00:00:00 CET 12");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar16, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar16, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date7, 4);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:52:00 CET 1974");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar34, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, 100);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Apr 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:01:39 CET 1970");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date15);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, (int) (short) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        java.util.Iterator<java.util.Calendar> calendarItor37 = org.apache.commons.lang3.time.DateUtils.iterator(calendar35, 2);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar52);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.round(calendar35, (int) (short) 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.round(calendar35, 1001);
        int int59 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar20, calendar35, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar20, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62104237200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 0);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar94, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        long long73 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar69, 5);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar69, (int) (byte) 1);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar69, 1);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar48, calendar77);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar48, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 86399000L + "'", long73 == 86399000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 527039L + "'", long75 == 527039L);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        long long73 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar69, 5);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar69, (int) (byte) 1);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar69, 1);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar48, calendar77);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.round(calendar77, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 86399000L + "'", long73 == 86399000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 527039L + "'", long75 == 527039L);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Iterator<java.util.Calendar> calendarItor35 = org.apache.commons.lang3.time.DateUtils.iterator(calendar33, 2);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar33, calendar50);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar50, 0);
        long long55 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar53, 6);
        long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar53, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar72, (int) (short) 1);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.truncate(calendar72, (int) (byte) 1);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar53, calendar72);
        boolean boolean96 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        // The following exception was thrown during execution in test generation
        try {
            long long98 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar53, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date23, 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, (int) (byte) 10);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMinutes(date32, 4);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.truncate(date44, 10);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setHours(date51, (int) (short) 0);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addMonths(date51, (int) (byte) -1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.setMinutes(date51, (int) (short) 10);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMonths(date51, 1001);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addWeeks(date59, (int) (byte) 100);
        boolean boolean63 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date34, date61, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:09:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Mar 12 00:09:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Mar 12 00:04:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Nov 30 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat May 31 23:00:00 CEST 2053");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat May 01 23:00:00 CEST 2055");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Feb 21 23:59:59 CET 1970");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 5);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar31, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendar16, (int) (byte) 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMonths(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date26, 0);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(date26, 2);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date44, (int) (short) 100);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addWeeks(date44, 4);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(date26, date44);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar16, calendar50);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar16, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.util.Date date0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray15);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addSeconds(date16, (int) (short) -1);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addHours(date18, (int) (short) 1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.addYears(date18, (int) (short) 0);
        boolean boolean23 = org.apache.commons.lang3.time.DateUtils.isSameDay(date8, date22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setSeconds(date8, 10);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setYears(date8, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date0, date8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Jan 01 00:00:00 CET 100");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date11, 1001);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addWeeks(date61, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long65 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date63, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Dec 01 00:16:41 CET 1972");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Dec 08 00:16:41 CET 1972");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.truncate(date13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar18, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar20, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) '#');
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setYears(date50, (int) (short) 100);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date62, (int) (byte) 10);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameDay(date50, date66);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date50);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar34, calendar68, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(calendar15, 2);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setSeconds(date27, (int) (short) 0);
        java.util.Calendar calendar32 = org.apache.commons.lang3.time.DateUtils.toCalendar(date27);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar15, calendar32);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.round(calendar15, (int) (short) 1);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.truncate(calendar15, (int) (byte) 1);
        long long39 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar15, 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray46);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, (int) (short) -1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addHours(date49, (int) (short) 1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setSeconds(date49, (int) (short) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.toCalendar(date49);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar15, calendar54);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar0, calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 8783L + "'", long39 == 8783L);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.round(date11, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, 0);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) '4');
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addDays(date38, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date38, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:05:37 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed May 01 00:04:00 CET 1974");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Fri May 03 00:04:00 CET 1974");
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar31, 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar70, 2);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar70, (int) (byte) 0);
        java.util.Calendar calendar76 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        int int78 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar31, calendar76, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date17, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 31 23:59:59 CET 1973");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMinutes(date0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:01:36 CET 1970");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar93 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar88);
        java.util.Calendar calendar93 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1001);
        java.util.Calendar calendar95 = org.apache.commons.lang3.time.DateUtils.round(calendar93, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar97 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar95, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(calendar93);
        org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=16,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar95);
        org.junit.Assert.assertEquals(calendar95.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addYears(date30, 0);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date32, (int) (short) 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addYears(date52, (int) (short) 0);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date42, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date42, 1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.setMinutes(date42, 4);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setHours(date61, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (short) 0);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addWeeks(date65, (int) '4');
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray74);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addSeconds(date75, (int) (short) -1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addHours(date77, (int) (short) 1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addDays(date77, (int) '4');
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date77, 5);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.isSameDay(date65, date77);
        int int86 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date34, date65, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date65, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 23:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date15, 0);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 29030400L + "'", long21 == 29030400L);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar18, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.truncate(date30, 1001);
        java.util.Date date48 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date47, date48, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Sep 16 00:00:00 CET 1972");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        long long73 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar69, 5);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar69, (int) (byte) 1);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar69, 1);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar48, calendar77);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 86399000L + "'", long73 == 86399000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 527039L + "'", long75 == 527039L);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar54, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) ' ');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 5);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round(date17, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:32:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 00:32:00 CET 102");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 01:00:00 CET 102");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Iterator<?> wildcardItor90 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar29, (int) (short) 1);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 1);
        long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar29, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardItor90);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 365L + "'", long96 == 365L);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Iterator<java.util.Calendar> calendarItor52 = org.apache.commons.lang3.time.DateUtils.iterator(calendar50, 2);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar50, calendar67);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.round(calendar50, (int) (short) 1);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.truncate(calendar50, (int) (byte) 1);
        long long74 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar50, 1);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar50, calendar89);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar50, (int) (short) 0);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar92);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar92);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 8783L + "'", long74 == 8783L);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date17, (int) (byte) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (byte) 10);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date29, (int) '#');
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (-1));
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addWeeks(date50, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date21, date52, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Apr 30 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Apr 30 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Apr 30 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Nov 10 23:59:59 CET 1971");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 4);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMonths(date17, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:04:00 CET 2072");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Feb 01 00:00:00 CET 2072");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) (byte) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date13, (int) ' ');
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.toCalendar(date21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor24 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date21, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Jan 02 08:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=111600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, 5);
        java.util.Calendar calendar35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (-1));
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setHours(date21, 5);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:58:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 10 05:58:59 CET 2");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 10 05:58:35 CET 2");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, 5);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date15, (int) '4');
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor41 = org.apache.commons.lang3.time.DateUtils.iterator(date33, 5);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addWeeks(date33, 4);
        int int45 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date33, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Dec 01 00:52:35 CET 100");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 6);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date9, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:06 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 01:39:59 CET 1970");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) '#');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.truncate(date30, 1);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date36);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.truncate(calendar37, 2);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray46);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, (int) (short) -1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addHours(date49, (int) (short) 1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setSeconds(date49, (int) (short) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.toCalendar(date49);
        java.util.Iterator<java.util.Calendar> calendarItor56 = org.apache.commons.lang3.time.DateUtils.iterator(calendar54, 2);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        boolean boolean72 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar54, calendar71);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar54, 5);
        java.util.Calendar calendar76 = org.apache.commons.lang3.time.DateUtils.round(calendar54, (int) (short) 1);
        boolean boolean77 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar37, calendar54);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar37);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 527039L + "'", long22 == 527039L);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addDays(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setSeconds(date30, 0);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) '4');
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setHours(date38, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:05:37 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed May 01 00:04:00 CET 1974");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed May 01 00:04:00 CET 1974");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date28, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date30);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=3062358000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2067,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=16,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMinutes(date19, (int) (byte) 10);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date19, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 30 23:10:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 4);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date49, (int) (byte) 0);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addHours(date51, 1001);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date53, date63);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date63);
        java.util.Iterator<?> wildcardItor67 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date37, 3);
        java.lang.Class<?> wildcardClass68 = date37.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardItor67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.util.Calendar calendar54 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (int) (short) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setYears(date19, 6);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setYears(date19, 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setSeconds(date19, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Jan 01 00:00:01 CET 6");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 01 00:00:01 CET 1");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date7, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date40, (int) (short) -1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMonths(date40, (int) '#');
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setYears(date44, (int) (short) 100);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date44, (int) (byte) 100);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setMinutes(date44, (int) (short) 10);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date7, date44, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Dec 01 00:10:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) (short) 100);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date34);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Iterator<java.util.Calendar> calendarItor52 = org.apache.commons.lang3.time.DateUtils.iterator(calendar50, 2);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar50, (int) (byte) 0);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar50, 1);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar50, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar50);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar20, calendar50);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 5);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray69);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addSeconds(date70, (int) (short) -1);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addHours(date72, (int) (short) 1);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.setSeconds(date72, (int) (short) 0);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.toCalendar(date72);
        java.util.Iterator<java.util.Calendar> calendarItor79 = org.apache.commons.lang3.time.DateUtils.iterator(calendar77, 2);
        java.lang.String[] strArray86 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray86);
        java.util.Date date89 = org.apache.commons.lang3.time.DateUtils.addSeconds(date87, (int) (short) -1);
        java.util.Date date91 = org.apache.commons.lang3.time.DateUtils.addHours(date89, (int) (short) 1);
        java.util.Date date93 = org.apache.commons.lang3.time.DateUtils.setSeconds(date89, (int) (short) 0);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.toCalendar(date89);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar77, calendar94);
        java.util.Calendar calendar97 = org.apache.commons.lang3.time.DateUtils.round(calendar77, 0);
        boolean boolean99 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar20, calendar77, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor52);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31622399L + "'", long58 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor79);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(calendar97);
        org.junit.Assert.assertEquals(calendar97.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 6);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, (int) (byte) 100);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date34, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:06 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 01:39:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 5999L + "'", long36 == 5999L);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling(date26, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date30, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 01 00:00:00 CET 1970");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar88, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1001);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addHours(date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date9, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar46);
        java.util.Iterator<java.util.Calendar> calendarItor49 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 5);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar29);
        long long52 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar29, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(calendarItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 31622399000L + "'", long52 == 31622399000L);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.truncate(date11, 10);
        java.util.Calendar calendar19 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date11, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 03 04:00:00 CET 1970");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date28, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addYears(date48, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date30, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MILLISECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 31 23:59:59 CET 52");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar16, 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, (int) '#');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date30, (int) (short) 100);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar33, 1001);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.util.Iterator<java.util.Calendar> calendarItor67 = org.apache.commons.lang3.time.DateUtils.iterator(calendar65, 2);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar50, calendar65, (int) (byte) 10);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray76);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addSeconds(date77, (int) (short) -1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addHours(date79, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.setSeconds(date79, (int) (short) 0);
        java.util.Calendar calendar84 = org.apache.commons.lang3.time.DateUtils.toCalendar(date79);
        java.util.Iterator<java.util.Calendar> calendarItor86 = org.apache.commons.lang3.time.DateUtils.iterator(calendar84, 2);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar84, (int) (byte) 0);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar50, calendar88);
        java.util.Iterator<java.util.Calendar> calendarItor91 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, 1);
        long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar33, calendar88);
        long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, (int) (short) 1);
        boolean boolean97 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar18, calendar88);
        long long99 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor86);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(calendarItor91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 24L + "'", long99 == 24L);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addDays(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addYears(date21, (int) 'a');
        java.util.Calendar calendar25 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setYears(date24, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Fri Dec 31 23:59:59 CET 2066");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=3061061999000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2066,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Dec 31 23:59:59 CET 100");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar16, calendar53);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar53, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar56, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-31536000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date15, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.truncate(date30, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor49 = org.apache.commons.lang3.time.DateUtils.iterator(date47, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Sep 16 00:00:00 CET 1972");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.addMonths(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMonths(date59, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setSeconds(date59, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Dec 05 04:00:00 CET 1972");
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 100);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date26, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date26, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 03 05:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 03 00:00:00 CET 1970");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, 100);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date27, 0);
        long long33 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date31, (int) (byte) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date35, (int) 'a');
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setDays(date35, 5);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date35);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long44 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date13, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 365L + "'", long33 == 365L);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date32, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:06 CET 1969");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 0);
        long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date11, (int) (byte) 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addYears(date31, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMinutes(date21, 4);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) 'a');
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, (int) (short) 100);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addWeeks(date52, 4);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date66, (int) (byte) 10);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.setYears(date70, (int) (byte) 1);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.isSameDay(date52, date72);
        boolean boolean74 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date52);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date11, date52);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addDays(date52, (int) (byte) 0);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, 3);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.setYears(date52, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 8783L + "'", long13 == 8783L);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar88, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date94, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1001);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.util.Iterator<java.util.Calendar> calendarItor67 = org.apache.commons.lang3.time.DateUtils.iterator(calendar65, 2);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar65, (int) (byte) 0);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar69);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 1);
        long long74 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar69, 6);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar69, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor67);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setHours(date43, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date49, (int) (byte) 1);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date51);
        long long54 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar52, 6);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar29, calendar52);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar52, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) 'a');
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(date29, 3);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date36, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 01 00:01:36 CET 2");
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Mar 08 23:59:59 CET 21");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 01 00:00:00 CET 107");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        java.util.Iterator<java.util.Calendar> calendarItor85 = org.apache.commons.lang3.time.DateUtils.iterator(calendar83, 2);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar83, (int) (byte) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.truncate(calendar83, 1);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar68, calendar83, 0);
        long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, (int) (short) 1);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar83);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor85);
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 527039L + "'", long93 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar16, 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, (int) '#');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date30, (int) (short) 100);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar33, 1001);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.util.Iterator<java.util.Calendar> calendarItor67 = org.apache.commons.lang3.time.DateUtils.iterator(calendar65, 2);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar50, calendar65, (int) (byte) 10);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray76);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addSeconds(date77, (int) (short) -1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addHours(date79, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.setSeconds(date79, (int) (short) 0);
        java.util.Calendar calendar84 = org.apache.commons.lang3.time.DateUtils.toCalendar(date79);
        java.util.Iterator<java.util.Calendar> calendarItor86 = org.apache.commons.lang3.time.DateUtils.iterator(calendar84, 2);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar84, (int) (byte) 0);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar50, calendar88);
        java.util.Iterator<java.util.Calendar> calendarItor91 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, 1);
        long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean94 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar33, calendar88);
        long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, (int) (short) 1);
        boolean boolean97 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar18, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar99 = org.apache.commons.lang3.time.DateUtils.truncate(calendar88, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor86);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(calendarItor91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date19, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 0);
        long long27 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addDays(date25, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1474L + "'", long27 == 1474L);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 02 00:34:59 CET 1970");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.ceiling(date32, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 01 00:01:36 CET 2");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 01 00:10:00 CET 1972");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) ' ');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round(date15, (int) (byte) 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date15, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date19, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:32:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 01 00:01:00 CET 97");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Jan 01 00:01:00 CET 97");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling(obj0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 6);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (short) 1);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(date9, (int) (byte) 1);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date9, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Feb 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 365L + "'", long36 == 365L);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.truncate(date15, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round(date17, 2);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addYears(date17, 10);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 01 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 02 00:00:00 CET 1981");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 02 00:00:00 CET 1981");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 02 00:00:00 CET 1981");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date11, 1001);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addWeeks(date61, 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) 'a');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Dec 01 00:16:41 CET 1972");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Dec 08 00:16:41 CET 1972");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Dec 12 01:16:41 CET 1972");
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setHours(date13, 0);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 00:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:01 CET 1969");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMonths(date23, (int) '#');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (short) 100);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date27, (int) (byte) 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setMinutes(date27, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date33);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Dec 01 00:10:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 2067");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setDays(date17, 2);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 02 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Jan 02 23:59:59 CET 2");
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, (int) '#');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date28, (int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (byte) 10);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date28, date44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addDays(date44, 1001);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray54);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addSeconds(date55, (int) (short) -1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.setDays(date57, 2);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date47, date57);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date13, date47, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 35");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar31, 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar70, 2);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar70, (int) (byte) 0);
        java.util.Calendar calendar76 = org.apache.commons.lang3.time.DateUtils.round(calendar70, 0);
        java.util.Calendar calendar78 = org.apache.commons.lang3.time.DateUtils.truncate(calendar70, 2);
        boolean boolean79 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar81 = org.apache.commons.lang3.time.DateUtils.round(calendar70, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date13, (int) (byte) 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Jan 07 00:00:00 CET 1");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (int) (short) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setYears(date19, 6);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setYears(date19, 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Jan 01 00:00:01 CET 6");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 01 00:00:01 CET 1");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Feb 05 00:00:01 CET 1970");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.truncate(date18, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Nov 10 23:59:59 CET 1971");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date19, 0);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray31);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray31);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setDays(date33, 2);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date19, date35);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) ' ');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 5);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 100);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date31, 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addMonths(date31, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor39 = org.apache.commons.lang3.time.DateUtils.iterator(date31, 5);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addWeeks(date31, 4);
        int int43 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date17, date41, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:32:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 00:32:00 CET 102");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor39);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        long long41 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 31622399L + "'", long41 == 31622399L);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMonths(date32, 6);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addYears(date32, (int) ' ');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Jul 03 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 03 03:59:59 CET 2002");
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setHours(date0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date19, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, (int) (short) 100);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date13, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Mon Feb 08 23:59:59 CET 1971");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (byte) -1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date49, (int) (short) 0);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setMinutes(date51, 2);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addDays(date51, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date55, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 01 00:02:00 CET 1");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Jan 07 00:00:00 CET 1");
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) ' ');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round(date15, (int) (byte) 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date15, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date19, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:32:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 01 00:01:00 CET 97");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setHours(date13, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 00:59:59 CET 1969");
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) 'a');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Apr 07 23:59:59 CET 1970");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar48, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.ceiling(date23, 1001);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addDays(date15, 1001);
        java.lang.Class<?> wildcardClass46 = date45.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Sep 28 00:01:39 CET 1972");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMinutes(date17, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:10:59 CET 1969");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date27, 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 100);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setMonths(date42, (int) (short) 0);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date42, 0);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(date42, 2);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date60, (int) (short) 100);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addWeeks(date60, 4);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameDay(date42, date60);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) '4');
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date27, date67);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.truncate(date67, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMonths(date23, (int) '#');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date23, (int) 'a');
        long long31 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date29, 2);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 1001);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) 'a');
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date29);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Feb 11 17:00:00 CET 97");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Jan 01 00:01:37 CET 97");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setDays(date50, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setSeconds(date52, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 10:03:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Jan 10 10:03:59 CET 1970");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round(date17, 2);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addYears(date17, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMinutes(date17, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 01 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 02 00:00:00 CET 1981");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 4);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray34);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addSeconds(date35, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addHours(date37, (int) (short) 1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addYears(date37, (int) (short) 0);
        boolean boolean42 = org.apache.commons.lang3.time.DateUtils.isSameDay(date27, date41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, 1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setMinutes(date27, 4);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setHours(date46, (int) (short) 10);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 0);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addWeeks(date50, (int) '4');
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addDays(date62, (int) '4');
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date62, 5);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.isSameDay(date50, date62);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addMinutes(date62, 100);
        boolean boolean72 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date62);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date62, (int) 'a');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:04:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 01:39:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date11, (int) (short) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date27, (int) '4');
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date27, date41);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) '4');
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setSeconds(date27, 6);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addMinutes(date27, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date27, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400L + "'", long17 == 86400L);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:06 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 01:39:59 CET 1970");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar29, (int) (short) 1);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar29);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31622399L + "'", long37 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Iterator<java.util.Calendar> calendarItor42 = org.apache.commons.lang3.time.DateUtils.iterator(date39, 4);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.round(date39, (int) (short) 10);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addWeeks(date44, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(calendarItor42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Mar 12 00:00:00 CET 1970");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addDays(date25, 2);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) 'a');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.truncate(date32, 0);
        java.lang.Class<?> wildcardClass37 = date36.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Jan 02 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) '4');
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.truncate(date17, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date17, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date39, (int) (byte) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor65 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date63, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 00:00:00 CET 21");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Mar 19 00:00:00 CET 21");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, 6);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date61, 1001);
        long long65 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date63, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Jun 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Jun 01 00:00:00 CET 1973");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3648L + "'", long65 == 3648L);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date13, 10);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date15, 2);
        java.lang.Class<?> wildcardClass18 = date17.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date33, 1001);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date33, 5);
        boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date33, 3);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 03 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 08 03:59:59 CET 1970");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date39, (int) (byte) 1);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.toCalendar(date39);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 00:00:00 CET 21");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-61497968400990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=21,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=77,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMonths(date23, (int) (short) 0);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) '4');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMinutes(date27, (int) '#');
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addWeeks(date27, (int) (byte) 100);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) (byte) 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round(date33, 2);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date33, 10);
        int int41 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date33, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 01 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 02 00:00:00 CET 1981");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.truncate(date29, 5);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.round(date31, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date15, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date15, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Dec 01 00:00:35 CET 100");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.round(obj0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:52 CET 1969");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) (byte) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date13, (int) ' ');
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.toCalendar(date21);
        long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar22, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 5, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 5");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Jan 02 08:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=111600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 28800000L + "'", long24 == 28800000L);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date26, 3);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date28, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addWeeks(date31, 1001);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addWeeks(date33, 4);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setYears(date35, (int) (byte) 10);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addWeeks(date49, (int) (byte) 100);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setMinutes(date51, 3);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date9, date51, 0);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addDays(date66, (int) '4');
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date66, 5);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addYears(date72, 4);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addMinutes(date72, (-1));
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date76, 0);
        boolean boolean79 = org.apache.commons.lang3.time.DateUtils.isSameDay(date51, date78);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Apr 15 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Dec 02 00:03:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 23:58:59 CET 1969");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Nov 30 23:59:59 CET 1969");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.truncate(date17, (int) (byte) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor23 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 01 00:10:00 CET 1972");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:16:41 CET 1972");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 5);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor56 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date13, 10);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) ' ');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor13 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date11, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor38 = org.apache.commons.lang3.time.DateUtils.iterator(calendar36, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 10);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date28, date45, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date18, date28);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addWeeks(date18, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Mar 08 00:00:00 CET 1989");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) (short) 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.truncate(date31, 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 1001);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date21, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date21, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar49, 2);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setSeconds(date61, (int) (short) 0);
        java.util.Calendar calendar66 = org.apache.commons.lang3.time.DateUtils.toCalendar(date61);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar49, calendar66);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.truncate(calendar66, 2);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar66);
        long long72 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar66, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 31L + "'", long72 == 31L);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date23, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 3);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (byte) 10);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setYears(date44, (int) (byte) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addYears(date44, (int) (byte) 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addDays(date48, (int) (byte) 10);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addDays(date48, 100);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date23, date52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addMonths(date61, (int) '#');
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setHours(date65, 2);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date23, date67, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 31622399L + "'", long28 == 31622399L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Fri Apr 10 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Fri Dec 01 02:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addWeeks(date13, 4);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMonths(date23, (int) (byte) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setDays(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 28 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 10 23:59:59 CET 100");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date33, 1001);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date33, 5);
        boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date33, 3);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addSeconds(date49, (int) (short) -1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addMonths(date49, (int) '#');
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.setYears(date53, (int) (short) 100);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date65, (int) (byte) 10);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(date53, date69);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addDays(date69, 1001);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setDays(date82, 2);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date72, date82);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.addMonths(date72, (int) (short) 1);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date33, date87);
        java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.round(date87, 0);
        java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.setDays(date87, (int) (byte) 10);
        java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.addDays(date92, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 03 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Tue Oct 10 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Tue Oct 10 23:59:59 CET 1972");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date28, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date30, (int) (byte) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date32, (int) '4');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addYears(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date46, (int) (byte) 10);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setYears(date50, (int) (byte) 1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addDays(date52, (int) (short) 10);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addWeeks(date54, 1001);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addWeeks(date56, 4);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date34, date58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 16 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Mar 09 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Mar 09 00:00:00 CET 5");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Apr 16 00:00:05 CET 21");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Oct 31 23:59:59 CET 1970");
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) (short) 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.truncate(date31, 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 1001);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.ceiling(date21, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:34:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setDays(date24, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setDays(date28, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) (short) 100);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date34);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Iterator<java.util.Calendar> calendarItor52 = org.apache.commons.lang3.time.DateUtils.iterator(calendar50, 2);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar50, (int) (byte) 0);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar50, 1);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar50, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar50);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar20, calendar50);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 5);
        long long64 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar20, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor52);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31622399L + "'", long58 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (byte) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date27);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date27, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.truncate(date44, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date44, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setDays(date17, 2);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addHours(date17, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 02 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 11 05:59:59 CET 2");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar80, 1);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.truncate(calendar88, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar90, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, (int) (short) 10);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date21, 6);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date21, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:10 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jun 30 23:59:10 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 10 23:59:10 CET 1969");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.truncate(date17, (int) (short) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMonths(date23, 100);
        java.lang.Class<?> wildcardClass26 = date25.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Jan 01 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu May 01 00:00:00 CET 10");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 5);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMinutes(date0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) 2, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 2");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 02:35:00 CET 1970");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        long long73 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar69, 5);
        long long75 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar69, (int) (byte) 1);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar69, 1);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar48, calendar77);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar77, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 86399000L + "'", long73 == 86399000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 527039L + "'", long75 == 527039L);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 1);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar34, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor57 = org.apache.commons.lang3.time.DateUtils.iterator(date11, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar41 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar39, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar34, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date23, 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addYears(date29, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:09:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:09:59 CET 35");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Jan 01 00:09:59 CET 2070");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar18, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar20, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 6);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Feb 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:10 CET 1969");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.util.Date date0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date10, (int) (byte) 10);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addSeconds(date14, 100);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addHours(date14, 0);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date18, (int) (short) 1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date18, (int) (byte) 10);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date22, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int26 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date0, date22, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 365L + "'", long20 == 365L);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 5);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date39, 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date39, (int) '#');
        java.lang.Class<?> wildcardClass48 = date47.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addHours(date19, (int) (short) 1);
        long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date23, (int) (short) 1);
        long long27 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date23, 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.ceiling(date23, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 335L + "'", long25 == 335L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 482459L + "'", long27 == 482459L);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.round(date30, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 01:37:00 CET 1970");
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar31, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        // The following exception was thrown during execution in test generation
        try {
            long long31 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar29, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date19, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date19, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 30 23:59:59 CET 1969");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar41 = org.apache.commons.lang3.time.DateUtils.round(calendar39, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date9, 10);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addDays(date41, (int) '4');
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date41, 5);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date47, 1);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date31, date49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addDays(date31, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 10");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setDays(date30, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Fri Sep 01 23:59:59 CET 1972");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) 'a');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (byte) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:20 CET 1970");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setSeconds(date62, (int) (short) 0);
        java.util.Calendar calendar67 = org.apache.commons.lang3.time.DateUtils.toCalendar(date62);
        java.util.Iterator<java.util.Calendar> calendarItor69 = org.apache.commons.lang3.time.DateUtils.iterator(calendar67, 2);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar52, calendar67, (int) (byte) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar67, calendar86, (int) (byte) 0);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar86, (int) (byte) 0);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar92);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar92, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor93 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date7, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, (int) (short) 10);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setMonths(date29, (int) (short) 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) (short) 0);
        boolean boolean36 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date35);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:10 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 100);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date26, 5);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, 3);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMonths(date26, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 03 05:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 03 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Apr 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Jun 03 04:00:00 CET 1970");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 4);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.round(date21, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setYears(date21, (int) 'a');
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addDays(date38, (int) '4');
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, 5);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMonths(date44, 4);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setYears(date46, 10);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date21, date50, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 31 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Apr 30 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Apr 30 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Apr 30 23:59:59 CET 1970");
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor13 = org.apache.commons.lang3.time.DateUtils.iterator(date7, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addHours(date21, (int) (short) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setSeconds(date21, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setHours(date21, 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMonths(date21, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setMinutes(date21, 4);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date7, date21, (int) (short) 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round(date7, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:04:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date13, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 02 01:00:00 CET 1971");
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addYears(date48, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addYears(date30, 5);
        long long60 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date30, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Dec 31 23:59:59 CET 57");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setDays(date50, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setSeconds(date52, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 10:03:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Jan 10 10:03:59 CET 1970");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setHours(date21, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 30 10:59:59 CET 1969");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) calendar16, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar16, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (byte) 10);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 1);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMinutes(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, 100);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (int) (short) 0);
        long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date23, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Apr 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 31622399010L + "'", long25 == 31622399010L);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setHours(date40, 6);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMonths(date40, 4);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.truncate(date44, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray53);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addSeconds(date54, (int) (short) -1);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMonths(date54, (int) (short) 0);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date54, 0);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (byte) 0);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setHours(date62, (int) (short) 0);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setYears(date66, 6);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addMonths(date66, 10);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(date44, date66);
        boolean boolean72 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date66);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(date66, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Fri May 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Fri Jan 01 00:00:01 CET 6");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Nov 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date24, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri May 01 00:00:00 CET 1970");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date7, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.round(date13, 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 4);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray34);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addSeconds(date35, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addHours(date37, (int) (short) 1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addYears(date37, (int) (short) 0);
        boolean boolean42 = org.apache.commons.lang3.time.DateUtils.isSameDay(date27, date41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, 1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setMinutes(date27, 4);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setHours(date46, (int) (short) 10);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 0);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addWeeks(date50, (int) '4');
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addDays(date62, (int) '4');
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date62, 5);
        boolean boolean69 = org.apache.commons.lang3.time.DateUtils.isSameDay(date50, date62);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addMinutes(date62, 100);
        boolean boolean72 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date62);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, (int) '4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:04:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Dec 31 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 01:39:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Dec 01 00:52:00 CET 2072");
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date30, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 06:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 06:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 17:10:00 CET 1970");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMinutes(date21, 3);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray34);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addSeconds(date35, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date35, (int) '#');
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.setYears(date35, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int43 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date21, date41, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400010L + "'", long23 == 86400010L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:03:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Jan 01 00:00:00 CET 97");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 0);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date39, (int) (byte) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setMonths(date61, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 00:00:00 CET 21");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Jan 01 00:00:00 CET 21");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMonths(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (short) 100);
        java.util.Calendar calendar32 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date31, (int) (byte) 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date44, 1001);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date58, (int) (byte) 10);
        boolean boolean63 = org.apache.commons.lang3.time.DateUtils.isSameDay(date44, date58);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameDay(date34, date44);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameDay(date17, date34);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) (byte) 10);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMinutes(date38, 1001);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date28, date44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addDays(date44, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Jan 11 16:40:59 CET 1970");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addYears(date25, (int) ' ');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400010L + "'", long23 == 86400010L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 2002");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round(date26, (int) (byte) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addDays(date26, (int) (short) 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 1001, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Sep 27 23:59:59 CET 1972");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date30, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Sep 27 23:59:59 CET 1972");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setSeconds(date15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar16, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) 'a');
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMonths(date36, (int) '#');
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date40, (int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date52, (int) (byte) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date40, date56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addYears(date75, (int) (short) 0);
        boolean boolean80 = org.apache.commons.lang3.time.DateUtils.isSameDay(date65, date79);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(date79, 4);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date40, date79, 0);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addMonths(date40, (int) '#');
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 100);
        java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.addMonths(date40, 6);
        java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.setHours(date90, (int) (byte) 1);
        java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.addHours(date92, 4);
        boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date94);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Fri Jun 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Fri Jun 01 01:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Fri Jun 01 05:00:00 CET 1973");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, (int) (short) 10);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) '4');
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date29, date43);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) '4');
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date29, 6);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date19, date29, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 10:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:06 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addSeconds(date11, (int) ' ');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:32 CET 1970");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar26 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 527039L + "'", long22 == 527039L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2764799000L + "'", long24 == 2764799000L);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 10);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date28, date45, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date18, date28);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.toCalendar(date18);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addMonths(date64, (int) '#');
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setYears(date64, (int) 'a');
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.ceiling(date70, 0);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addMinutes(date72, (int) (short) 100);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date18, date72);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.setMinutes(date18, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-90000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Jan 01 01:40:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 00:05:00 CET 1969");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date33, 1001);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date33, 5);
        boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        java.util.Calendar calendar40 = org.apache.commons.lang3.time.DateUtils.toCalendar(date15);
        java.util.Calendar calendar42 = org.apache.commons.lang3.time.DateUtils.truncate(calendar40, (int) (byte) 0);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setSeconds(date52, (int) (short) 0);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.toCalendar(date52);
        java.util.Iterator<java.util.Calendar> calendarItor59 = org.apache.commons.lang3.time.DateUtils.iterator(calendar57, 2);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray66);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addSeconds(date67, (int) (short) -1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addHours(date69, (int) (short) 1);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.setSeconds(date69, (int) (short) 0);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.toCalendar(date69);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar57, calendar74);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar74, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar42, calendar77);
        long long80 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar42, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=3603599000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor59);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-2682000000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.round(date9, 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (int) (short) 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setHours(date17, 3);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor23 = org.apache.commons.lang3.time.DateUtils.iterator(date21, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Jan 01 03:00:00 CET 2");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 01 03:00:00 CET 2");
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar31, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 4);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date21, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMinutes(date26, (int) '#');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMinutes(date26, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor32 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Dec 31 23:59:59 CET 6");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 31 23:35:59 CET 6");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Dec 31 23:01:59 CET 6");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setDays(date11, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon Dec 01 23:59:59 CET 1969");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 6);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:06 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 01:39:59 CET 1970");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.round(date25, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setYears(date25, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar53);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (short) 0);
        java.util.Calendar calendar58 = org.apache.commons.lang3.time.DateUtils.round(calendar56, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor60 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) calendar56, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) (byte) 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round(date17, 2);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addYears(date17, 10);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setSeconds(date27, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 01 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 02 00:00:00 CET 1981");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 02 00:00:00 CET 1981");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 02 00:00:00 CET 1981");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date13, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 10:00:00 CET 1970");
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 0);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 1001);
        long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar49, 2);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setSeconds(date61, (int) (short) 0);
        java.util.Calendar calendar66 = org.apache.commons.lang3.time.DateUtils.toCalendar(date61);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar49, calendar66);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.truncate(calendar66, 2);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar66);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar66, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        long long54 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar48, (int) (short) 1);
        long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar48, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 8783L + "'", long54 == 8783L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 31622399000L + "'", long56 == 31622399000L);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 6);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 23L + "'", long18 == 23L);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.round(calendar52, 0);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Iterator<java.util.Calendar> calendarItor92 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 5);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar57, calendar72);
        long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar72, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date97 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) (byte) 1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendarItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 365L + "'", long95 == 365L);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.round(date9, 0);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date33, (int) (short) 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(date21, 4);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.round(date21, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendarItor24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.round(date21, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date21, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 46079L + "'", long23 == 46079L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 5);
        long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86399000L + "'", long18 == 86399000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 527039L + "'", long20 == 527039L);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date27, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setDays(date40, 2);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date40);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date30, 5);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.round(calendar46, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=86482799015,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=8,WEEK_OF_YEAR=40,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=271,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=15,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray33);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addSeconds(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setMonths(date34, (int) (short) 0);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date34, 0);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date26, date34);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setMinutes(date26, (int) (byte) 0);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addSeconds(date51, (int) (short) -1);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date53, (int) (short) 1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date53, (int) (byte) 10);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addSeconds(date57, 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date59, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date43, date61, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:01:39 CET 1970");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) 'a');
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date38, (int) (short) 100);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addWeeks(date38, 4);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date52, (int) (byte) 10);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setYears(date56, (int) (byte) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date58);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date7, date38);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round(date26, (int) (byte) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addDays(date26, (int) (short) 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.truncate(date41, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:59 CET 1970");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setYears(date31, (int) (byte) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date33, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date37, (int) (byte) 1);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date37);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date37, 5);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addMinutes(date50, 2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date42, date54, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Jan 01 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar88, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long96 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, 0);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, 0);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date26, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Feb 05 00:00:00 CET 1");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date25, 100);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) 100);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMinutes(date32, (int) '4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 07 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Dec 31 23:59:59 CET 2069");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Jan 01 00:01:39 CET 2070");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Jan 01 00:53:39 CET 2070");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date9, 1001);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date9, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar88, 1001);
        java.util.Date date96 = org.apache.commons.lang3.time.DateUtils.round(date94, (int) (short) 0);
        java.util.Date date98 = org.apache.commons.lang3.time.DateUtils.addYears(date94, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date98);
        org.junit.Assert.assertEquals(date98.toString(), "Sat Jan 01 00:00:00 CET 7");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date33, 1001);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date33, 5);
        boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        java.util.Calendar calendar40 = org.apache.commons.lang3.time.DateUtils.toCalendar(date15);
        java.util.Calendar calendar42 = org.apache.commons.lang3.time.DateUtils.truncate(calendar40, (int) (byte) 0);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setSeconds(date52, (int) (short) 0);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.toCalendar(date52);
        java.util.Iterator<java.util.Calendar> calendarItor59 = org.apache.commons.lang3.time.DateUtils.iterator(calendar57, 2);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray66);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addSeconds(date67, (int) (short) -1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.addHours(date69, (int) (short) 1);
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.setSeconds(date69, (int) (short) 0);
        java.util.Calendar calendar74 = org.apache.commons.lang3.time.DateUtils.toCalendar(date69);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar57, calendar74);
        java.util.Calendar calendar77 = org.apache.commons.lang3.time.DateUtils.truncate(calendar74, 2);
        boolean boolean78 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar42, calendar77);
        java.util.Calendar calendar79 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar42, calendar79, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=3603599000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor59);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-2682000000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setMonths(date0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 1);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.round(calendar52, 0);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        java.util.Iterator<java.util.Calendar> calendarItor74 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 2);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray81);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addSeconds(date82, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date84, (int) (short) 1);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.setSeconds(date84, (int) (short) 0);
        java.util.Calendar calendar89 = org.apache.commons.lang3.time.DateUtils.toCalendar(date84);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar72, calendar89);
        java.util.Iterator<java.util.Calendar> calendarItor92 = org.apache.commons.lang3.time.DateUtils.iterator(calendar72, 5);
        boolean boolean93 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar57, calendar72);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar57, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendarItor55);
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(calendarItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, 10);
        long long21 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date17, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Apr 30 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Apr 30 23:59:59 CET 10");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86399005L + "'", long21 == 86399005L);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, (int) '#');
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setHours(date17, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Apr 30 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Apr 30 23:59:59 CET 35");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Apr 30 06:59:59 CET 1970");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addYears(date48, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addWeeks(date30, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date30, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 31 23:59:59 CET 52");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 5);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date26, (int) (byte) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, 100);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date30, 0);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addMonths(date36, (int) (short) 0);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray53);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addSeconds(date54, (int) (short) -1);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addHours(date56, (int) (short) 1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addYears(date56, (int) (short) 0);
        boolean boolean61 = org.apache.commons.lang3.time.DateUtils.isSameDay(date46, date60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date46, 1);
        boolean boolean64 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date38, date46);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setMonths(date46, 2);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addYears(date66, (int) '#');
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addYears(date66, 100);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(date13, date66);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Mar 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Tue Mar 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Mar 01 00:00:00 CET 2070");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addYears(date25, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date34, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 31 23:59:59 CET 2066");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMonths(date46, (int) '#');
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setYears(date50, (int) (short) 100);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date62, (int) (byte) 10);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.isSameDay(date50, date66);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date50);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar34, calendar68, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar34, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, (int) (short) 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date17, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 35");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 24L + "'", long19 == 24L);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray50);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setHours(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date39, date56);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (byte) 0);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date39, (int) (byte) 1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, 1);
        long long65 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date63, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 00:00:00 CET 21");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Mar 19 00:00:00 CET 21");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addYears(date25, (int) 'a');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.round(date34, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 31 23:59:59 CET 2066");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) -1);
        java.lang.Class<?> wildcardClass29 = date7.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addWeeks(date24, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Date and Patterns must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.truncate(calendar48, (int) (byte) 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setMonths(date62, (int) (short) 0);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date66, (int) '4');
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addMinutes(date66, (int) '#');
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        boolean boolean72 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar48, calendar71);
        long long74 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar48, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 31622399000L + "'", long74 == 31622399000L);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, 6);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.setHours(date61, (int) (byte) 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.round(date65, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Jun 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Jun 01 01:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Fri Jun 01 05:00:00 CET 1973");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date11, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addYears(date30, 0);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date32, (int) (short) 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addYears(date52, (int) (short) 0);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date42, date56);
        boolean boolean58 = org.apache.commons.lang3.time.DateUtils.isSameDay(date34, date42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setMinutes(date34, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 23:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addWeeks(date19, 4);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addDays(date19, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date19, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 14 23:59:59 CET 23");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setHours(date15, 2);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setYears(date15, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: YEAR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Dec 01 00:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 01 02:00:00 CET 1001");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 01 00:00:00 CET 1101");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 3);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMonths(date19, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) '4');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMinutes(date23, (int) '#');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date23, (int) (byte) 100);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (byte) 0);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.round(date29, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date11, date33, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 01 00:00:00 CET 1971");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.util.Iterator<java.util.Calendar> calendarItor55 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor57 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendarItor55);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, 2);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, 1001);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray34);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addSeconds(date35, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addHours(date37, (int) (short) 1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addYears(date37, (int) (short) 0);
        boolean boolean42 = org.apache.commons.lang3.time.DateUtils.isSameDay(date27, date41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addHours(date27, (int) (byte) 10);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addYears(date27, (int) '#');
        long long48 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date27, 6);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date27);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 11 17:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Apr 19 17:00:00 CET 116");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date44, date52);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date52, (int) (short) 0);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addWeeks(date15, 5);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date63, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 05 00:00:00 CET 2073");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 05 00:00:00 CET 2073");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date26, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Feb 01 00:00:00 CET 100");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, 5);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 11 17:59:59 CET 1975");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, (-1));
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) '4');
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.setSeconds(date29, (int) (short) 0);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.toCalendar(date29);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.truncate(date29, 10);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 1001);
        long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date29, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.ceiling(date29, 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date42, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:01:39 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Jan 03 04:01:39 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 365L + "'", long40 == 365L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.addHours(date75, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setSeconds(date75, (int) (short) 0);
        java.util.Calendar calendar80 = org.apache.commons.lang3.time.DateUtils.toCalendar(date75);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar80, 2);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar65, calendar80, (int) (byte) 10);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar46, calendar80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar14, calendar80);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar80, 1);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar88, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.round(calendar90, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 527039L + "'", long16 == 527039L);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addYears(date30, 0);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date32, (int) (short) 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addYears(date52, (int) (short) 0);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(date42, date56);
        boolean boolean58 = org.apache.commons.lang3.time.DateUtils.isSameDay(date34, date42);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray65);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addSeconds(date66, (int) (short) -1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addHours(date68, (int) (short) 1);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addDays(date68, (int) '4');
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.setMinutes(date68, 1);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addHours(date68, 0);
        int int78 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date34, date76, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.truncate(date76, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 23:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addYears(date48, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date30, date55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addYears(date30, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor60 = org.apache.commons.lang3.time.DateUtils.iterator(date58, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Dec 31 23:59:59 CET 57");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray10);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date9, (int) (short) 0);
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, (int) '#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 31622399L + "'", long15 == 31622399L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:34:59 CET 1970");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date9, 10);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addDays(date41, (int) '4');
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date41, 5);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date47, 1);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date31, date49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addHours(date49, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 01:59:59 CET 1970");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addHours(date11, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 02:00:00 CET 1970");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date19, 5);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date31, (int) '4');
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMinutes(date31, 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addHours(date31, 0);
        int int41 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date21, date31, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date19, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 11 00:52:00 CET 2");
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        long long46 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date44, (int) (short) 1);
        boolean boolean48 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date28, date44, 0);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date28, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setDays(date28, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 10:04:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31622399L + "'", long46 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 10:03:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 06 10:04:00 CET 1970");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date17, 0);
        java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date19, (int) (short) 1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date19, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 10 23:00:59 CET 2");
        org.junit.Assert.assertNotNull(calendarItor21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 10 23:00:59 CET 2");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date17, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:02:59 CET 1970");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        java.util.Iterator<java.util.Calendar> calendarItor24 = org.apache.commons.lang3.time.DateUtils.iterator(calendar22, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor24);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addYears(date7, 4);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date13, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:52:00 CET 1974");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar34, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date9, 3);
        long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date11, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1442L + "'", long13 == 1442L);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addWeeks(date31, 1001);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addWeeks(date33, 4);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setYears(date35, (int) (byte) 10);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addWeeks(date49, (int) (byte) 100);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setMinutes(date51, 3);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date9, date51, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) boolean56, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Apr 15 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Dec 02 00:03:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Mar 21 23:59:59 CET 2");
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date33, 1001);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date33, 5);
        boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date33, 3);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addSeconds(date49, (int) (short) -1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addMonths(date49, (int) '#');
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.setYears(date53, (int) (short) 100);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date65, (int) (byte) 10);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(date53, date69);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addDays(date69, 1001);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setDays(date82, 2);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date72, date82);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.addMonths(date72, (int) (short) 1);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date33, date87);
        java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.round(date87, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date87, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 03 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar18, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar20, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date28, (int) (short) 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date30, (int) (byte) 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date32, (int) '4');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addYears(date34, 4);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.setHours(date36, 5);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date48, (int) (short) 100);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addWeeks(date48, 4);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray59);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (short) -1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addHours(date62, (int) (short) 1);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date52, date62);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date62, 4);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(date38, date67);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 16 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Mar 09 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Mar 09 00:00:00 CET 5");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Mar 09 05:00:00 CET 5");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 4);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date15, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date15, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Aug 31 23:59:59 CET 1972");
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date13, 2);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date17, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 11 17:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Mar 11 17:00:00 CET 97");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor17 = org.apache.commons.lang3.time.DateUtils.iterator(date13, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (byte) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date27, 0);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setYears(date30, (int) 'a');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 01 00:59:59 CET 97");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar29, calendar48, (int) (byte) 0);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 0);
        long long36 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar34, 6);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar34, 2);
        java.util.Iterator<java.util.Calendar> calendarItor40 = org.apache.commons.lang3.time.DateUtils.iterator(calendar34, 2);
        java.util.Calendar calendar42 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar34, 0);
        java.util.Calendar calendar43 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar42, calendar43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(calendarItor40);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar88, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 86400000L + "'", long90 == 86400000L);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) '4');
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.ceiling(date21, 0);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date21, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Feb 21 23:59:59 CET 1");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, 100);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addDays(date18, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Apr 01 00:00:00 CET 109");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Apr 11 00:00:00 CET 109");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        java.util.Calendar calendar39 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1);
        java.util.Calendar calendar41 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) ' ');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date15, 5);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setYears(date17, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date17, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Jan 01 00:32:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 00:32:00 CET 102");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:32:00 CET 32");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar48, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) '4');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 100);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date26, 5);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 03 05:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 03 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 04:01:00 CET 1970");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar88, 6);
        long long92 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar88, 5);
        java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) calendar88, 1001);
        java.util.Date date96 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date94, (int) (short) 1);
        java.util.Date date98 = org.apache.commons.lang3.time.DateUtils.setSeconds(date96, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date98);
        org.junit.Assert.assertEquals(date98.toString(), "Sat Jan 01 00:00:10 CET 1");
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.ceiling(date18, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) (byte) 10);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMinutes(date38, 1001);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date28, date44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setMinutes(date28, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:00:59 CET 1969");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray49);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addSeconds(date50, (int) (short) -1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addHours(date52, (int) (short) 1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addDays(date52, (int) '4');
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date52, 5);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addYears(date58, 4);
        boolean boolean61 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date39, date60);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        // The following exception was thrown during execution in test generation
        try {
            long long64 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar62, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=126226799005,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1973,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=5,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addDays(date25, 2);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) 'a');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.truncate(date32, 0);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addDays(date36, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor40 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Jan 02 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 11 00:00:00 CET 1");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, (int) (short) 1);
        long long30 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date25, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.truncate(date25, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 07 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 31622399000L + "'", long30 == 31622399000L);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar31, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar31, calendar49);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMonths(date9, (int) (short) 0);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.Class<?> wildcardClass17 = date9.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMonths(date25, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400010L + "'", long23 == 86400010L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 01 00:00:00 CET 1970");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date39, 0);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setYears(date39, 1001);
        java.util.Calendar calendar47 = org.apache.commons.lang3.time.DateUtils.toCalendar(date46);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray54);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addSeconds(date55, (int) (short) -1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date57, (int) (short) 1);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.setSeconds(date57, (int) (short) 0);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.toCalendar(date57);
        java.util.Iterator<java.util.Calendar> calendarItor64 = org.apache.commons.lang3.time.DateUtils.iterator(calendar62, 2);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray71);
        java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.addSeconds(date72, (int) (short) -1);
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.addHours(date74, (int) (short) 1);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.setSeconds(date74, (int) (short) 0);
        java.util.Calendar calendar79 = org.apache.commons.lang3.time.DateUtils.toCalendar(date74);
        boolean boolean80 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar62, calendar79);
        java.util.Iterator<java.util.Calendar> calendarItor82 = org.apache.commons.lang3.time.DateUtils.iterator(calendar62, 5);
        int int84 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar47, calendar62, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long86 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar62, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Mar 18 23:59:00 CET 21");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Mar 18 23:59:59 CET 1001");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-30571520400990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1001,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=77,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(calendarItor82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMinutes(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addWeeks(date17, (int) (short) 100);
        java.util.Iterator<?> wildcardItor21 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date19, 4);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addDays(date31, (int) '4');
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date31, 5);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date37, 4);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMonths(date37, (int) ' ');
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, 10);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date41, 2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date45, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:01:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Mar 11 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Feb 09 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(wildcardItor21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Fri Sep 01 00:00:09 CET 1972");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Sep 01 00:00:00 CET 1972");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (byte) 10);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date25);
        java.util.Calendar calendar44 = org.apache.commons.lang3.time.DateUtils.toCalendar(date25);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date39, 0);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addDays(date39, (int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addYears(date66, (int) (short) 0);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(date56, date70);
        java.util.Iterator<java.util.Calendar> calendarItor73 = org.apache.commons.lang3.time.DateUtils.iterator(date56, 6);
        boolean boolean74 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date48, date56);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Mar 18 23:59:00 CET 21");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Fri Apr 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jun 26 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(calendarItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date9, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date7, 0);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMinutes(date26, (-1));
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setHours(date26, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) (byte) 10);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMinutes(date38, 1001);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date28, date44);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray52);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addSeconds(date53, (int) (short) -1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addHours(date55, (int) (short) 1);
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addDays(date55, (int) '4');
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date55, 5);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addYears(date61, 4);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addMinutes(date61, (int) ' ');
        int int67 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date44, date61, 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:31:59 CET 1970");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 22:59:59 CET 1969");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor28 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date24, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar20, 6);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMonths(date30, (int) '#');
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.truncate(date30, 1);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date36);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        long long54 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar52, 1);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar69, calendar86);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar52, calendar86);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar37, calendar52);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar20, calendar37);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86399L + "'", long22 == 86399L);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 527039L + "'", long54 == 527039L);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date11, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setMonths(date13, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Feb 01 00:00:00 CET 100");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date32, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:35:00 CET 1970");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, (int) (short) 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addDays(date38, (int) '4');
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, 5);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addYears(date44, 4);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) 100);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date28, date46);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 07 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:01:39 CET 1974");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.round(date21, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor27 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) 0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 46079L + "'", long23 == 46079L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, (int) (byte) 10);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date31, (int) (byte) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setYears(date35, (int) (byte) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addDays(date37, (int) (short) 10);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addWeeks(date39, 1001);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addWeeks(date41, 4);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setYears(date43, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date43);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date21, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 365L + "'", long19 == 365L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Apr 15 23:59:59 CET 10");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar88, 5);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 86400010L, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Long");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.truncate(calendar31, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.truncate(date17, (int) (byte) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date17, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 01 00:10:00 CET 1972");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Dec 01 00:10:00 CET 1972");
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date26, 2);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date26, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date30, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:04:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 86640000L + "'", long28 == 86640000L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, 5);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date15, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 10 23:59:59 CET 1970");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1001);
        java.util.Calendar calendar19 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addHours(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.setSeconds(date32, (int) (short) 0);
        java.util.Calendar calendar37 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date47, (int) (short) 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.setSeconds(date47, (int) (short) 0);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date47);
        java.util.Iterator<java.util.Calendar> calendarItor54 = org.apache.commons.lang3.time.DateUtils.iterator(calendar52, 2);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar37, calendar52, (int) (byte) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray63);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date64, (int) (short) -1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.addHours(date66, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setSeconds(date66, (int) (short) 0);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.toCalendar(date66);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        java.util.Iterator<java.util.Calendar> calendarItor88 = org.apache.commons.lang3.time.DateUtils.iterator(calendar86, 2);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar71, calendar86, (int) (byte) 10);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar52, calendar71);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar22, calendar52);
        java.util.Calendar calendar94 = org.apache.commons.lang3.time.DateUtils.round(calendar52, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62103373200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62104237200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (int) (byte) 1);
        long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 1);
        long long40 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, (int) (byte) 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray47);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addSeconds(date48, (int) (short) -1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.addHours(date50, (int) (short) 1);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setSeconds(date50, (int) (short) 0);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.toCalendar(date50);
        java.util.Iterator<java.util.Calendar> calendarItor57 = org.apache.commons.lang3.time.DateUtils.iterator(calendar55, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray64);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addSeconds(date65, (int) (short) -1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addHours(date67, (int) (short) 1);
        java.util.Date date71 = org.apache.commons.lang3.time.DateUtils.setSeconds(date67, (int) (short) 0);
        java.util.Calendar calendar72 = org.apache.commons.lang3.time.DateUtils.toCalendar(date67);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar55, calendar72);
        java.util.Calendar calendar75 = org.apache.commons.lang3.time.DateUtils.round(calendar72, 0);
        long long77 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar75, 6);
        java.util.Iterator<java.util.Calendar> calendarItor79 = org.apache.commons.lang3.time.DateUtils.iterator(calendar75, 5);
        boolean boolean80 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar75);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8783L + "'", long38 == 8783L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 527039L + "'", long40 == 527039L);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(calendarItor79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar48, calendar63, (int) (byte) 10);
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar29, calendar48);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        long long85 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar83, 1);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar29, calendar83);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar29, 0);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar88, 1001);
        java.util.Calendar calendar92 = org.apache.commons.lang3.time.DateUtils.truncate(calendar88, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 527039L + "'", long85 == 527039L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-62134477200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=16,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1001);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addHours(date9, 0);
        java.util.Calendar calendar21 = org.apache.commons.lang3.time.DateUtils.toCalendar(date20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addDays(date20, (int) ' ');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.truncate(date23, 10);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 01 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 01 23:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 01 23:01:00 CET 1970");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar34, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addHours(date39, (int) (short) 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date39, (int) (short) 0);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date29, date43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, 1);
        boolean boolean47 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date21, date29);
        long long49 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(date29, 2);
        long long51 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date29, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1440L + "'", long49 == 1440L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar22, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addDays(date25, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) 2, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 2");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 23:59:59 CET 1970");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 5);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setSeconds(date46, (int) (short) 0);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.toCalendar(date46);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(calendar51, 2);
        java.util.Calendar calendar55 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar51, (int) (byte) 0);
        java.util.Calendar calendar57 = org.apache.commons.lang3.time.DateUtils.truncate(calendar51, 1);
        long long59 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar51, (int) (byte) 1);
        long long61 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar51, 2);
        boolean boolean62 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar51);
        java.lang.Class<?> wildcardClass63 = calendar14.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) wildcardClass63, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Class");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 527039L + "'", long59 == 527039L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2764799000L + "'", long61 == 2764799000L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray8);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date44, date52);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date52, (int) (short) 0);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addWeeks(date15, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) 5, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not find ceiling of for type: class java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 05 00:00:00 CET 2073");
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addSeconds(date25, (int) (short) -1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMonths(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date29, (int) (short) 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addYears(date29, (int) (byte) 100);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date33, (int) (byte) 10);
        int int37 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date33, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date9, (int) '4');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date9, date23);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setYears(date9, (int) '4');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, 6);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date32, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:06 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:06 CET 1969");
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) (short) 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.truncate(date31, 10);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, 1001);
        boolean boolean41 = org.apache.commons.lang3.time.DateUtils.isSameDay(date21, date40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) '#');
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date43, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:16:40 CET 2005");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Jan 01 00:16:40 CET 2005");
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.setMinutes(date16, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, 1001);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addWeeks(date24, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) (byte) 100, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Nov 30 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat May 31 23:00:00 CEST 2053");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat May 01 23:00:00 CEST 2055");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.lang.String[] strArray12 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray12);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 10);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 01 00:00:00 CET 35");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:00:00 CET 10");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-61851776400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1001);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addHours(date9, 0);
        java.util.Calendar calendar21 = org.apache.commons.lang3.time.DateUtils.toCalendar(date20);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray28);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setSeconds(date31, (int) (short) 0);
        java.util.Calendar calendar36 = org.apache.commons.lang3.time.DateUtils.toCalendar(date31);
        java.util.Iterator<java.util.Calendar> calendarItor38 = org.apache.commons.lang3.time.DateUtils.iterator(calendar36, 2);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray45);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addSeconds(date46, (int) (short) -1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (short) 1);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.setSeconds(date48, (int) (short) 0);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.toCalendar(date48);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar36, calendar53);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.round(calendar53, 1);
        boolean boolean57 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar21, calendar53);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor38);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setSeconds(date39, 0);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setYears(date39, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date39, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Mar 18 23:59:00 CET 21");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Mar 18 23:59:59 CET 1001");
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date15, (int) (byte) 1);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.toCalendar(date17);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar18, (int) (byte) 10);
        long long22 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar20, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3600000L + "'", long22 == 3600000L);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addWeeks(date11, (int) 'a');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Fri Oct 11 00:00:00 CET 1974");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date13, 1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setDays(date13, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.util.Calendar calendar0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray7);
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.addSeconds(date8, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.addHours(date10, (int) (short) 1);
        java.util.Date date14 = org.apache.commons.lang3.time.DateUtils.setSeconds(date10, (int) (short) 0);
        java.util.Calendar calendar15 = org.apache.commons.lang3.time.DateUtils.toCalendar(date10);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setSeconds(date25, (int) (short) 0);
        java.util.Calendar calendar30 = org.apache.commons.lang3.time.DateUtils.toCalendar(date25);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(calendar30, 2);
        boolean boolean34 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar15, calendar30, (int) (byte) 10);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 0);
        java.util.Calendar calendar49 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar49, 2);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar49, (int) (byte) 0);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar15, calendar53);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray61);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) -1);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addHours(date64, (int) (short) 1);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setSeconds(date64, (int) (short) 0);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.toCalendar(date64);
        java.util.Iterator<java.util.Calendar> calendarItor71 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 2);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray78);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addHours(date81, (int) (short) 1);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.setSeconds(date81, (int) (short) 0);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.toCalendar(date81);
        boolean boolean87 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar69, calendar86);
        java.util.Iterator<java.util.Calendar> calendarItor89 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 5);
        java.util.Calendar calendar91 = org.apache.commons.lang3.time.DateUtils.round(calendar69, (int) (short) 1);
        boolean boolean92 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar53, calendar91);
        long long94 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar91, 2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar0, calendar91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(calendarItor89);
        org.junit.Assert.assertNotNull(calendar91);
        org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1440L + "'", long94 == 1440L);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date26, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (byte) 10);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date26, date40);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameDay(date16, date26);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setMinutes(date16, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date48, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Dec 01 00:01:00 CET 100");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setSeconds(date23, (int) (short) 0);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date23, 10);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date29, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:09:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Mar 12 00:09:59 CET 1970");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMonths(date25, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Iterator<java.util.Calendar> calendarItor32 = org.apache.commons.lang3.time.DateUtils.iterator(date27, 1);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 100);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setMonths(date42, (int) (short) 0);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date42, 0);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(date42, 2);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date60, (int) (short) 100);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addWeeks(date60, 4);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameDay(date42, date60);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) '4');
        boolean boolean68 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date27, date67);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.setMinutes(date67, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Dec 31 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sat Jan 03 03:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Jan 03 03:04:59 CET 1970");
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) (byte) 100);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 100);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addDays(date11, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date11, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1001);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setSeconds(date41, (int) (short) 0);
        java.util.Calendar calendar46 = org.apache.commons.lang3.time.DateUtils.toCalendar(date41);
        java.util.Iterator<java.util.Calendar> calendarItor48 = org.apache.commons.lang3.time.DateUtils.iterator(calendar46, 2);
        boolean boolean50 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar31, calendar46, (int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray57);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addSeconds(date58, (int) (short) -1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addHours(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 0);
        java.util.Calendar calendar65 = org.apache.commons.lang3.time.DateUtils.toCalendar(date60);
        java.util.Iterator<java.util.Calendar> calendarItor67 = org.apache.commons.lang3.time.DateUtils.iterator(calendar65, 2);
        java.util.Calendar calendar69 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar65, (int) (byte) 0);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar69);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar69, 1);
        long long74 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar69, 6);
        boolean boolean75 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar69);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray82);
        java.util.Date date85 = org.apache.commons.lang3.time.DateUtils.addSeconds(date83, (int) (short) -1);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.addHours(date85, (int) (short) 1);
        java.util.Date date89 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date85, (int) (byte) 10);
        java.util.Date date91 = org.apache.commons.lang3.time.DateUtils.setYears(date89, (int) (byte) 1);
        java.util.Date date93 = org.apache.commons.lang3.time.DateUtils.addDays(date91, (int) (short) 10);
        java.util.Date date95 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date91, 0);
        java.util.Calendar calendar96 = org.apache.commons.lang3.time.DateUtils.toCalendar(date91);
        boolean boolean98 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar69, calendar96, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor67);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(calendar96);
        org.junit.Assert.assertEquals(calendar96.toString(), "java.util.GregorianCalendar[time=-62104237200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=10,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) (short) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (byte) 0);
        long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date17, 5);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date17, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:02 CET 1970");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray9);
        java.util.Date date12 = org.apache.commons.lang3.time.DateUtils.parseDate("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.parseDate("hi!", strArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMinutes(date7, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<?> wildcardItor15 = org.apache.commons.lang3.time.DateUtils.iterator((java.lang.Object) date7, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon May 01 00:00:00 CEST 1978");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar48, (int) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar52);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Iterator<java.util.Calendar> calendarItor70 = org.apache.commons.lang3.time.DateUtils.iterator(calendar68, 2);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray77);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addSeconds(date78, (int) (short) -1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addHours(date80, (int) (short) 1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setSeconds(date80, (int) (short) 0);
        java.util.Calendar calendar85 = org.apache.commons.lang3.time.DateUtils.toCalendar(date80);
        boolean boolean86 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar68, calendar85);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.round(calendar85, 0);
        long long90 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar88, 6);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar88);
        java.util.Calendar calendar93 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 1001);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(calendar93, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(calendar93);
        org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=16,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray43);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addSeconds(date44, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addHours(date46, (int) (short) 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addYears(date46, (int) (short) 0);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameDay(date36, date50);
        java.util.Iterator<java.util.Calendar> calendarItor53 = org.apache.commons.lang3.time.DateUtils.iterator(date50, 4);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date11, date50, 0);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, (int) '#');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addHours(date11, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addMonths(date11, 6);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addDays(date11, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendarItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Nov 01 00:00:00 CET 1975");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Dec 05 04:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Fri Jun 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Mar 11 00:00:00 CET 1973");
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addWeeks(date28, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMonths(date28, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Nov 10 23:59:59 CET 1971");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.ceiling(date17, (int) (byte) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMinutes(date19, (int) '4');
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date21, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 11 00:52:00 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Jan 11 17:33:00 CET 2");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.round(date21, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setDays(date23, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 01 00:00:00 CET 2");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addYears(date7, (int) '#');
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (-1));
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addHours(date38, (int) (short) 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date38, (int) (byte) 10);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMinutes(date38, 1001);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date28, date44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setHours(date28, 2);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray55);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addSeconds(date56, (int) (short) -1);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.addHours(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 0);
        java.util.Calendar calendar63 = org.apache.commons.lang3.time.DateUtils.toCalendar(date58);
        java.util.Iterator<java.util.Calendar> calendarItor65 = org.apache.commons.lang3.time.DateUtils.iterator(calendar63, 2);
        long long67 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar63, 5);
        long long69 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar63, (int) (byte) 1);
        java.util.Calendar calendar71 = org.apache.commons.lang3.time.DateUtils.truncate(calendar63, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(calendar48, calendar63, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 16:40:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 02:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 86399000L + "'", long67 == 86399000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 527039L + "'", long69 == 527039L);
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 2);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date9, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date44, date52);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date52, (int) (short) 0);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.truncate(date52, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.truncate(date26, 10);
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date26, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.round(date26, (int) (byte) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addDays(date26, (int) (short) 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.setYears(date39, 6);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.setHours(date39, 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 31 23:59:59 CET 6");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 10:59:59 CET 1969");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.round(date21, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400010L + "'", long23 == 86400010L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date9, date29);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, (int) 'a');
        java.util.Iterator<java.util.Calendar> calendarItor34 = org.apache.commons.lang3.time.DateUtils.iterator(date29, 3);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.addWeeks(date29, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor38 = org.apache.commons.lang3.time.DateUtils.iterator(date36, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 01 00:01:36 CET 2");
        org.junit.Assert.assertNotNull(calendarItor34);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Mar 08 23:59:59 CET 21");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        long long13 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date7, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 86400L + "'", long13 == 86400L);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addSeconds(date26, (int) (short) -1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addHours(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) (short) 0);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.toCalendar(date28);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.truncate(date28, 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.truncate(date45, 10);
        int int54 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date28, date45, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameDay(date18, date28);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.toCalendar(date18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor58 = org.apache.commons.lang3.time.DateUtils.iterator(calendar56, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-90000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setHours(date43, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date49, (int) (byte) 1);
        java.util.Calendar calendar52 = org.apache.commons.lang3.time.DateUtils.toCalendar(date51);
        long long54 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar52, 6);
        boolean boolean55 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar29, calendar52);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.setSeconds(date65, (int) (short) 0);
        java.util.Calendar calendar70 = org.apache.commons.lang3.time.DateUtils.toCalendar(date65);
        java.util.Iterator<java.util.Calendar> calendarItor72 = org.apache.commons.lang3.time.DateUtils.iterator(calendar70, 2);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.addHours(date82, (int) (short) 1);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.setSeconds(date82, (int) (short) 0);
        java.util.Calendar calendar87 = org.apache.commons.lang3.time.DateUtils.toCalendar(date82);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar70, calendar87);
        java.util.Calendar calendar90 = org.apache.commons.lang3.time.DateUtils.round(calendar87, 1);
        boolean boolean91 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar29, calendar90);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 01:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-82800999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=59,MILLISECOND=1,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor72);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        long long18 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(calendar14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86400000L + "'", long18 == 86400000L);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.setYears(date27, (int) (byte) 1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addDays(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addWeeks(date31, 1001);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addWeeks(date33, 4);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setYears(date35, (int) (byte) 10);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, (int) (short) -1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addSeconds(date47, 1);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addWeeks(date49, (int) (byte) 100);
        boolean boolean52 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date37, date51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.setMinutes(date51, 3);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date9, date51, 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addYears(date51, (int) ' ');
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setDays(date58, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Apr 15 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Apr 15 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Dec 02 00:03:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Dec 02 00:00:00 CET 2003");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 10 00:00:00 CET 2003");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setMonths(date21, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, (int) '#');
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.truncate(date29, 5);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date31);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setMinutes(date11, (int) (byte) 10);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.round(date34, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:10:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        boolean boolean32 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        java.util.Calendar calendar34 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray41);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addSeconds(date42, (int) (short) -1);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.addHours(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date44, (int) (byte) 10);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.setMonths(date44, (int) (short) 0);
        java.util.Calendar calendar51 = org.apache.commons.lang3.time.DateUtils.toCalendar(date44);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray58);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addHours(date61, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.setSeconds(date61, (int) (short) 0);
        java.util.Calendar calendar66 = org.apache.commons.lang3.time.DateUtils.toCalendar(date61);
        java.util.Iterator<java.util.Calendar> calendarItor68 = org.apache.commons.lang3.time.DateUtils.iterator(calendar66, 2);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date76 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray75);
        java.util.Date date78 = org.apache.commons.lang3.time.DateUtils.addSeconds(date76, (int) (short) -1);
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.addHours(date78, (int) (short) 1);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.setSeconds(date78, (int) (short) 0);
        java.util.Calendar calendar83 = org.apache.commons.lang3.time.DateUtils.toCalendar(date78);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar66, calendar83);
        java.util.Calendar calendar86 = org.apache.commons.lang3.time.DateUtils.round(calendar66, (int) (short) 1);
        java.util.Calendar calendar88 = org.apache.commons.lang3.time.DateUtils.truncate(calendar66, (int) (byte) 1);
        boolean boolean89 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar51, calendar88);
        boolean boolean90 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar34, calendar88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor92 = org.apache.commons.lang3.time.DateUtils.iterator(calendar88, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Jan 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor68);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-31539600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setHours(date40, 6);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMonths(date40, 4);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.truncate(date44, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray53);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addSeconds(date54, (int) (short) -1);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMonths(date54, (int) (short) 0);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date54, 0);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.setSeconds(date60, (int) (short) 1);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (byte) 0);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.setHours(date62, (int) (short) 0);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.setYears(date66, 6);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addMonths(date66, 10);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(date44, date66);
        boolean boolean72 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date66);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date74 = org.apache.commons.lang3.time.DateUtils.setHours(date11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Fri May 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Fri Jan 01 00:00:01 CET 6");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Nov 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addYears(date35, (int) (short) 0);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date44, date52);
        int int61 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date15, date52, (int) (short) 0);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray68);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray76);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.addSeconds(date77, (int) (short) -1);
        java.util.Date date81 = org.apache.commons.lang3.time.DateUtils.addHours(date79, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang3.time.DateUtils.addYears(date79, (int) (short) 0);
        boolean boolean84 = org.apache.commons.lang3.time.DateUtils.isSameDay(date69, date83);
        java.util.Date date86 = org.apache.commons.lang3.time.DateUtils.addHours(date69, (int) (byte) 10);
        java.util.Date date88 = org.apache.commons.lang3.time.DateUtils.addYears(date69, (int) '#');
        java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date69, 6);
        int int92 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date52, date69, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date94 = org.apache.commons.lang3.time.DateUtils.setMinutes(date52, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MINUTE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (byte) 1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.round(date21, 1001);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addYears(date23, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.truncate(date23, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 31 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 01 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Feb 01 00:00:00 CET 2");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.setYears(date33, (int) (byte) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addDays(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addWeeks(date37, 1001);
        boolean boolean40 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date17, date39);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setYears(date39, (int) (short) 100);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setHours(date42, 4);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.addHours(date54, (int) (short) 1);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date54, (int) (byte) 10);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setYears(date58, (int) (byte) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addDays(date60, (int) (short) 10);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addWeeks(date62, 1001);
        java.util.Date date66 = org.apache.commons.lang3.time.DateUtils.addSeconds(date62, (int) (short) 0);
        java.util.Date date68 = org.apache.commons.lang3.time.DateUtils.truncate(date62, (int) (short) 1);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.addSeconds(date68, 0);
        boolean boolean71 = org.apache.commons.lang3.time.DateUtils.isSameDay(date44, date68);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Mar 18 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Mar 18 04:59:59 CET 100");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Mar 18 23:59:59 CET 21");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Jan 01 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Jan 01 00:00:00 CET 2");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) (short) 1);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date25, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addSeconds(date29, 100);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addHours(date29, 0);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date33, 1001);
        long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date33, 5);
        boolean boolean39 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date15, date33, 0);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date33, 3);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addSeconds(date49, (int) (short) -1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addMonths(date49, (int) '#');
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.setYears(date53, (int) (short) 100);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray62);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.addHours(date65, (int) (short) 1);
        java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date65, (int) (byte) 10);
        boolean boolean70 = org.apache.commons.lang3.time.DateUtils.isSameDay(date53, date69);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addDays(date69, 1001);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date80 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray79);
        java.util.Date date82 = org.apache.commons.lang3.time.DateUtils.addSeconds(date80, (int) (short) -1);
        java.util.Date date84 = org.apache.commons.lang3.time.DateUtils.setDays(date82, 2);
        boolean boolean85 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date72, date82);
        java.util.Date date87 = org.apache.commons.lang3.time.DateUtils.addMonths(date72, (int) (short) 1);
        boolean boolean88 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date33, date87);
        java.util.Date date90 = org.apache.commons.lang3.time.DateUtils.round(date87, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date92 = org.apache.commons.lang3.time.DateUtils.truncate(date87, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 03 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Sep 27 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Fri Oct 27 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMonths(date21, (int) '#');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setYears(date25, (int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray34);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addSeconds(date35, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addHours(date37, (int) (short) 1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.setSeconds(date37, (int) (short) 0);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addMinutes(date37, 10);
        boolean boolean44 = org.apache.commons.lang3.time.DateUtils.isSameDay(date25, date43);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date52 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray51);
        java.util.Date date54 = org.apache.commons.lang3.time.DateUtils.addSeconds(date52, (int) (short) -1);
        java.util.Date date56 = org.apache.commons.lang3.time.DateUtils.setMonths(date52, (int) (short) 0);
        java.util.Date date58 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date52, 0);
        java.util.Date date60 = org.apache.commons.lang3.time.DateUtils.setSeconds(date58, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addSeconds(date60, (int) (byte) 0);
        java.util.Date date64 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date62, (int) (short) 100);
        boolean boolean65 = org.apache.commons.lang3.time.DateUtils.isSameDay(date43, date64);
        boolean boolean67 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date9, date64, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date69 = org.apache.commons.lang3.time.DateUtils.round(date64, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:09:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date17, (int) (short) 1);
        long long23 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date21, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date21, 0);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMonths(date33, (int) (short) 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date37, (int) '4');
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addMinutes(date37, (int) '#');
        java.util.Calendar calendar42 = org.apache.commons.lang3.time.DateUtils.toCalendar(date37);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.truncate(date37, 10);
        java.util.Calendar calendar45 = org.apache.commons.lang3.time.DateUtils.toCalendar(date37);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date37, (int) '4');
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date25, date47, 1001);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400010L + "'", long23 == 86400010L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang3.time.DateUtils.setYears(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray29);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addYears(date40, (int) (short) 0);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date30, date44);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date30, 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.ceiling(date30, 1001);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addYears(date49, (int) 'a');
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.ceiling(date49, 2);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addWeeks(date49, 6);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date7, date49, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Feb 27 00:00:00 CET 1970");
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray26);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addSeconds(date27, (int) (short) -1);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addHours(date29, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date29, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, 100);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addHours(date33, 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addMonths(date33, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, 5);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(date19, date39, 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.truncate(date39, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date45, 3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 05 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addYears(date13, (int) (byte) 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addDays(date17, (int) (byte) 10);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addDays(date17, 100);
        java.lang.Class<?> wildcardClass22 = date21.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Apr 10 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        java.util.Calendar calendar33 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar29, (int) (byte) 0);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.truncate(calendar29, 1);
        boolean boolean37 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) boolean37, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date7, (int) 'a');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addDays(date7, (int) 'a');
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.toCalendar(date15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor18 = org.apache.commons.lang3.time.DateUtils.iterator(calendar16, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=8377200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=98,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date11);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray36);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addSeconds(date37, (int) (short) -1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, 1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addMonths(date39, (int) '#');
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray50);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addSeconds(date51, (int) (short) -1);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addHours(date53, (int) (short) 1);
        java.util.Date date57 = org.apache.commons.lang3.time.DateUtils.addDays(date53, (int) '4');
        java.util.Date date59 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date53, 5);
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.addYears(date59, 4);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addMonths(date59, (int) ' ');
        int int65 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date43, date59, 0);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date73 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray72);
        java.util.Date date75 = org.apache.commons.lang3.time.DateUtils.addSeconds(date73, (int) (short) -1);
        java.util.Date date77 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date75, (int) (short) 100);
        java.util.Date date79 = org.apache.commons.lang3.time.DateUtils.setHours(date75, 5);
        boolean boolean80 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date43, date75);
        int int82 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date11, date75, 1);
        java.lang.Class<?> wildcardClass83 = date75.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=92012400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 1001);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date25);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date25, 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.setMonths(date38, (int) (short) 0);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date38, 0);
        java.util.Date date46 = org.apache.commons.lang3.time.DateUtils.setSeconds(date44, (int) (short) 1);
        long long48 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date44, 1);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date44, (int) (byte) 1);
        int int52 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date30, date44, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 17:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 07 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Dec 31 23:59:59 CET 2069");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 86400000L + "'", long48 == 86400000L);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addWeeks(date9, 4);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date13, date23);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date23, 4);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date28, (int) '4');
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.truncate(date28, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:52 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date17, 1001);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.toCalendar(date19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar20, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (byte) 1);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addDays(date15, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 10 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addYears(date11, (int) (byte) 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date15, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date17, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 01 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:00:00 CET 2072");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addHours(date25, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.truncate(date25, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 03 03:59:59 CET 1970");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, 2);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.setSeconds(date26, (int) (short) 0);
        java.util.Calendar calendar31 = org.apache.commons.lang3.time.DateUtils.toCalendar(date26);
        java.util.Iterator<java.util.Calendar> calendarItor33 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 2);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        boolean boolean49 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar31, calendar48);
        java.util.Iterator<java.util.Calendar> calendarItor51 = org.apache.commons.lang3.time.DateUtils.iterator(calendar31, 5);
        java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.round(calendar31, (int) (short) 1);
        boolean boolean54 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar14, calendar31);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar14, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(calendarItor51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setSeconds(date13, (int) '#');
        long long17 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date15, 5);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMinutes(date15, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date19, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 01 00:00:35 CET 100");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Dec 01 00:52:35 CET 100");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.setYears(date19, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        int int29 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date9, date27, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.setYears(date9, 10);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray38);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addSeconds(date39, (int) (short) -1);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addHours(date41, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date41, (int) (byte) 10);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addSeconds(date45, 100);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.addHours(date45, 0);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date49, 1001);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.addSeconds(date49, (int) (short) 1);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date61 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray60);
        java.util.Date date63 = org.apache.commons.lang3.time.DateUtils.addSeconds(date61, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang3.time.DateUtils.addHours(date63, (int) (short) 1);
        java.util.Date date67 = org.apache.commons.lang3.time.DateUtils.setSeconds(date63, (int) (short) 0);
        java.util.Calendar calendar68 = org.apache.commons.lang3.time.DateUtils.toCalendar(date63);
        java.util.Date date70 = org.apache.commons.lang3.time.DateUtils.truncate(date63, 10);
        java.util.Date date72 = org.apache.commons.lang3.time.DateUtils.addSeconds(date63, 1001);
        boolean boolean73 = org.apache.commons.lang3.time.DateUtils.isSameDay(date53, date72);
        boolean boolean74 = org.apache.commons.lang3.time.DateUtils.isSameDay(date31, date72);
        // The following exception was thrown during execution in test generation
        try {
            long long76 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date31, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:16:40 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setHours(date24, 6);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addMonths(date24, 4);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addYears(date28, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 06:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri May 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed May 01 00:00:00 CET 1974");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addDays(date23, (int) '4');
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 5);
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.addYears(date29, 4);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addMonths(date29, (int) ' ');
        int int35 = org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date13, date29, 0);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, 1);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.addDays(date37, (int) (short) 1);
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.addDays(date39, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Feb 21 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:59:59 CET 1973");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 31 23:59:59 CET 1972");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Nov 30 23:01:59 CET 1972");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Dec 01 23:01:59 CET 1972");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Dec 01 23:01:59 CET 1972");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addHours(date13, 0);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addMonths(date13, (int) (short) -1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 0);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addMinutes(date21, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(date21, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 1001 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Nov 30 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:09:59 CET 1969");
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.lang3.time.DateUtils.getFragmentInMinutes(calendar14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 10 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date9, (int) (short) 100);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setHours(date9, 5);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date13, 4);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setYears(date13, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date13, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 05:59:59 CET 1969");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Dec 31 05:59:59 CET 100");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date7, 1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.ceiling(date7, 1001);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addYears(date26, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addDays(date26, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.setMonths(date30, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 16 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Jan 18 00:00:00 CET 1970");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray14);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addSeconds(date15, (int) (short) -1);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.addHours(date17, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addYears(date17, (int) (short) 0);
        boolean boolean22 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addHours(date7, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.setSeconds(date7, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setDays(date7, (int) (short) 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray35);
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.addSeconds(date36, (int) (short) -1);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMinutes(date36, 2);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date36, (int) (byte) 1);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.setMinutes(date7, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:04:00 CET 1970");
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray21);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addSeconds(date22, (int) (short) -1);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addHours(date24, (int) (short) 1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.setSeconds(date24, (int) (short) 0);
        java.util.Calendar calendar29 = org.apache.commons.lang3.time.DateUtils.toCalendar(date24);
        java.util.Iterator<java.util.Calendar> calendarItor31 = org.apache.commons.lang3.time.DateUtils.iterator(calendar29, 2);
        boolean boolean33 = org.apache.commons.lang3.time.DateUtils.truncatedEquals(calendar14, calendar29, (int) (byte) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date41 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray40);
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addHours(date43, (int) (short) 1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setSeconds(date43, (int) (short) 0);
        java.util.Calendar calendar48 = org.apache.commons.lang3.time.DateUtils.toCalendar(date43);
        java.util.Iterator<java.util.Calendar> calendarItor50 = org.apache.commons.lang3.time.DateUtils.iterator(calendar48, 2);
        boolean boolean51 = org.apache.commons.lang3.time.DateUtils.isSameInstant(calendar14, calendar48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar53 = org.apache.commons.lang3.time.DateUtils.truncate(calendar14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Iterator<java.util.Calendar> calendarItor16 = org.apache.commons.lang3.time.DateUtils.iterator(calendar14, 2);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar14, (int) (byte) 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.round(calendar14, 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.addSeconds(date28, (int) (short) -1);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addMonths(date28, (int) '#');
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.setYears(date32, (int) (short) 100);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date34);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date43 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addSeconds(date43, (int) (short) -1);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.addHours(date45, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.setSeconds(date45, (int) (short) 0);
        java.util.Calendar calendar50 = org.apache.commons.lang3.time.DateUtils.toCalendar(date45);
        java.util.Iterator<java.util.Calendar> calendarItor52 = org.apache.commons.lang3.time.DateUtils.iterator(calendar50, 2);
        java.util.Calendar calendar54 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar50, (int) (byte) 0);
        java.util.Calendar calendar56 = org.apache.commons.lang3.time.DateUtils.truncate(calendar50, 1);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(calendar50, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameDay(calendar35, calendar50);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameLocalTime(calendar20, calendar50);
        java.util.Calendar calendar62 = org.apache.commons.lang3.time.DateUtils.round(calendar20, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long64 = org.apache.commons.lang3.time.DateUtils.getFragmentInHours(calendar62, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendarItor52);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31622399L + "'", long58 == 31622399L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray20);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.addSeconds(date21, (int) (short) -1);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addHours(date23, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, (int) (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date27);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.truncate((java.lang.Object) date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addYears(date30, 0);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addDays(date32, (int) (short) 1);
        java.util.Calendar calendar35 = org.apache.commons.lang3.time.DateUtils.toCalendar(date32);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date32, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fragment 0 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 23:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-7200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.truncate(date7, 1);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Calendar calendar16 = org.apache.commons.lang3.time.DateUtils.round(calendar14, (int) (short) 0);
        java.util.Calendar calendar18 = org.apache.commons.lang3.time.DateUtils.round(calendar16, 0);
        java.util.Calendar calendar20 = org.apache.commons.lang3.time.DateUtils.truncate(calendar16, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar22 = org.apache.commons.lang3.time.DateUtils.ceiling(calendar16, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62135773200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setHours(date11, 2);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.truncate(date13, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Dec 01 02:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Dec 01 00:00:00 CET 1972");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date7, 0);
        java.util.Iterator<java.util.Calendar> calendarItor15 = org.apache.commons.lang3.time.DateUtils.iterator(date7, 2);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date25, (int) (short) 100);
        java.util.Date date29 = org.apache.commons.lang3.time.DateUtils.addWeeks(date25, 4);
        boolean boolean30 = org.apache.commons.lang3.time.DateUtils.isSameDay(date7, date25);
        java.util.Date date32 = org.apache.commons.lang3.time.DateUtils.addDays(date25, 2);
        java.util.Date date34 = org.apache.commons.lang3.time.DateUtils.addMinutes(date25, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang3.time.DateUtils.ceiling(date25, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setMonths(date7, (int) (short) 0);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, (int) '4');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addMinutes(date11, (int) '#');
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date11, 100);
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.setSeconds(date17, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.util.Calendar> calendarItor21 = org.apache.commons.lang3.time.DateUtils.iterator(date17, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:35:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:35 CET 1970");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date31 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray30);
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addHours(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.addYears(date33, (int) (short) 0);
        boolean boolean38 = org.apache.commons.lang3.time.DateUtils.isSameDay(date23, date37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date23, 1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.ceiling(date23, 1001);
        boolean boolean43 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date15, date42);
        java.util.Date date45 = org.apache.commons.lang3.time.DateUtils.addDays(date15, 1001);
        java.util.Date date47 = org.apache.commons.lang3.time.DateUtils.setHours(date15, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:39 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Jan 16 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Sep 28 00:01:39 CET 1972");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:01:39 CET 1970");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.setDays(date9, 2);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date19 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray18);
        java.util.Date date21 = org.apache.commons.lang3.time.DateUtils.addSeconds(date19, (int) (short) -1);
        java.util.Date date23 = org.apache.commons.lang3.time.DateUtils.setMonths(date19, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang3.time.DateUtils.addMonths(date19, (int) (short) 100);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date33 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray32);
        java.util.Date date35 = org.apache.commons.lang3.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang3.time.DateUtils.setMonths(date33, (int) (short) 0);
        java.util.Date date39 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date33, 0);
        java.util.Iterator<java.util.Calendar> calendarItor41 = org.apache.commons.lang3.time.DateUtils.iterator(date33, 2);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date49 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray48);
        java.util.Date date51 = org.apache.commons.lang3.time.DateUtils.addSeconds(date49, (int) (short) -1);
        java.util.Date date53 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date51, (int) (short) 100);
        java.util.Date date55 = org.apache.commons.lang3.time.DateUtils.addWeeks(date51, 4);
        boolean boolean56 = org.apache.commons.lang3.time.DateUtils.isSameDay(date33, date51);
        long long58 = org.apache.commons.lang3.time.DateUtils.getFragmentInMilliseconds(date33, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang3.time.DateUtils.isSameInstant(date25, date33);
        boolean boolean60 = org.apache.commons.lang3.time.DateUtils.isSameDay(date11, date33);
        java.util.Date date62 = org.apache.commons.lang3.time.DateUtils.addYears(date11, 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 02 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(calendarItor41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 86400000L + "'", long58 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Dec 02 23:59:59 CET 1969");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addMonths(date7, (int) '#');
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setYears(date11, (int) (short) 100);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date13);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date13, (int) (byte) 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray23);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addSeconds(date24, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang3.time.DateUtils.addHours(date26, (int) (short) 1);
        java.util.Date date30 = org.apache.commons.lang3.time.DateUtils.ceiling((java.lang.Object) date26, 1001);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date38 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray37);
        java.util.Date date40 = org.apache.commons.lang3.time.DateUtils.addSeconds(date38, (int) (short) -1);
        java.util.Date date42 = org.apache.commons.lang3.time.DateUtils.addHours(date40, (int) (short) 1);
        java.util.Date date44 = org.apache.commons.lang3.time.DateUtils.addMilliseconds(date40, (int) (byte) 10);
        boolean boolean45 = org.apache.commons.lang3.time.DateUtils.isSameDay(date26, date40);
        boolean boolean46 = org.apache.commons.lang3.time.DateUtils.isSameDay(date16, date26);
        java.util.Date date48 = org.apache.commons.lang3.time.DateUtils.round((java.lang.Object) date16, 2);
        java.util.Date date50 = org.apache.commons.lang3.time.DateUtils.addHours(date48, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 01 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-58982691600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=336,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Mon Nov 30 23:00:00 CET 100");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setSeconds(date9, (int) (short) 0);
        java.util.Calendar calendar14 = org.apache.commons.lang3.time.DateUtils.toCalendar(date9);
        java.util.Date date16 = org.apache.commons.lang3.time.DateUtils.truncate(date9, 10);
        java.util.Date date18 = org.apache.commons.lang3.time.DateUtils.setHours(date16, (int) (short) 0);
        java.util.Date date20 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang3.time.DateUtils.setMinutes(date16, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang3.time.DateUtils.addMonths(date16, 1001);
        java.util.Date date26 = org.apache.commons.lang3.time.DateUtils.addWeeks(date24, (int) (byte) 100);
        long long28 = org.apache.commons.lang3.time.DateUtils.getFragmentInSeconds(date26, 6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-3601000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Paris\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Nov 30 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat May 31 23:00:00 CEST 2053");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat May 01 23:00:00 CEST 2055");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 82800L + "'", long28 == 82800L);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.lang3.time.DateUtils.getFragmentInDays(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addSeconds(date9, 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.addMonths(date9, (int) '#');
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.addSeconds(date13, (int) (short) 0);
        java.util.Date date17 = org.apache.commons.lang3.time.DateUtils.setMinutes(date13, 4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Nov 30 23:59:59 CET 1972");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 30 23:04:59 CET 1972");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "" };
        java.util.Date date7 = org.apache.commons.lang3.time.DateUtils.parseDateStrictly("", strArray6);
        java.util.Date date9 = org.apache.commons.lang3.time.DateUtils.addSeconds(date7, (int) (short) -1);
        java.util.Date date11 = org.apache.commons.lang3.time.DateUtils.addHours(date9, (int) (short) 1);
        java.util.Date date13 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang3.time.DateUtils.setMilliseconds(date11, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:59:59 CET 1970");
    }
}

